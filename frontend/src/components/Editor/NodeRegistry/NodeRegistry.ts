import { NodeConfiguration } from './types';
import { NodeDefinition } from '../../../types/nodes';

// –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É–∑–ª–æ–≤
import StartNode from '../CustomNodes/StartNode';
import EntryPointNode from '../CustomNodes/EntryPointNode';
import InteractiveMenuNode from '../CustomNodes/InteractiveMenuNode';
import ActionNode from '../CustomNodes/ActionNode';
import TriggerNode from '../CustomNodes/TriggerNode';
import DataNode from '../CustomNodes/DataNode';
import IntegrationNode from '../CustomNodes/IntegrationNode';
import ScenarioNode from '../CustomNodes/ScenarioNode';
import SwitchNode from '../CustomNodes/SwitchNode';
import WebhookNode from '../CustomNodes/WebhookNode';
import TextConditionNode from '../CustomNodes/TextConditionNode';
import CommandTriggerNode from '../CustomNodes/CommandTriggerNode';

class NodeRegistry {
  private static instance: NodeRegistry;
  private configurations: Map<string, NodeConfiguration> = new Map();

  private constructor() {
    this.initializeDefaultNodes();
  }

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∑–ª–æ–≤ –∏–∑ NodeLibrary
   */
  public importFromNodeLibrary(nodeDefinitions: NodeDefinition[]): void {
    nodeDefinitions.forEach(nodeDef => {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      const renderComponent = this.getComponentForNodeType(nodeDef.type);
      
      if (renderComponent) {
        this.registerNode({
          type: nodeDef.type,
          category: nodeDef.category,
          name: nodeDef.name,
          description: nodeDef.description,
          icon: nodeDef.icon,
          color: nodeDef.color,
          usageFrequency: nodeDef.usageFrequency,
          defaultData: {
            ...nodeDef.defaultConfig,
            label: nodeDef.name,
            icon: nodeDef.icon,
            color: nodeDef.color
          },
          inputs: nodeDef.inputs,
          outputs: nodeDef.outputs,
          renderComponent
        });
      }
    });
  }

  public static getInstance(): NodeRegistry {
    if (!NodeRegistry.instance) {
      NodeRegistry.instance = new NodeRegistry();
    }
    return NodeRegistry.instance;
  }

  private initializeDefaultNodes(): void {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–∑–ª—ã
    this.registerNode({
      type: 'start',
      category: 'triggers',
      name: '–°—Ç–∞—Ä—Ç',
      description: '–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã',
      icon: 'üöÄ',
      color: '#22c55e',
      usageFrequency: 'frequent',
      defaultData: { 
        label: '–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        icon: 'üöÄ',
        color: '#22c55e'
      },
      inputs: [],
      outputs: [{ 
        id: 'output', 
        name: '–í—ã—Ö–æ–¥', 
        type: 'control', 
        dataType: 'any', 
        required: false, 
        multiple: false 
      }],
      renderComponent: StartNode
    });

    this.registerNode({
      type: 'entry-point',
      category: 'triggers',
      name: '–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞',
      description: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –±–æ—Ç',
      icon: 'üöÄ',
      color: '#22c55e',
      usageFrequency: 'frequent',
      defaultData: { 
        triggerType: 'start_command',
        description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞',
        icon: 'üöÄ',
        color: '#22c55e'
      },
      inputs: [],
      outputs: [{ 
        id: 'output', 
        name: '–í—ã—Ö–æ–¥', 
        type: 'control', 
        dataType: 'any', 
        required: false, 
        multiple: false 
      }],
      renderComponent: EntryPointNode
    });

    this.registerNode({
      type: 'interactive-menu',
      category: 'actions',
      name: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é',
      description: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏',
      icon: 'üìã',
      color: '#3b82f6',
      usageFrequency: 'frequent',
      defaultData: { 
        title: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode: 'HTML',
        buttons: [],
        keyboardType: 'inline',
        buttonsPerRow: 2,
        icon: 'üìã',
        color: '#3b82f6'
      },
      inputs: [{ 
        id: 'input', 
        name: '–í—Ö–æ–¥', 
        type: 'control', 
        dataType: 'any', 
        required: true, 
        multiple: false 
      }],
      outputs: [{ 
        id: 'output', 
        name: '–í—ã—Ö–æ–¥', 
        type: 'control', 
        dataType: 'any', 
        required: false, 
        multiple: false 
      }],
      renderComponent: InteractiveMenuNode
    });

    this.registerNode({
      type: 'trigger-message',
      category: 'triggers',
      name: '–°–æ–æ–±—â–µ–Ω–∏–µ',
      description: '–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
      icon: 'üì®',
      color: '#3b82f6',
      usageFrequency: 'frequent',
      defaultData: { 
        label: '–°–æ–æ–±—â–µ–Ω–∏–µ',
        triggerType: 'text',
        icon: 'üì®',
        color: '#3b82f6'
      },
      inputs: [],
      outputs: [{ 
        id: 'output', 
        name: '–í—ã—Ö–æ–¥', 
        type: 'control', 
        dataType: 'any', 
        required: false, 
        multiple: false 
      }],
      renderComponent: TriggerNode
    });

    this.registerNode({
      type: 'action-send-message',
      category: 'actions',
      name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      icon: 'üí¨',
      color: '#10b981',
      usageFrequency: 'frequent',
      defaultData: { 
        label: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
        actionType: 'send',
        icon: 'üí¨',
        color: '#10b981',
        message: '–ü—Ä–∏–≤–µ—Ç!'
      },
      inputs: [{ 
        id: 'input', 
        name: '–í—Ö–æ–¥', 
        type: 'control', 
        dataType: 'any', 
        required: true, 
        multiple: false 
      }],
      outputs: [{ 
        id: 'output', 
        name: '–í—ã—Ö–æ–¥', 
        type: 'control', 
        dataType: 'any', 
        required: false, 
        multiple: false 
      }],
      renderComponent: ActionNode
    });

    this.registerNode({
      type: 'condition-text',
      category: 'conditions',
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
      icon: 'üîç',
      color: '#f59e0b',
      usageFrequency: 'frequent',
      defaultData: { 
        label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞',
        conditionType: 'contains',
        icon: 'üîç',
        color: '#f59e0b',
        condition: '—Å–æ–¥–µ—Ä–∂–∏—Ç',
        value: ''
      },
      inputs: [{ 
        id: 'input', 
        name: '–í—Ö–æ–¥', 
        type: 'control', 
        dataType: 'any', 
        required: true, 
        multiple: false 
      }],
      outputs: [
        { id: 'true', name: '–î–∞', type: 'control', dataType: 'any', required: false, multiple: false },
        { id: 'false', name: '–ù–µ—Ç', type: 'control', dataType: 'any', required: false, multiple: false }
      ],
      renderComponent: TextConditionNode
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–∑–ª—ã...
    this.registerLegacyNodes();
  }

  private registerLegacyNodes(): void {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–∑–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const legacyNodes = [
      { type: 'webhook-telegram', component: WebhookNode, category: 'triggers', icon: 'üì°', color: '#3b82f6' },
      { type: 'switch-command', component: SwitchNode, category: 'conditions', icon: 'üîÄ', color: '#f59e0b' },
      { type: 'data-save', component: DataNode, category: 'data', icon: 'üíæ', color: '#8b5cf6' },
      { type: 'integration-http', component: IntegrationNode, category: 'integrations', icon: 'üîó', color: '#06b6d4' },
      { type: 'scenario-welcome', component: ScenarioNode, category: 'scenarios', icon: 'üëã', color: '#22c55e' },
      { type: 'command', component: CommandTriggerNode, category: 'triggers', icon: '‚ö°', color: '#ef4444' },
      { type: 'send_message', component: ActionNode, category: 'actions', icon: 'üí¨', color: '#3b82f6' },
      { type: 'send_message_with_keyboard', component: ActionNode, category: 'actions', icon: '‚å®Ô∏è', color: '#6366f1' },
      { type: 'callback_handler', component: TriggerNode, category: 'triggers', icon: 'üîÑ', color: '#f59e0b' }
    ];

    legacyNodes.forEach(node => {
      this.registerNode({
        type: node.type,
        category: node.category as any,
        name: this.getNodeDisplayName(node.type),
        description: this.getNodeDescription(node.type),
        icon: node.icon,
        color: node.color,
        usageFrequency: this.getNodeUsageFrequency(node.type),
        defaultData: this.getDefaultNodeData(node.type),
        inputs: this.getNodeInputs(node.type),
        outputs: this.getNodeOutputs(node.type),
        renderComponent: node.component
      });
    });
  }

  public registerNode(config: NodeConfiguration): void {
    this.configurations.set(config.type, config);
  }

  public getNodeConfiguration(nodeType: string): NodeConfiguration | undefined {
    return this.configurations.get(nodeType);
  }

  public getAllConfigurations(): NodeConfiguration[] {
    return Array.from(this.configurations.values());
  }

  public getNodesByCategory(category: string): NodeConfiguration[] {
    return this.getAllConfigurations().filter(config => config.category === category);
  }

  public getNodeTypes(): string[] {
    return Array.from(this.configurations.keys());
  }

  public hasNode(nodeType: string): boolean {
    return this.configurations.has(nodeType);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–æ —Ç–∏–ø—É —É–∑–ª–∞
   */
  private getComponentForNodeType(nodeType: string): any {
    const componentMap: Record<string, any> = {
      'start': StartNode,
      'entry-point': EntryPointNode,
      'interactive-menu': InteractiveMenuNode,
      'trigger-message': TriggerNode,
      'trigger-command': CommandTriggerNode,
      'trigger-text': TriggerNode,
      'action-send-message': ActionNode,
      'action-send-photo': ActionNode,
      'condition-text': TextConditionNode,
      'condition-user': TextConditionNode,
      'data-save': DataNode,
      'data-load': DataNode,
      'webhook-telegram': WebhookNode,
      'switch-command': SwitchNode,
      'integration-http': IntegrationNode,
      'integration-database': IntegrationNode,
      'scenario-quiz': ScenarioNode,
      'multi-node': ScenarioNode,
      'send_message_with_keyboard': InteractiveMenuNode,
      'callback_handler': TriggerNode,
      'command': CommandTriggerNode
    };

    return componentMap[nodeType] || ActionNode; // Fallback –∫ ActionNode
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è legacy —É–∑–ª–æ–≤
  private getNodeDisplayName(type: string): string {
    const names: Record<string, string> = {
      'webhook-telegram': 'Telegram Webhook',
      'switch-command': 'Switch (–ö–æ–º–∞–Ω–¥—ã)',
      'data-save': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
      'integration-http': 'HTTP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
      'scenario-welcome': '–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
      'command': '–ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞',
      'send_message': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      'send_message_with_keyboard': '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
      'callback_handler': '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫'
    };
    return names[type] || type;
  }

  private getNodeDescription(type: string): string {
    const descriptions: Record<string, string> = {
      'webhook-telegram': '–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram',
      'switch-command': '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
      'data-save': '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      'integration-http': 'HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º API',
      'scenario-welcome': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π',
      'command': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞',
      'send_message': '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      'send_message_with_keyboard': '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏',
      'callback_handler': '–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫'
    };
    return descriptions[type] || '–£–∑–µ–ª –±–æ—Ç–∞';
  }

  private getDefaultNodeData(type: string): Record<string, any> {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è legacy —É–∑–ª–æ–≤
    return {
      label: this.getNodeDisplayName(type),
      icon: this.configurations.get(type)?.icon || '‚öôÔ∏è',
      color: this.configurations.get(type)?.color || '#6b7280'
    };
  }

  private getNodeInputs(type: string): any[] {
    // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —É–∑–ª–æ–≤ –∏–º–µ—é—Ç –æ–¥–∏–Ω –≤—Ö–æ–¥
    const noInputNodes = ['start', 'entry-point', 'trigger-message', 'webhook-telegram', 'command', 'callback_handler'];
    if (noInputNodes.includes(type)) {
      return [];
    }
    return [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }];
  }

  private getNodeOutputs(type: string): any[] {
    // –£—Å–ª–æ–≤–Ω—ã–µ —É–∑–ª—ã –∏–º–µ—é—Ç –¥–≤–∞ –≤—ã—Ö–æ–¥–∞
    const conditionNodes = ['condition-text', 'switch-command'];
    if (conditionNodes.includes(type)) {
      return [
        { id: 'true', name: '–î–∞', type: 'control', dataType: 'any', required: false, multiple: false },
        { id: 'false', name: '–ù–µ—Ç', type: 'control', dataType: 'any', required: false, multiple: false }
      ];
    }
    return [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }];
  }

  private getNodeUsageFrequency(type: string): 'frequent' | 'moderate' | 'rare' {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è legacy —É–∑–ª–æ–≤
    const frequentNodes = ['webhook-telegram', 'command', 'send_message', 'send_message_with_keyboard', 'callback_handler'];
    const moderateNodes = ['switch-command', 'data-save'];
    
    if (frequentNodes.includes(type)) return 'frequent';
    if (moderateNodes.includes(type)) return 'moderate';
    return 'rare';
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const nodeRegistry = NodeRegistry.getInstance();
export default NodeRegistry;