import { useState, useCallback, useRef, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useNodesState, useEdgesState } from 'reactflow';
import type { Node, Edge } from 'reactflow';

import { useApp } from '../../../context/AppContext';

const initialNodes: Node[] = [];
const initialEdges: Edge[] = [];

export const useEditorState = () => {
  const { botId } = useParams<{ botId?: string }>();
  const { state, fetchBot } = useApp();
  
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const [selectedNode, setSelectedNode] = useState<Node | null>(null);
  const [isValidationPanelVisible, setIsValidationPanelVisible] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const [reactFlowInstance, setReactFlowInstance] = useState<any>(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —É–∑–ª–æ–≤
  const handleNodesChange = useCallback((changes: any[]) => {
    onNodesChange(changes);
  }, [onNodesChange]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (botId) {
      fetchBot(botId);
    }
  }, [botId, fetchBot]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Ä–µ–±—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞
  useEffect(() => {
    if (state.currentBot?.configuration && isInitialLoad) {
      console.log('‚ú® –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤');
      
      let convertedNodes: Node[] = [];
      let convertedEdges: Edge[] = [];
      
      if (state.currentBot.configuration.nodes) {
        console.log('üì¶ –£–∑–ª—ã:', state.currentBot.configuration.nodes.length);
        
        convertedNodes = state.currentBot.configuration.nodes.map((node: any) => {
          // –í —Å—Ö–µ–º–µ –¥–∞–Ω–Ω—ã–µ –ª–µ–∂–∞—Ç –≤ node.data, –∞ –Ω–µ node.config
          const nodeData = node.data || node.config || {};
          return {
            id: node.id,
            type: node.type,
            position: node.position,
            data: nodeData
          };
        });
      }

      // –°–ù–ê–ß–ê–õ–ê –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º connections - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      if (state.currentBot.configuration.connections) {
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - connections –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        convertedEdges = state.currentBot.configuration.connections.map((conn: any) => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å–≤—è–∑–∏
          let label = '';
          if (conn.sourceOutput && conn.sourceOutput !== 'default') {
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤ InteractiveMenu —É–∑–ª–µ
            const sourceNode = convertedNodes.find(n => n.id === conn.sourceNodeId);
            if (sourceNode?.type === 'interactiveMenu' && sourceNode.data?.buttons) {
              const button = sourceNode.data.buttons.find((btn: any) => btn.id === conn.sourceOutput);
              if (button) {
                label = button.text;
              }
            } else {
              label = conn.sourceOutput;
            }
          }
          
          return {
            id: conn.id,
            source: conn.sourceNodeId,
            target: conn.targetNodeId,
            sourceHandle: conn.sourceOutput,
            targetHandle: conn.targetInput,
            label: label,
            type: 'smoothstep',
            animated: false,
            style: { stroke: '#3b82f6', strokeWidth: 2 }
          };
        });
      } else if (state.currentBot.configuration.edges) {
        // –§–æ—Ä–º–∞—Ç ReactFlow edges
        convertedEdges = state.currentBot.configuration.edges;
      } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - connections –≤–Ω—É—Ç—Ä–∏ —É–∑–ª–æ–≤
        console.log('üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º connections –∏–∑ —É–∑–ª–æ–≤...');
        convertedNodes.forEach((node: any) => {
          const originalNode = state.currentBot?.configuration?.nodes.find((n: any) => n.id === node.id);
          if (originalNode?.connections) {
            console.log(`üìé –£–∑–µ–ª ${node.id} –∏–º–µ–µ—Ç connections:`, originalNode.connections);
            
            if (Array.isArray(originalNode.connections)) {
              // –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ target —É–∑–ª–æ–≤
              originalNode.connections.forEach((targetId: string, index: number) => {
                const edge = {
                  id: `${node.id}-${targetId}-${index}`,
                  source: node.id,
                  target: targetId,
                  type: 'default'
                };
                console.log('‚û°Ô∏è –°–æ–∑–¥–∞–µ–º edge:', edge);
                convertedEdges.push(edge);
              });
            } else if (typeof originalNode.connections === 'object') {
              // –û–±—ä–µ–∫—Ç —Å —É—Å–ª–æ–≤–∏—è–º–∏ (–¥–ª—è condition —É–∑–ª–æ–≤)
              Object.entries(originalNode.connections).forEach(([condition, targets]: [string, any]) => {
                if (Array.isArray(targets)) {
                  targets.forEach((targetId: string, index: number) => {
                    const edge = {
                      id: `${node.id}-${targetId}-${condition}-${index}`,
                      source: node.id,
                      target: targetId,
                      sourceHandle: condition,
                      type: 'default'
                    };
                    console.log(`‚û°Ô∏è –°–æ–∑–¥–∞–µ–º conditional edge (${condition}):`, edge);
                    convertedEdges.push(edge);
                  });
                }
              });
            }
          }
        });
        console.log('üîó –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ edges:', convertedEdges.length);
      }

      // –ü–û–¢–û–ú –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const hasEntryPoint = convertedNodes.some((node: any) => node.type === 'entryPoint');
      if (!hasEntryPoint) {
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π trigger —É–∑–µ–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const firstTrigger = convertedNodes.find((node: any) => node.type === 'trigger');
        
        const entryPoint = {
          id: 'entry-point',
          type: 'entryPoint',
          position: { x: -150, y: 50 },
          data: {
            label: '–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞',
            description: '–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞'
          }
        };
        
        convertedNodes.unshift(entryPoint);
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É trigger, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (firstTrigger) {
          const entryEdge = {
            id: `entry-point-${firstTrigger.id}`,
            source: 'entry-point',
            target: firstTrigger.id,
            type: 'default'
          };
          console.log('üöÄ –î–æ–±–∞–≤–ª—è–µ–º EntryPoint edge:', entryEdge);
          convertedEdges.push(entryEdge);
        }
      }
      
      setNodes(convertedNodes);
      setEdges(convertedEdges);
      setIsInitialLoad(false);
    }
  }, [state.currentBot, isInitialLoad]); // –£–±–∏—Ä–∞–µ–º setNodes, setEdges –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  return {
    nodes,
    edges,
    selectedNode,
    isValidationPanelVisible,
    reactFlowWrapper,
    reactFlowInstance,
    handleNodesChange,
    onEdgesChange,
    setSelectedNode,
    setIsValidationPanelVisible,
    setReactFlowInstance,
    setNodes,
    setEdges
  };
};