import React, { useState, useMemo, useEffect } from 'react';
import { NodeDefinition, NodeCategory } from '../../../types/nodes';
import { getNodeLocalization } from '../../../utils/localization';
import { useCanvasLogger } from '../CanvasLogger';
import { SimpleUsageHelper } from '../UsageAnalyzer/SimpleUsageHelper';
import UsageStatistics from '../UsageAnalyzer/UsageStatistics';
import { nodeRegistry } from '../NodeRegistry/NodeRegistry';
import styles from './NodeLibrary.module.css';

const nodeDefinitions: NodeDefinition[] = [
  // –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
  {
    type: 'entry-point',
    category: 'triggers',
    name: '–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞',
    description: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –±–æ—Ç',
    icon: 'üöÄ',
    color: '#22c55e',
    usageFrequency: 'frequent', // 95% –±–æ—Ç–æ–≤
    defaultConfig: { 
      triggerType: 'start_command',
      description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞'
    },
    inputs: [],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },

  // –ú—É–ª—å—Ç–∏-—É–∑–µ–ª
  {
    type: 'multi-node',
    category: 'scenarios',
    name: '–ú—É–ª—å—Ç–∏-—É–∑–µ–ª',
    description: '–£–∑–µ–ª —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏',
    icon: 'üì¶',
    color: '#3b82f6',
    usageFrequency: 'moderate', // 45% –±–æ—Ç–æ–≤
    defaultConfig: { 
      label: '–ú—É–ª—å—Ç–∏-—É–∑–µ–ª',
      isExpanded: false,
      children: [],
      buttonLayout: 'bottom'
    },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  
  // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
  {
    type: 'interactive-menu',
    category: 'actions',
    name: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é',
    description: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏',
    icon: 'üìã',
    color: '#3b82f6',
    usageFrequency: 'frequent', // 85% –±–æ—Ç–æ–≤
    defaultConfig: { 
      title: '–ú–µ–Ω—é',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      parse_mode: 'HTML',
      buttons: [],
      keyboardType: 'inline',
      buttonsPerRow: 2
    },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },

  // –°—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª (legacy)
  {
    type: 'start',
    category: 'triggers',
    name: '–°—Ç–∞—Ä—Ç',
    description: '–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã',
    icon: '‚ñ∂Ô∏è',
    color: '#22c55e',
    usageFrequency: 'frequent', // 90% –±–æ—Ç–æ–≤ (legacy)
    defaultConfig: { label: '–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' },
    inputs: [],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  
  // Webhook —É–∑–ª—ã (–∫–∞–∫ –≤ n8n)
  {
    type: 'webhook-telegram',
    category: 'triggers',
    name: 'Telegram Webhook',
    description: '–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram',
    icon: 'üîó',
    color: '#3b82f6',
    usageFrequency: 'moderate', // 40% –±–æ—Ç–æ–≤
    defaultConfig: { label: 'Telegram Webhook', webhookType: 'telegram' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  
  // Switch —É–∑–µ–ª –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  {
    type: 'switch-command',
    category: 'conditions',
    name: 'Switch (–ö–æ–º–∞–Ω–¥—ã)',
    description: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
    icon: 'üîÄ',
    color: '#f59e0b',
    usageFrequency: 'moderate', // 40% –±–æ—Ç–æ–≤
    defaultConfig: { 
      label: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥',
      switchType: 'command',
      routes: [
        { condition: '/start', label: 'Start' },
        { condition: '/help', label: 'Help' },
        { condition: 'default', label: 'Other' }
      ]
    },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [
      { id: 'output-0', name: '/start', type: 'control', dataType: 'any', required: false, multiple: false },
      { id: 'output-1', name: '/help', type: 'control', dataType: 'any', required: false, multiple: false },
      { id: 'output-2', name: 'Other', type: 'control', dataType: 'any', required: false, multiple: false }
    ]
  },
  
  // –¢—Ä–∏–≥–≥–µ—Ä—ã
  {
    type: 'trigger-message',
    category: 'triggers',
    name: '–°–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
    icon: 'üì®',
    color: '#3b82f6',
    usageFrequency: 'frequent', // 70% –±–æ—Ç–æ–≤
    defaultConfig: { messageType: 'text', filters: [] },
    inputs: [],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  {
    type: 'trigger-command',
    category: 'triggers',
    name: '–ö–æ–º–∞–Ω–¥–∞',
    description: '–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã (/start, /help)',
    icon: '‚ö°',
    color: '#3b82f6',
    usageFrequency: 'frequent', // 80% –±–æ—Ç–æ–≤
    defaultConfig: { command: '/start' },
    inputs: [],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  
  // –î–µ–π—Å—Ç–≤–∏—è
  {
    type: 'action-send-message',
    category: 'actions',
    name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
    icon: 'üí¨',
    color: '#10b981',
    usageFrequency: 'frequent', // 90% –±–æ—Ç–æ–≤
    defaultConfig: { message: '–ü—Ä–∏–≤–µ—Ç!', parseMode: 'HTML' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  {
    type: 'action-send-photo',
    category: 'actions',
    name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ',
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    icon: 'üñºÔ∏è',
    color: '#10b981',
    usageFrequency: 'rare', // 30% –±–æ—Ç–æ–≤
    defaultConfig: { photo: '', caption: '' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  
  // –£—Å–ª–æ–≤–∏—è
  {
    type: 'condition-text',
    category: 'conditions',
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
    icon: 'üîç',
    color: '#f59e0b',
    usageFrequency: 'frequent', // 75% –±–æ—Ç–æ–≤
    defaultConfig: { condition: 'contains', value: '', caseSensitive: false },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [
      { id: 'true', name: '–î–∞', type: 'control', dataType: 'any', required: false, multiple: false },
      { id: 'false', name: '–ù–µ—Ç', type: 'control', dataType: 'any', required: false, multiple: false }
    ]
  },
  {
    type: 'condition-user',
    category: 'conditions',
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    icon: 'üë§',
    color: '#f59e0b',
    usageFrequency: 'moderate', // 50% –±–æ—Ç–æ–≤
    defaultConfig: { checkType: 'isAdmin' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [
      { id: 'true', name: '–î–∞', type: 'control', dataType: 'any', required: false, multiple: false },
      { id: 'false', name: '–ù–µ—Ç', type: 'control', dataType: 'any', required: false, multiple: false }
    ]
  },
  
  // –î–∞–Ω–Ω—ã–µ
  {
    type: 'data-save',
    category: 'data',
    name: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
    description: '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
    icon: 'üíæ',
    color: '#8b5cf6',
    usageFrequency: 'moderate', // 60% –±–æ—Ç–æ–≤
    defaultConfig: { key: 'userData', value: '' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  {
    type: 'data-load',
    category: 'data',
    name: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
    description: '–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
    icon: 'üìÇ',
    color: '#8b5cf6',
    usageFrequency: 'moderate', // 55% –±–æ—Ç–æ–≤
    defaultConfig: { key: 'userData' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  
  // –ù–æ–≤—ã–µ —É–∑–ª—ã –∏–∑ —Å—Ö–µ–º—ã n8n
  {
    type: 'send_message_with_keyboard',
    category: 'actions',
    name: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏',
    icon: '‚å®Ô∏è',
    color: '#6366f1',
    usageFrequency: 'frequent', // 80% –±–æ—Ç–æ–≤
    defaultConfig: { 
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      parse_mode: 'HTML',
      keyboard: {
        type: 'inline',
        buttons: [
          [{ text: '–ö–Ω–æ–ø–∫–∞ 1', callback_data: 'btn1' }]
        ]
      }
    },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  {
    type: 'callback_handler',
    category: 'triggers',
    name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫',
    description: '–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–æ–∫',
    icon: 'üîÑ',
    color: '#f59e0b',
    usageFrequency: 'frequent', // 75% –±–æ—Ç–æ–≤
    defaultConfig: { 
      callback_data: 'button_clicked',
      name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏'
    },
    inputs: [],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  {
    type: 'command',
    category: 'triggers',
    name: '–ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞',
    description: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (/start, /help)',
    icon: '‚ö°',
    color: '#ef4444',
    usageFrequency: 'frequent', // 85% –±–æ—Ç–æ–≤
    defaultConfig: { 
      command: '/start',
      name: '–ö–æ–º–∞–Ω–¥–∞ /start'
    },
    inputs: [],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  }
];

const categories: { key: NodeCategory; name: string; icon: string }[] = [
  { key: 'triggers', name: '–¢—Ä–∏–≥–≥–µ—Ä—ã', icon: 'üöÄ' },
  { key: 'actions', name: '–î–µ–π—Å—Ç–≤–∏—è', icon: '‚ö°' },
  { key: 'conditions', name: '–£—Å–ª–æ–≤–∏—è', icon: '‚ùì' },
  { key: 'data', name: '–î–∞–Ω–Ω—ã–µ', icon: 'üíæ' },
  { key: 'integrations', name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', icon: 'üîó' },
  { key: 'scenarios', name: '–°—Ü–µ–Ω–∞—Ä–∏–∏', icon: 'üìã' }
];

interface NodeLibraryProps {
  onNodeAdd?: (nodeType: string) => void;
  onNodeHelpRequest?: (nodeType: string) => void;
}

const NodeLibrary: React.FC<NodeLibraryProps> = ({ onNodeAdd, onNodeHelpRequest }) => {
  const [selectedCategory, setSelectedCategory] = useState<NodeCategory>('triggers');
  const [searchQuery, setSearchQuery] = useState('');
  const [frequencyFilter, setFrequencyFilter] = useState<'all' | 'frequent' | 'moderate' | 'rare'>('all');
  const { logDragStart, logLibraryOpen } = useCanvasLogger();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NodeRegistry —Å –¥–∞–Ω–Ω—ã–º–∏ —É–∑–ª–æ–≤
  useEffect(() => {
    nodeRegistry.importFromNodeLibrary(nodeDefinitions);
  }, []);

  // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  React.useEffect(() => {
    logLibraryOpen();
  }, [logLibraryOpen]);

  const filteredNodes = useMemo(() => {
    let nodes = nodeDefinitions.filter(node => {
      const matchesCategory = node.category === selectedCategory;
      const matchesFrequency = frequencyFilter === 'all' || node.usageFrequency === frequencyFilter;
      
      return matchesCategory && matchesFrequency;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—á–∞—Å—Ç—ã–µ —É–∑–ª—ã —Å–Ω–∞—á–∞–ª–∞)
    const sortedNodes = SimpleUsageHelper.sortByPriority(nodes);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É —Å –ª–æ–≥–∏–∫–æ–π "–º–∏–Ω–∏–º—É–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏"
    if (searchQuery) {
      const searchResults = sortedNodes.filter(node => 
        node.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (node.description && node.description.toLowerCase().includes(searchQuery.toLowerCase()))
      );
      
      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω—å—à–µ 3 —É–∑–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —É–∑–ª—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ 3
      if (searchResults.length < 3) {
        const firstThree = sortedNodes.slice(0, 3);
        const combined = [...searchResults];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏–∑ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
        firstThree.forEach(node => {
          if (!combined.find(existing => existing.type === node.type)) {
            combined.push(node);
          }
        });
        
        return combined.slice(0, Math.max(3, searchResults.length));
      }
      
      return searchResults;
    }

    return sortedNodes;
  }, [selectedCategory, searchQuery, frequencyFilter]);

  const handleNodeDragStart = (event: React.DragEvent, nodeType: string) => {
    event.dataTransfer.setData('application/reactflow', nodeType);
    event.dataTransfer.effectAllowed = 'move';
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    logDragStart(nodeType, 'library');
  };

  const handleNodeAdd = (nodeType: string) => {
    if (onNodeAdd) {
      onNodeAdd(nodeType);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–∑–ª—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
  const showingExtraNodes = useMemo(() => {
    if (!searchQuery) return false;
    
    let categoryNodes = nodeDefinitions.filter(node => {
      const matchesCategory = node.category === selectedCategory;
      const matchesFrequency = frequencyFilter === 'all' || node.usageFrequency === frequencyFilter;
      return matchesCategory && matchesFrequency;
    });
    
    const searchResults = categoryNodes.filter(node => 
      node.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (node.description && node.description.toLowerCase().includes(searchQuery.toLowerCase()))
    );
    
    return searchResults.length < 3 && filteredNodes.length > searchResults.length;
  }, [searchQuery, selectedCategory, frequencyFilter, filteredNodes]);

  return (
    <div className={styles.nodeLibrary}>
      <div className={styles.header}>
        <h3>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–∑–ª–æ–≤</h3>
        <div className={styles.searchContainer}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —É–∑–ª–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className={styles.searchInput}
          />
          <div className={styles.searchHint}>
            üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–∑–ª–æ–≤
          </div>
        </div>
        
        <div className={styles.frequencyFilter}>
          <label>–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</label>
          <select 
            value={frequencyFilter} 
            onChange={(e) => setFrequencyFilter(e.target.value as any)}
            className={styles.frequencySelect}
          >
            <option value="all">–í—Å–µ —É–∑–ª—ã</option>
            <option value="frequent">üî• –ß–∞—Å—Ç—ã–µ (&gt;70%)</option>
            <option value="moderate">üìä –°—Ä–µ–¥–Ω–∏–µ (30-70%)</option>
            <option value="rare">üíé –†–µ–¥–∫–∏–µ (&lt;30%)</option>
          </select>
        </div>
      </div>

      <div className={styles.categories}>
        {categories.map(category => (
          <button
            key={category.key}
            className={`${styles.categoryButton} ${
              selectedCategory === category.key ? styles.active : ''
            }`}
            onClick={() => setSelectedCategory(category.key)}
          >
            <span className={styles.categoryIcon}>{category.icon}</span>
            <span className={styles.categoryName}>{category.name}</span>
          </button>
        ))}
      </div>

      <UsageStatistics nodes={nodeDefinitions} />

      <div className={styles.nodeList}>
        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∑–ª–∞—Ö –ø—Ä–∏ –ø–æ–∏—Å–∫–µ */}
        {showingExtraNodes && (
          <div className={styles.searchNotice}>
            <div className={styles.noticeIcon}>‚ÑπÔ∏è</div>
            <div className={styles.noticeText}>
              –ü–æ–∫–∞–∑–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–∑–ª—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–±–æ—Ä–∞
            </div>
          </div>
        )}

        {filteredNodes.map(node => {
          const localization = getNodeLocalization(node.type);
          return (
            <div
              key={node.type}
              className={styles.nodeItem}
              draggable
              onDragStart={(e) => handleNodeDragStart(e, node.type)}
              title={localization.tooltip}
            >
              <div 
                className={styles.nodeIcon}
                style={{ backgroundColor: node.color }}
              >
                {node.icon}
              </div>
              <div className={styles.nodeInfo} onClick={() => handleNodeAdd(node.type)}>
                <div className={styles.nodeHeader}>
                  <div className={styles.nodeName}>{localization.name}</div>
                  <div 
                    className={styles.frequencyBadge}
                    style={{ backgroundColor: SimpleUsageHelper.getFrequencyColor(node.usageFrequency) }}
                    title={SimpleUsageHelper.getFrequencyDescription(node.usageFrequency)}
                  >
                    {SimpleUsageHelper.getFrequencyIcon(node.usageFrequency)}
                  </div>
                </div>
                <div className={styles.nodeDescription}>{localization.description}</div>
              </div>
              {onNodeHelpRequest && (
                <button
                  className={styles.helpButton}
                  onClick={(e) => {
                    e.stopPropagation();
                    onNodeHelpRequest(node.type);
                  }}
                  title="–°–ø—Ä–∞–≤–∫–∞ –ø–æ —É–∑–ª—É"
                >
                  ‚ùì
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default NodeLibrary;