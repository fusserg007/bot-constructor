import React from 'react';
import { NodeDefinition, NodeCategory } from '../../../types/nodes';
import styles from './NodeLibrary.module.css';

const nodeDefinitions: NodeDefinition[] = [
  // –¢—Ä–∏–≥–≥–µ—Ä—ã
  {
    type: 'trigger-message',
    category: 'triggers',
    name: '–°–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
    icon: 'üì®',
    color: '#3b82f6',
    defaultConfig: { messageType: 'text', filters: [] },
    inputs: [],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  {
    type: 'trigger-command',
    category: 'triggers',
    name: '–ö–æ–º–∞–Ω–¥–∞',
    description: '–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã (/start, /help)',
    icon: '‚ö°',
    color: '#3b82f6',
    defaultConfig: { command: '/start' },
    inputs: [],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  
  // –î–µ–π—Å—Ç–≤–∏—è
  {
    type: 'action-send-message',
    category: 'actions',
    name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
    icon: 'üí¨',
    color: '#10b981',
    defaultConfig: { message: '–ü—Ä–∏–≤–µ—Ç!', parseMode: 'HTML' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  {
    type: 'action-send-photo',
    category: 'actions',
    name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ',
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    icon: 'üñºÔ∏è',
    color: '#10b981',
    defaultConfig: { photo: '', caption: '' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  
  // –£—Å–ª–æ–≤–∏—è
  {
    type: 'condition-text',
    category: 'conditions',
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
    icon: 'üîç',
    color: '#f59e0b',
    defaultConfig: { condition: 'contains', value: '', caseSensitive: false },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [
      { id: 'true', name: '–î–∞', type: 'control', dataType: 'any', required: false, multiple: false },
      { id: 'false', name: '–ù–µ—Ç', type: 'control', dataType: 'any', required: false, multiple: false }
    ]
  },
  {
    type: 'condition-user',
    category: 'conditions',
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    icon: 'üë§',
    color: '#f59e0b',
    defaultConfig: { checkType: 'isAdmin' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [
      { id: 'true', name: '–î–∞', type: 'control', dataType: 'any', required: false, multiple: false },
      { id: 'false', name: '–ù–µ—Ç', type: 'control', dataType: 'any', required: false, multiple: false }
    ]
  },
  
  // –î–∞–Ω–Ω—ã–µ
  {
    type: 'data-save',
    category: 'data',
    name: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
    description: '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
    icon: 'üíæ',
    color: '#8b5cf6',
    defaultConfig: { key: 'userData', value: '' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  },
  {
    type: 'data-load',
    category: 'data',
    name: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
    description: '–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
    icon: 'üìÇ',
    color: '#8b5cf6',
    defaultConfig: { key: 'userData' },
    inputs: [{ id: 'input', name: '–í—Ö–æ–¥', type: 'control', dataType: 'any', required: true, multiple: false }],
    outputs: [{ id: 'output', name: '–í—ã—Ö–æ–¥', type: 'control', dataType: 'any', required: false, multiple: false }]
  }
];

const categories: { key: NodeCategory; name: string; icon: string }[] = [
  { key: 'triggers', name: '–¢—Ä–∏–≥–≥–µ—Ä—ã', icon: 'üöÄ' },
  { key: 'actions', name: '–î–µ–π—Å—Ç–≤–∏—è', icon: '‚ö°' },
  { key: 'conditions', name: '–£—Å–ª–æ–≤–∏—è', icon: '‚ùì' },
  { key: 'data', name: '–î–∞–Ω–Ω—ã–µ', icon: 'üíæ' },
  { key: 'integrations', name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', icon: 'üîó' },
  { key: 'scenarios', name: '–°—Ü–µ–Ω–∞—Ä–∏–∏', icon: 'üìã' }
];

interface NodeLibraryProps {
  onNodeAdd?: (nodeType: string) => void;
}

const NodeLibrary: React.FC<NodeLibraryProps> = ({ onNodeAdd }) => {
  const [selectedCategory, setSelectedCategory] = React.useState<NodeCategory>('triggers');
  const [searchQuery, setSearchQuery] = React.useState('');

  const filteredNodes = nodeDefinitions.filter(node => {
    const matchesCategory = node.category === selectedCategory;
    const matchesSearch = searchQuery === '' || 
      node.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      node.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    return matchesCategory && matchesSearch;
  });

  const handleNodeDragStart = (event: React.DragEvent, nodeType: string) => {
    event.dataTransfer.setData('application/reactflow', nodeType);
    event.dataTransfer.effectAllowed = 'move';
  };

  const handleNodeAdd = (nodeType: string) => {
    if (onNodeAdd) {
      onNodeAdd(nodeType);
    }
  };

  return (
    <div className={styles.nodeLibrary}>
      <div className={styles.header}>
        <h3>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–∑–ª–æ–≤</h3>
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className={styles.searchInput}
        />
      </div>

      <div className={styles.categories}>
        {categories.map(category => (
          <button
            key={category.key}
            className={`${styles.categoryButton} ${
              selectedCategory === category.key ? styles.active : ''
            }`}
            onClick={() => setSelectedCategory(category.key)}
          >
            <span className={styles.categoryIcon}>{category.icon}</span>
            <span className={styles.categoryName}>{category.name}</span>
          </button>
        ))}
      </div>

      <div className={styles.nodeList}>
        {filteredNodes.map(node => (
          <div
            key={node.type}
            className={styles.nodeItem}
            draggable
            onDragStart={(e) => handleNodeDragStart(e, node.type)}
            onClick={() => handleNodeAdd(node.type)}
          >
            <div 
              className={styles.nodeIcon}
              style={{ backgroundColor: node.color }}
            >
              {node.icon}
            </div>
            <div className={styles.nodeInfo}>
              <div className={styles.nodeName}>{node.name}</div>
              <div className={styles.nodeDescription}>{node.description}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default NodeLibrary;