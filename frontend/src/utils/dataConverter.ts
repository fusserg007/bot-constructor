import type { Node, Edge } from 'reactflow';
import type { BaseNode, NodePort } from '../types/nodes';

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç React Flow
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∑–ª–∞
 */
function getCategoryColor(category: BaseNode['category']): string {
  const colors: Record<BaseNode['category'], string> = {
    'triggers': '#3b82f6',
    'conditions': '#f59e0b',
    'actions': '#10b981',
    'data': '#8b5cf6',
    'integrations': '#ef4444',
    'scenarios': '#6b7280'
  };
  return colors[category] || '#6b7280';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∑–ª–∞
 */
function getCategoryIcon(category: BaseNode['category']): string {
  const icons: Record<BaseNode['category'], string> = {
    'triggers': '‚ö°',
    'conditions': '‚ùì',
    'actions': 'üéØ',
    'data': 'üìä',
    'integrations': 'üîó',
    'scenarios': 'üìã'
  };
  return icons[category] || '‚öôÔ∏è';
}

interface LegacyNode {
  id: string;
  type: string;
  data?: any;
  config?: any;
  position?: { x: number; y: number };
  connections?: string[];
}

interface LegacyConfiguration {
  nodes?: LegacyNode[];
  connections?: any[];
  metadata?: any;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç React Flow
 */
export function convertLegacyToReactFlow(legacyConfig: LegacyConfiguration): { nodes: Node[], edges: Edge[] } {
  if (!legacyConfig || !legacyConfig.nodes) {
    return { nodes: [], edges: [] };
  }

  const nodes: Node[] = [];
  const edges: Edge[] = [];

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã
  legacyConfig.nodes.forEach((legacyNode, index) => {
    const nodeData = convertNodeData(legacyNode);
    const node: Node = {
      id: legacyNode.id,
      type: convertNodeType(legacyNode.type),
      position: legacyNode.position || { x: 100 + (index * 200), y: 100 + (Math.floor(index / 3) * 150) },
      data: {
        ...nodeData,
        position: legacyNode.position || { x: 100 + (index * 200), y: 100 + (Math.floor(index / 3) * 150) }
      }
    };
    nodes.push(node);
  });

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (connections –≤ —É–∑–ª–∞—Ö)
  legacyConfig.nodes.forEach((legacyNode) => {
    if (legacyNode.connections && Array.isArray(legacyNode.connections)) {
      legacyNode.connections.forEach((targetId, index) => {
        const edge: Edge = {
          id: `${legacyNode.id}-${targetId}-${index}`,
          source: legacyNode.id,
          target: targetId,
          type: 'default'
        };
        edges.push(edge);
      });
    }
  });

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (connections –≤ –∫–æ—Ä–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
  if (legacyConfig.connections && Array.isArray(legacyConfig.connections)) {
    legacyConfig.connections.forEach((connection) => {
      const edge: Edge = {
        id: connection.id || `${connection.sourceNodeId}-${connection.targetNodeId}`,
        source: connection.sourceNodeId,
        target: connection.targetNodeId,
        sourceHandle: connection.sourceOutput,
        targetHandle: connection.targetInput,
        type: 'default'
      };
      edges.push(edge);
    });
  }

  return { nodes, edges };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø —É–∑–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π
 */
function convertNodeType(legacyType: string): string {
  const typeMapping: Record<string, string> = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã
    'action': 'action-send-message',
    'trigger': 'trigger-message',
    'condition': 'condition-text-contains',
    'data': 'data-save',
    'integration': 'integration-http',
    'scenario': 'scenario-welcome',
    
    // –¢—Ä–∏–≥–≥–µ—Ä—ã
    'command': 'trigger-command',
    'message': 'trigger-message',
    'callback': 'trigger-callback',
    'inline_query': 'trigger-inline',
    
    // –î–µ–π—Å—Ç–≤–∏—è
    'send_message': 'action-send-message',
    'send_photo': 'action-send-photo',
    'send_video': 'action-send-video',
    'send_audio': 'action-send-audio',
    'send_document': 'action-send-document',
    'edit_message': 'action-edit-message',
    'delete_message': 'action-delete-message',
    
    // –£—Å–ª–æ–≤–∏—è
    'text_check': 'condition-text-contains',
    'user_check': 'condition-user-role',
    'time_check': 'condition-time',
    'data_check': 'condition-variable',
    
    // –î–∞–Ω–Ω—ã–µ
    'random_number': 'data-variable-set',
    'save_data': 'data-save',
    'load_data': 'data-load',
    'variable_set': 'data-variable-set',
    'variable_get': 'data-variable-get',
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    'http_request': 'integration-http',
    'webhook': 'integration-webhook',
    'database': 'integration-database',
    'api_call': 'integration-api'
  };

  return typeMapping[legacyType] || 'action-send-message';
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —É–∑–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π
 */
function convertNodeData(legacyNode: LegacyNode): BaseNode {
  const data = legacyNode.data || {};
  const nodeConfig = legacyNode.config || data.config || {};
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É–∑–ª–∞
  let category: BaseNode['category'] = 'actions';
  
  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (legacyNode.type === 'command' || legacyNode.type === 'trigger' || 
      data.triggerType || legacyNode.type.includes('trigger')) {
    category = 'triggers';
  } else if (legacyNode.type === 'send_message' || legacyNode.type === 'action' ||
             data.actionType === 'send_message' || legacyNode.type.includes('send_')) {
    category = 'actions';
  } else if (legacyNode.type === 'random_number' || legacyNode.type === 'data' ||
             data.actionType === 'random_number' || legacyNode.type.includes('data_') ||
             legacyNode.type.includes('variable_')) {
    category = 'data';
  } else if (legacyNode.type === 'condition' || data.conditionType || 
             legacyNode.type.includes('check') || legacyNode.type.includes('condition')) {
    category = 'conditions';
  } else if (data.integrationType || legacyNode.type.includes('integration') ||
             legacyNode.type.includes('http') || legacyNode.type.includes('api')) {
    category = 'integrations';
  } else if (legacyNode.type.includes('scenario')) {
    category = 'scenarios';
  }

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–∑–ª–∞, –æ–±—ä–µ–¥–∏–Ω—è—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  const config: Record<string, any> = {
    ...data,
    ...nodeConfig
  };
  
  // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
  delete config.actionType;
  delete config.config;

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤
  if (category === 'triggers') {
    if (legacyNode.type === 'command') {
      config.triggerType = 'command';
      config.label = `–ö–æ–º–∞–Ω–¥–∞: ${config.command || '/start'}`;
    } else {
      config.triggerType = config.triggerType || 'message';
      config.label = config.label || '–¢—Ä–∏–≥–≥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è';
    }
  } else if (category === 'actions') {
    config.actionType = config.actionType || 'send_message';
    config.label = config.label || `–û—Ç–ø—Ä–∞–≤–∏—Ç—å: ${config.text || config.message || '—Å–æ–æ–±—â–µ–Ω–∏–µ'}`;
  } else if (category === 'conditions') {
    config.conditionType = config.conditionType || 'text_contains';
    config.label = config.label || '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è';
  } else if (category === 'data') {
    config.dataType = config.dataType || 'variable';
    config.label = config.label || '–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏';
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—ã –¥–ª—è —É–∑–ª–∞
  const inputs: NodePort[] = category === 'triggers' ? [] : [
    {
      id: 'input',
      name: '–í—Ö–æ–¥',
      type: 'control',
      dataType: 'any',
      required: false,
      multiple: false
    }
  ];

  const outputs: NodePort[] = [
    {
      id: 'output',
      name: '–í—ã—Ö–æ–¥',
      type: 'control',
      dataType: 'any',
      required: false,
      multiple: true
    }
  ];

  return {
    id: legacyNode.id,
    type: convertNodeType(legacyNode.type), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è React Flow
    category,
    position: { x: 0, y: 0 }, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    size: { width: 200, height: 100 },
    color: getCategoryColor(category),
    icon: getCategoryIcon(category),
    inputs,
    outputs,
    config,
    name: config.label || config.name || `${category} —É–∑–µ–ª`,
    description: config.description || '',
    tags: [],
    compatibility: []
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
 */
export function isLegacyFormat(config: any): boolean {
  if (!config || !config.nodes) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —É–∑–ª–æ–≤ –ø–æ–ª–µ connections (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
  // –∏–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ connections –≤ –∫–æ—Ä–Ω–µ (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
  // –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ edges (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç React Flow)
  const hasNodeConnections = config.nodes.some((node: any) => node.connections);
  const hasRootConnections = Array.isArray(config.connections);
  const hasEdges = Array.isArray(config.edges);
  
  return hasNodeConnections || hasRootConnections || !hasEdges;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ React Flow –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
export function convertReactFlowToLegacy(nodes: Node[], edges: Edge[]): LegacyConfiguration {
  const legacyNodes: LegacyNode[] = [];

  nodes.forEach(node => {
    const nodeData = node.data as BaseNode;
    const connections: string[] = [];

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞
    edges.forEach(edge => {
      if (edge.source === node.id) {
        connections.push(edge.target);
      }
    });

    const legacyNode: LegacyNode = {
      id: node.id,
      type: 'action', // –í —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å–µ —É–∑–ª—ã –∏–º–µ–ª–∏ —Ç–∏–ø 'action'
      data: {
        ...nodeData.config,
        actionType: nodeData.category === 'triggers' ? 'trigger' : nodeData.category
      },
      connections
    };

    legacyNodes.push(legacyNode);
  });

  return {
    nodes: legacyNodes,
    metadata: {
      convertedFrom: 'reactflow',
      convertedAt: new Date().toISOString(),
      nodeCount: nodes.length
    }
  };
}