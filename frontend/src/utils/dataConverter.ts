import type { Node, Edge } from 'reactflow';
import type { BaseNode, NodePort } from '../types/nodes';

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç React Flow
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∑–ª–∞
 */
function getCategoryColor(category: BaseNode['category']): string {
  const colors: Record<BaseNode['category'], string> = {
    'triggers': '#3b82f6',
    'conditions': '#f59e0b',
    'actions': '#10b981',
    'data': '#8b5cf6',
    'integrations': '#ef4444',
    'scenarios': '#6b7280'
  };
  return colors[category] || '#6b7280';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∑–ª–∞
 */
function getCategoryIcon(category: BaseNode['category']): string {
  const icons: Record<BaseNode['category'], string> = {
    'triggers': '‚ö°',
    'conditions': '‚ùì',
    'actions': 'üéØ',
    'data': 'üìä',
    'integrations': 'üîó',
    'scenarios': 'üìã'
  };
  return icons[category] || '‚öôÔ∏è';
}

interface LegacyNode {
  id: string;
  type: string;
  data: any;
  connections?: string[];
}

interface LegacyConfiguration {
  nodes?: LegacyNode[];
  connections?: any[];
  metadata?: any;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç React Flow
 */
export function convertLegacyToReactFlow(legacyConfig: LegacyConfiguration): { nodes: Node[], edges: Edge[] } {
  if (!legacyConfig || !legacyConfig.nodes) {
    return { nodes: [], edges: [] };
  }

  const nodes: Node[] = [];
  const edges: Edge[] = [];

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã
  legacyConfig.nodes.forEach((legacyNode, index) => {
    const nodeData = convertNodeData(legacyNode);
    const node: Node = {
      id: legacyNode.id,
      type: convertNodeType(legacyNode.type),
      position: { x: 100 + (index * 200), y: 100 + (Math.floor(index / 3) * 150) },
      data: {
        ...nodeData,
        position: { x: 100 + (index * 200), y: 100 + (Math.floor(index / 3) * 150) }
      }
    };
    nodes.push(node);
  });

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
  legacyConfig.nodes.forEach((legacyNode) => {
    if (legacyNode.connections && Array.isArray(legacyNode.connections)) {
      legacyNode.connections.forEach((targetId, index) => {
        const edge: Edge = {
          id: `${legacyNode.id}-${targetId}-${index}`,
          source: legacyNode.id,
          target: targetId,
          type: 'default'
        };
        edges.push(edge);
      });
    }
  });

  return { nodes, edges };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø —É–∑–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π
 */
function convertNodeType(legacyType: string): string {
  const typeMapping: Record<string, string> = {
    'action': 'action-node',
    'trigger': 'trigger-node',
    'condition': 'condition-node',
    'data': 'data-node',
    'integration': 'integration-node'
  };

  return typeMapping[legacyType] || 'action-node';
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —É–∑–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π
 */
function convertNodeData(legacyNode: LegacyNode): BaseNode {
  const data = legacyNode.data || {};
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
  let category: BaseNode['category'] = 'actions';
  
  if (data.triggerType || data.actionType === 'trigger') {
    category = 'triggers';
  } else if (data.conditionType) {
    category = 'conditions';
  } else if (data.dataType) {
    category = 'data';
  } else if (data.integrationType) {
    category = 'integrations';
  }

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–∑–ª–∞
  const config: Record<string, any> = {};
  
  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  Object.keys(data).forEach(key => {
    if (key !== 'actionType' || data.actionType !== 'trigger') {
      config[key] = data[key];
    }
  });

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
  if (category === 'triggers' && data.actionType === 'trigger') {
    config.triggerType = data.triggerType || 'command';
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—ã –¥–ª—è —É–∑–ª–∞
  const inputs: NodePort[] = category === 'triggers' ? [] : [
    {
      id: 'input',
      name: '–í—Ö–æ–¥',
      type: 'control',
      dataType: 'any',
      required: false
    }
  ];

  const outputs: NodePort[] = category === 'actions' && !config.actionType?.includes('send') ? [] : [
    {
      id: 'output',
      name: '–í—ã—Ö–æ–¥',
      type: 'control',
      dataType: 'any',
      required: false
    }
  ];

  return {
    id: legacyNode.id,
    type: legacyNode.type,
    category,
    position: { x: 0, y: 0 }, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    size: { width: 200, height: 100 },
    color: getCategoryColor(category),
    icon: getCategoryIcon(category),
    inputs,
    outputs,
    config,
    name: config.name || `${category} —É–∑–µ–ª`,
    description: config.description || '',
    tags: [],
    compatibility: []
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
 */
export function isLegacyFormat(config: any): boolean {
  if (!config || !config.nodes) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —É–∑–ª–æ–≤ –ø–æ–ª–µ connections (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
  // –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ edges (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
  const hasConnections = config.nodes.some((node: any) => node.connections);
  const hasEdges = Array.isArray(config.edges);
  
  return hasConnections || !hasEdges;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ React Flow –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
export function convertReactFlowToLegacy(nodes: Node[], edges: Edge[]): LegacyConfiguration {
  const legacyNodes: LegacyNode[] = [];

  nodes.forEach(node => {
    const nodeData = node.data as BaseNode;
    const connections: string[] = [];

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞
    edges.forEach(edge => {
      if (edge.source === node.id) {
        connections.push(edge.target);
      }
    });

    const legacyNode: LegacyNode = {
      id: node.id,
      type: 'action', // –í —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å–µ —É–∑–ª—ã –∏–º–µ–ª–∏ —Ç–∏–ø 'action'
      data: {
        ...nodeData.config,
        actionType: nodeData.category === 'triggers' ? 'trigger' : nodeData.category
      },
      connections
    };

    legacyNodes.push(legacyNode);
  });

  return {
    nodes: legacyNodes,
    metadata: {
      convertedFrom: 'reactflow',
      convertedAt: new Date().toISOString(),
      nodeCount: nodes.length
    }
  };
}