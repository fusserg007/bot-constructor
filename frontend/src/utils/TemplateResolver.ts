import { Node, Edge } from 'reactflow';
import { ValidationError } from './SchemaValidator';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
 */
interface TemplatePattern {
  id: string;
  name: string;
  description: string;
  errorPatterns: string[];
  solution: (nodes: Node[], edges: Edge[], error: ValidationError) => { nodes: Node[], edges: Edge[] };
  priority: number;
}

/**
 * –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
 */
export class TemplateResolver {
  private templates: TemplatePattern[] = [];

  constructor() {
    this.initializeTemplates();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
   */
  private initializeTemplates(): void {
    this.templates = [
      {
        id: 'empty-schema',
        name: '–ü—É—Å—Ç–∞—è —Å—Ö–µ–º–∞',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ö–µ–º—ã –±–æ—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º',
        errorPatterns: ['empty', 'no nodes', '—Å—Ö–µ–º–∞ –ø—É—Å—Ç–∞'],
        priority: 10,
        solution: this.createBasicBotTemplate
      },
      {
        id: 'missing-trigger',
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä',
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞',
        errorPatterns: ['no trigger', 'missing trigger', '–Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞'],
        priority: 9,
        solution: this.addStartTriggerTemplate
      },
      {
        id: 'isolated-nodes',
        name: '–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã',
        description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ–∫—É',
        errorPatterns: ['isolated', 'disconnected', '–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'],
        priority: 8,
        solution: this.connectIsolatedNodesTemplate
      },
      {
        id: 'incomplete-condition',
        name: '–ù–µ–ø–æ–ª–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ',
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–æ–∫ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —É–∑–ª–∞',
        errorPatterns: ['incomplete condition', 'missing branch', '–Ω–µ–ø–æ–ª–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ'],
        priority: 7,
        solution: this.completeConditionTemplate
      },
      {
        id: 'missing-message',
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ',
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
        errorPatterns: ['empty message', 'no message', '–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'],
        priority: 6,
        solution: this.addMessageTemplate
      },
      {
        id: 'invalid-command',
        name: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
        description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã',
        errorPatterns: ['invalid command', 'command format', '–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'],
        priority: 5,
        solution: this.fixCommandTemplate
      },
      {
        id: 'circular-dependency',
        name: '–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
        description: '–†–∞–∑—Ä—ã–≤ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π',
        errorPatterns: ['circular', 'cycle', '—Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è'],
        priority: 4,
        solution: this.breakCircularDependencyTemplate
      },
      {
        id: 'missing-variable',
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è',
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π',
        errorPatterns: ['missing variable', 'no variable name', '–Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π'],
        priority: 3,
        solution: this.addVariableTemplate
      },
      {
        id: 'invalid-url',
        name: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL',
        description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ URL',
        errorPatterns: ['invalid url', 'malformed url', '–Ω–µ–≤–µ—Ä–Ω—ã–π url'],
        priority: 2,
        solution: this.fixUrlTemplate
      },
      {
        id: 'missing-action',
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ',
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞',
        errorPatterns: ['no action', 'missing action', '–Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è'],
        priority: 1,
        solution: this.addActionTemplate
      }
    ];
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ—à–∏–±–∫–∏
   */
  public findTemplate(error: ValidationError): TemplatePattern | null {
    const errorText = `${error.message} ${error.details || ''}`.toLowerCase();
    
    // –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –æ—à–∏–±–æ–∫
    const matchingTemplates = this.templates.filter(template => 
      template.errorPatterns.some(pattern => 
        errorText.includes(pattern.toLowerCase())
      )
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    return matchingTemplates.sort((a, b) => b.priority - a.priority)[0] || null;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
   */
  public applyTemplate(
    templateId: string, 
    nodes: Node[], 
    edges: Edge[], 
    error: ValidationError
  ): { nodes: Node[], edges: Edge[], applied: boolean } {
    const template = this.templates.find(t => t.id === templateId);
    
    if (!template) {
      return { nodes, edges, applied: false };
    }
    
    try {
      const result = template.solution(nodes, edges, error);
      return { ...result, applied: true };
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${templateId}:`, err);
      return { nodes, edges, applied: false };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
   */
  public getAvailableTemplates(): Array<{id: string, name: string, description: string}> {
    return this.templates.map(t => ({
      id: t.id,
      name: t.name,
      description: t.description
    }));
  }

  // –®–∞–±–ª–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ö–µ–º—ã –±–æ—Ç–∞
   */
  private createBasicBotTemplate = (_nodes: Node[], _edges: Edge[]): { nodes: Node[], edges: Edge[] } => {
    const triggerNode: Node = {
      id: 'trigger-start',
      type: 'trigger-command',
      position: { x: 100, y: 100 },
      data: { 
        command: '/start',
        label: '–ö–æ–º–∞–Ω–¥–∞ /start'
      }
    };

    const messageNode: Node = {
      id: 'action-welcome',
      type: 'action-send-message',
      position: { x: 350, y: 100 },
      data: { 
        message: '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø –≤–∞—à –Ω–æ–≤—ã–π Telegram –±–æ—Ç. –ö–∞–∫ –¥–µ–ª–∞?',
        label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      }
    };

    const edge: Edge = {
      id: 'edge-start-welcome',
      source: 'trigger-start',
      target: 'action-welcome',
      type: 'smoothstep'
    };

    return {
      nodes: [triggerNode, messageNode],
      edges: [edge]
    };
  };

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
   */
  private addStartTriggerTemplate = (nodes: Node[], edges: Edge[]): { nodes: Node[], edges: Edge[] } => {
    const triggerNode: Node = {
      id: `trigger-${Date.now()}`,
      type: 'trigger-command',
      position: { x: 50, y: 100 },
      data: { 
        command: '/start',
        label: '–ö–æ–º–∞–Ω–¥–∞ /start'
      }
    };

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —É–∑–ª—É –µ—Å–ª–∏ –µ—Å—Ç—å
    const newEdges = [...edges];
    if (nodes.length > 0) {
      const firstNode = nodes[0];
      const edge: Edge = {
        id: `edge-${Date.now()}`,
        source: triggerNode.id,
        target: firstNode.id,
        type: 'smoothstep'
      };
      newEdges.push(edge);
    }

    return {
      nodes: [triggerNode, ...nodes],
      edges: newEdges
    };
  };

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
   */
  private connectIsolatedNodesTemplate = (nodes: Node[], edges: Edge[]): { nodes: Node[], edges: Edge[] } => {
    const connectedNodes = new Set<string>();
    edges.forEach(edge => {
      connectedNodes.add(edge.source);
      connectedNodes.add(edge.target);
    });

    const isolatedNodes = nodes.filter(node => !connectedNodes.has(node.id));
    const newEdges = [...edges];

    isolatedNodes.forEach(isolatedNode => {
      // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π —É–∑–µ–ª
      const connectedNodesList = nodes.filter(node => connectedNodes.has(node.id));
      if (connectedNodesList.length > 0) {
        const nearestNode = this.findNearestNode(isolatedNode, connectedNodesList);
        if (nearestNode) {
          const edge: Edge = {
            id: `edge-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            source: nearestNode.id,
            target: isolatedNode.id,
            type: 'smoothstep'
          };
          newEdges.push(edge);
          connectedNodes.add(isolatedNode.id);
        }
      }
    });

    return { nodes, edges: newEdges };
  };

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ —É–∑–ª–∞
   */
  private completeConditionTemplate = (nodes: Node[], edges: Edge[], error: ValidationError): { nodes: Node[], edges: Edge[] } => {
    const conditionNodeId = error.nodeId;
    const conditionNode = nodes.find(n => n.id === conditionNodeId);
    
    if (!conditionNode || !conditionNode.type?.startsWith('condition')) {
      return { nodes, edges };
    }

    const outgoingEdges = edges.filter(edge => edge.source === conditionNodeId);
    const newNodes = [...nodes];
    const newEdges = [...edges];

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–µ—Ç–∫–∏
    const branches = ['true', 'false'];
    const existingBranches = outgoingEdges.map(edge => edge.sourceHandle).filter(Boolean);
    
    branches.forEach((branch, index) => {
      if (!existingBranches.includes(branch)) {
        const actionNode: Node = {
          id: `action-${Date.now()}-${branch}`,
          type: 'action-send-message',
          position: {
            x: conditionNode.position.x + 250,
            y: conditionNode.position.y + (index * 120)
          },
          data: {
            message: branch === 'true' ? '–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ' : '–£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå',
            label: `–û—Ç–≤–µ—Ç: ${branch === 'true' ? '–î–∞' : '–ù–µ—Ç'}`
          }
        };

        const edge: Edge = {
          id: `edge-${Date.now()}-${branch}`,
          source: conditionNodeId || '',
          target: actionNode.id,
          sourceHandle: branch,
          type: 'smoothstep'
        };

        newNodes.push(actionNode);
        newEdges.push(edge);
      }
    });

    return { nodes: newNodes, edges: newEdges };
  };

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private addMessageTemplate = (nodes: Node[], edges: Edge[], error: ValidationError): { nodes: Node[], edges: Edge[] } => {
    const nodeId = error.nodeId;
    const node = nodes.find(n => n.id === nodeId);
    
    if (!node) {
      return { nodes, edges };
    }

    const updatedNodes = nodes.map(n => {
      if (n.id === nodeId) {
        return {
          ...n,
          data: {
            ...n.data,
            message: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. ü§ñ'
          }
        };
      }
      return n;
    });

    return { nodes: updatedNodes, edges };
  };

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
   */
  private fixCommandTemplate = (nodes: Node[], edges: Edge[], error: ValidationError): { nodes: Node[], edges: Edge[] } => {
    const nodeId = error.nodeId;
    const node = nodes.find(n => n.id === nodeId);
    
    if (!node) {
      return { nodes, edges };
    }

    const updatedNodes = nodes.map(n => {
      if (n.id === nodeId) {
        let command = n.data?.command || 'start';
        // –î–æ–±–∞–≤–ª—è–µ–º / –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!command.startsWith('/')) {
          command = '/' + command;
        }
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        command = command.replace(/[^a-zA-Z0-9_/]/g, '');
        
        return {
          ...n,
          data: {
            ...n.data,
            command
          }
        };
      }
      return n;
    });

    return { nodes: updatedNodes, edges };
  };

  /**
   * –†–∞–∑—Ä—ã–≤ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   */
  private breakCircularDependencyTemplate = (nodes: Node[], edges: Edge[]): { nodes: Node[], edges: Edge[] } => {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∏ —Ä–∞–∑—Ä—ã–≤–∞ —Ü–∏–∫–ª–æ–≤
    const visited = new Set<string>();
    const recursionStack = new Set<string>();
    const edgesToRemove: string[] = [];

    const dfs = (nodeId: string): boolean => {
      if (recursionStack.has(nodeId)) {
        return true; // –ù–∞–π–¥–µ–Ω —Ü–∏–∫–ª
      }
      if (visited.has(nodeId)) {
        return false;
      }

      visited.add(nodeId);
      recursionStack.add(nodeId);

      const outgoingEdges = edges.filter(edge => edge.source === nodeId);
      for (const edge of outgoingEdges) {
        if (dfs(edge.target)) {
          edgesToRemove.push(edge.id);
          break; // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ü–∏–∫–ª
        }
      }

      recursionStack.delete(nodeId);
      return false;
    };

    nodes.forEach(node => {
      if (!visited.has(node.id)) {
        dfs(node.id);
      }
    });

    const newEdges = edges.filter(edge => !edgesToRemove.includes(edge.id));
    return { nodes, edges: newEdges };
  };

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
   */
  private addVariableTemplate = (nodes: Node[], edges: Edge[], error: ValidationError): { nodes: Node[], edges: Edge[] } => {
    const nodeId = error.nodeId;
    const node = nodes.find(n => n.id === nodeId);
    
    if (!node) {
      return { nodes, edges };
    }

    const updatedNodes = nodes.map(n => {
      if (n.id === nodeId) {
        return {
          ...n,
          data: {
            ...n.data,
            variableName: 'userInput'
          }
        };
      }
      return n;
    });

    return { nodes: updatedNodes, edges };
  };

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL
   */
  private fixUrlTemplate = (nodes: Node[], edges: Edge[], error: ValidationError): { nodes: Node[], edges: Edge[] } => {
    const nodeId = error.nodeId;
    const node = nodes.find(n => n.id === nodeId);
    
    if (!node) {
      return { nodes, edges };
    }

    const updatedNodes = nodes.map(n => {
      if (n.id === nodeId) {
        let url = n.data?.url || 'example.com';
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
          url = 'https://' + url;
        }
        
        return {
          ...n,
          data: {
            ...n.data,
            url
          }
        };
      }
      return n;
    });

    return { nodes: updatedNodes, edges };
  };

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  private addActionTemplate = (nodes: Node[], edges: Edge[]): { nodes: Node[], edges: Edge[] } => {
    const actionNode: Node = {
      id: `action-${Date.now()}`,
      type: 'action-send-message',
      position: { x: 300, y: 150 },
      data: {
        message: '–≠—Ç–æ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ—Ç–∞! üöÄ',
        label: '–ù–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
      }
    };

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —É–∑–ª—É
    const newEdges = [...edges];
    if (nodes.length > 0) {
      const lastNode = nodes[nodes.length - 1];
      const edge: Edge = {
        id: `edge-${Date.now()}`,
        source: lastNode.id,
        target: actionNode.id,
        type: 'smoothstep'
      };
      newEdges.push(edge);
    }

    return {
      nodes: [...nodes, actionNode],
      edges: newEdges
    };
  };

  /**
   * –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª
   */
  private findNearestNode(targetNode: Node, candidateNodes: Node[]): Node | null {
    let nearestNode: Node | null = null;
    let minDistance = Infinity;

    candidateNodes.forEach(node => {
      if (node.id !== targetNode.id) {
        const distance = Math.sqrt(
          Math.pow(node.position.x - targetNode.position.x, 2) +
          Math.pow(node.position.y - targetNode.position.y, 2)
        );

        if (distance < minDistance) {
          minDistance = distance;
          nearestNode = node;
        }
      }
    });

    return nearestNode;
  }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TemplateResolver
 */
export const createTemplateResolver = (): TemplateResolver => {
  return new TemplateResolver();
};