/**
 * –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
 */
class EditorDebugger {
    constructor() {
        this.logs = [];
        this.isEnabled = true;
        this.maxLogs = 1000;
        this.logLevels = {
            ERROR: { color: '#c62828', icon: '‚ùå' },
            WARN: { color: '#ef6c00', icon: '‚ö†Ô∏è' },
            INFO: { color: '#1976d2', icon: '‚ÑπÔ∏è' },
            SUCCESS: { color: '#2e7d32', icon: '‚úÖ' },
            DEBUG: { color: '#7b1fa2', icon: 'üîç' }
        };
        
        this.stats = {
            nodesRendered: 0,
            connectionsCreated: 0,
            errorsCount: 0,
            renderTime: 0
        };
        
        console.log('üîç EditorDebugger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    log(message, level = 'INFO', data = null) {
        if (!this.isEnabled) return;
        
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = {
            timestamp,
            message,
            level,
            data,
            id: Date.now() + Math.random()
        };
        
        this.logs.push(logEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        if (this.logs.length > this.maxLogs) {
            this.logs.shift();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (level === 'ERROR') this.stats.errorsCount++;
        
        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        const style = this.logLevels[level];
        console.log(`${style.icon} [${timestamp}] ${message}`, data || '');
    }
    
    error(message, error = null) {
        this.log(message, 'ERROR', error);
    }
    
    warn(message, data = null) {
        this.log(message, 'WARN', data);
    }
    
    info(message, data = null) {
        this.log(message, 'INFO', data);
    }
    
    success(message, data = null) {
        this.log(message, 'SUCCESS', data);
    }
    
    debug(message, data = null) {
        this.log(message, 'DEBUG', data);
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    logNodeRender(nodeId, nodeType, success = true) {
        if (success) {
            this.stats.nodesRendered++;
            this.success(`–£–∑–µ–ª –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω: ${nodeType} (${nodeId})`);
        } else {
            this.error(`–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —É–∑–ª–∞: ${nodeType} (${nodeId})`);
        }
    }
    
    logConnection(fromNode, toNode, success = true) {
        if (success) {
            this.stats.connectionsCreated++;
            this.success(`–°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞: ${fromNode} ‚Üí ${toNode}`);
        } else {
            this.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏: ${fromNode} ‚Üí ${toNode}`);
        }
    }
    
    logSchemaLoad(schema, success = true) {
        if (success) {
            const nodeCount = schema.nodes ? schema.nodes.length : 0;
            this.success(`–°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${nodeCount} —É–∑–ª–æ–≤`, schema);
        } else {
            this.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã', schema);
        }
    }
    
    startTimer(operation) {
        this.timers = this.timers || {};
        this.timers[operation] = performance.now();
        this.debug(`–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation}`);
    }
    
    endTimer(operation) {
        if (!this.timers || !this.timers[operation]) return;
        
        const duration = performance.now() - this.timers[operation];
        this.info(`–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${operation} (${duration.toFixed(2)}ms)`);
        
        if (operation === 'render') {
            this.stats.renderTime = duration;
        }
        
        delete this.timers[operation];
    }
    
    clear() {
        this.logs = [];
        this.stats = {
            nodesRendered: 0,
            connectionsCreated: 0,
            errorsCount: 0,
            renderTime: 0
        };
        this.info('–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
    }
    
    export() {
        const data = {
            timestamp: new Date().toISOString(),
            logs: this.logs,
            stats: this.stats,
            system: {
                userAgent: navigator.userAgent,
                url: window.location.href,
                botConstructor: !!window.botConstructor,
                backToDashboard: !!window.backToDashboard
            }
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `editor-debug-${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        this.success('–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ª–∞–¥—á–∏–∫–∞
window.editorDebugger = new EditorDebugger();

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
window.addEventListener('error', (event) => {
    window.editorDebugger.error(`–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${event.message}`, {
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        error: event.error
    });
});

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
window.editorDebugger.success('EditorDebugger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');