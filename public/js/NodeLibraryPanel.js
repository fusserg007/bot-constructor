/**
 * –ü–∞–Ω–µ–ª—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–∑–ª–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 */
class NodeLibraryPanel {
    constructor(containerElement, nodeLibrary = null) {
        this.container = containerElement;
        this.nodeLibrary = nodeLibrary || (typeof window !== 'undefined' ? window.nodeLibrary : null);
        this.searchQuery = '';
        this.selectedCategory = null;
        this.collapsedCategories = new Set();
        this.favorites = new Set(JSON.parse(localStorage.getItem('nodeFavorites') || '[]'));
        this.onNodeDrop = null; // Callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–∞ –Ω–∞ canvas
        this.onNodeSelect = null; // Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–∑–ª–∞
        this.visualEditor = null; // –°—Å—ã–ª–∫–∞ –Ω–∞ VisualEditor
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (this.nodeLibrary && !this.nodeLibrary.initialized) {
            this.nodeLibrary.init();
        }
        
        this.init();
    }

    init() {
        this.container.innerHTML = `
            <div class="node-library-panel">
                <div class="library-header">
                    <h3>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–∑–ª–æ–≤</h3>
                    <div class="library-stats">
                        <span class="stats-text">${this.getTotalNodesCount()} —É–∑–ª–æ–≤</span>
                    </div>
                </div>
                
                <div class="library-search">
                    <input type="text" 
                           id="nodeSearch" 
                           placeholder="üîç –ü–æ–∏—Å–∫ —É–∑–ª–æ–≤..." 
                           onkeyup="nodeLibraryPanel.onSearch(this.value)">
                    <button class="clear-search" onclick="nodeLibraryPanel.clearSearch()" style="display: none;">√ó</button>
                </div>
                
                <div class="library-filters">
                    <button class="filter-btn active" onclick="nodeLibraryPanel.showAllCategories()">
                        –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    </button>
                    <button class="filter-btn" onclick="nodeLibraryPanel.showFavorites()">
                        ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                    </button>
                </div>
                
                <div class="library-content" id="libraryContent">
                    ${this.renderCategories()}
                </div>
                
                <div class="library-footer">
                    <div class="usage-hint">
                        üí° –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —É–∑–µ–ª –Ω–∞ canvas –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    </div>
                </div>
            </div>
        `;

        this.setupEventListeners();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag and drop
        this.container.addEventListener('dragstart', this.onDragStart.bind(this));
        this.container.addEventListener('dragend', this.onDragEnd.bind(this));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–∑–ª–∞–º
        this.container.addEventListener('click', this.onNodeClick.bind(this));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.container.addEventListener('click', this.onCategoryToggle.bind(this));
    }

    renderCategories() {
        if (!this.nodeLibrary) {
            return '<div class="no-library">NodeLibrary –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞</div>';
        }
        
        const categories = this.nodeLibrary.getCategories();
        
        return categories.map(category => {
            const nodes = this.nodeLibrary.getNodeTypesByCategory(category.id);
            const isCollapsed = this.collapsedCategories.has(category.id);
            
            return `
                <div class="node-category" data-category="${category.id}">
                    <div class="category-header ${isCollapsed ? 'collapsed' : ''}" 
                         data-category-id="${category.id}">
                        <div class="category-info">
                            <span class="category-icon">${category.icon}</span>
                            <span class="category-name">${category.displayName}</span>
                            <span class="category-count">(${nodes.length})</span>
                        </div>
                        <span class="category-toggle">${isCollapsed ? '‚ñ∂' : '‚ñº'}</span>
                    </div>
                    
                    <div class="category-description">
                        ${category.description}
                    </div>
                    
                    <div class="category-nodes ${isCollapsed ? 'collapsed' : ''}" 
                         id="category-${category.id}">
                        ${this.renderCategoryNodes(category.id, nodes)}
                    </div>
                </div>
            `;
        }).join('');
    }

    renderCategoryNodes(categoryId, nodes) {
        if (!nodes || nodes.length === 0) {
            return '<div class="no-nodes">–£–∑–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        }

        return nodes.map(node => `
            <div class="node-item" 
                 draggable="true" 
                 data-node-type="${node.type}"
                 data-category="${categoryId}"
                 title="${node.description}">
                
                <div class="node-header">
                    <span class="node-icon">${node.icon}</span>
                    <div class="node-actions">
                        <button class="node-favorite" onclick="nodeLibraryPanel.toggleFavorite('${node.type}')" title="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ">
                            ‚òÜ
                        </button>
                        <button class="node-info" onclick="nodeLibraryPanel.showNodeInfo('${node.type}')" title="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
                            ‚ÑπÔ∏è
                        </button>
                    </div>
                </div>
                
                <div class="node-content">
                    <div class="node-name">${node.name}</div>
                    <div class="node-description">${node.description}</div>
                    
                    <div class="node-meta">
                        <div class="node-io">
                            <span class="io-info">
                                <span class="io-label">–í—Ö–æ–¥—ã:</span>
                                <span class="io-count">${node.inputs?.length || 0}</span>
                            </span>
                            <span class="io-info">
                                <span class="io-label">–í—ã—Ö–æ–¥—ã:</span>
                                <span class="io-count">${node.outputs?.length || 0}</span>
                            </span>
                        </div>
                        
                        ${this.renderNodeTags(node)}
                    </div>
                </div>
                
                <div class="node-overlay">
                    <div class="overlay-content">
                        <span class="overlay-icon">+</span>
                        <span class="overlay-text">–î–æ–±–∞–≤–∏—Ç—å</span>
                    </div>
                </div>
            </div>
        `).join('');
    }

    renderNodeTags(node) {
        const tags = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (node.config) {
            const configCount = Object.keys(node.config).length;
            if (configCount > 0) {
                tags.push(`${configCount} –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
        if (node.type.includes('api')) {
            tags.push('API');
        }
        if (node.outputs?.includes('error')) {
            tags.push('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
        }
        if (node.config && Object.values(node.config).some(field => field.type === 'select')) {
            tags.push('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π');
        }

        if (tags.length === 0) return '';

        return `
            <div class="node-tags">
                ${tags.map(tag => `<span class="node-tag">${tag}</span>`).join('')}
            </div>
        `;
    }

    // –ü–æ–∏—Å–∫ —É–∑–ª–æ–≤
    onSearch(query) {
        this.searchQuery = query.toLowerCase().trim();
        const clearBtn = this.container.querySelector('.clear-search');
        
        if (this.searchQuery) {
            clearBtn.style.display = 'block';
            this.renderSearchResults();
        } else {
            clearBtn.style.display = 'none';
            this.renderCategories();
            this.updateContent();
        }
    }

    clearSearch() {
        const searchInput = this.container.querySelector('#nodeSearch');
        searchInput.value = '';
        this.onSearch('');
    }

    renderSearchResults() {
        if (!this.nodeLibrary) return;
        
        const results = this.nodeLibrary.searchNodes(this.searchQuery);
        const content = this.container.querySelector('#libraryContent');
        
        if (results.length === 0) {
            content.innerHTML = `
                <div class="search-no-results">
                    <div class="no-results-icon">üîç</div>
                    <div class="no-results-text">
                        <h4>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h4>
                        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
                    </div>
                </div>
            `;
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const groupedResults = {};
        results.forEach(node => {
            if (!groupedResults[node.category]) {
                groupedResults[node.category] = [];
            }
            groupedResults[node.category].push(node);
        });

        const categories = this.nodeLibrary.getCategories();
        const categoryMap = {};
        categories.forEach(cat => {
            categoryMap[cat.id] = cat;
        });
        
        content.innerHTML = `
            <div class="search-results">
                <div class="search-header">
                    <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (${results.length})</h4>
                </div>
                
                ${Object.entries(groupedResults).map(([categoryId, nodes]) => `
                    <div class="search-category">
                        <div class="search-category-header">
                            <span class="category-icon">${categoryMap[categoryId]?.icon || 'üìÅ'}</span>
                            <span class="category-name">${categoryMap[categoryId]?.displayName || categoryId}</span>
                            <span class="category-count">(${nodes.length})</span>
                        </div>
                        <div class="search-category-nodes">
                            ${this.renderCategoryNodes(categoryId, nodes)}
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag and drop
    onDragStart(event) {
        if (!event.target.classList.contains('node-item')) return;
        
        const nodeType = event.target.dataset.nodeType;
        event.dataTransfer.setData('text/plain', nodeType);
        event.dataTransfer.effectAllowed = 'copy';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        event.target.classList.add('dragging');
        
        setTimeout(() => {
            event.target.classList.remove('dragging');
        }, 100);
        
        // Debug: console.log(`üéØ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —É–∑–ª–∞: ${nodeType}`);
    }

    onDragEnd(event) {
        if (!event.target.classList.contains('node-item')) return;
        
        // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        event.target.classList.remove('dragging');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –∫—É—Ä—Å–æ—Ä–∞
        document.body.style.cursor = 'default';
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–∑–ª–∞–º
    onNodeClick(event) {
        const nodeItem = event.target.closest('.node-item');
        if (!nodeItem) return;
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        if (event.target.closest('.node-actions')) return;
        
        const nodeType = nodeItem.dataset.nodeType;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –Ω–∞ canvas
        if (this.onNodeDrop) {
            this.onNodeDrop(nodeType);
        }
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        nodeItem.classList.add('clicked');
        setTimeout(() => {
            nodeItem.classList.remove('clicked');
        }, 200);
        
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω —É–∑–µ–ª —á–µ—Ä–µ–∑ –∫–ª–∏–∫: ${nodeType}`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    onCategoryToggle(event) {
        const categoryHeader = event.target.closest('.category-header');
        if (!categoryHeader) return;
        
        const categoryId = categoryHeader.dataset.categoryId;
        if (!categoryId) return;
        
        const categoryNodes = this.container.querySelector(`#category-${categoryId}`);
        const toggleIcon = categoryHeader.querySelector('.category-toggle');
        
        if (this.collapsedCategories.has(categoryId)) {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            this.collapsedCategories.delete(categoryId);
            categoryHeader.classList.remove('collapsed');
            categoryNodes.classList.remove('collapsed');
            toggleIcon.textContent = '‚ñº';
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            this.collapsedCategories.add(categoryId);
            categoryHeader.classList.add('collapsed');
            categoryNodes.classList.add('collapsed');
            toggleIcon.textContent = '‚ñ∂';
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    showAllCategories() {
        this.selectedCategory = null;
        this.updateFilterButtons('–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        this.updateContent();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    showFavorites() {
        this.selectedCategory = 'favorites';
        this.updateFilterButtons('‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ');
        this.renderFavorites();
    }

    updateFilterButtons(activeText) {
        const buttons = this.container.querySelectorAll('.filter-btn');
        buttons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.textContent.trim() === activeText) {
                btn.classList.add('active');
            }
        });
    }

    renderFavorites() {
        const favorites = this.getFavorites();
        const content = this.container.querySelector('#libraryContent');
        
        if (favorites.length === 0) {
            content.innerHTML = `
                <div class="no-favorites">
                    <div class="no-favorites-icon">‚≠ê</div>
                    <div class="no-favorites-text">
                        <h4>–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤</h4>
                        <p>–î–æ–±–∞–≤—å—Ç–µ —É–∑–ª—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∞–≤ –Ω–∞ ‚òÜ</p>
                    </div>
                </div>
            `;
            return;
        }

        content.innerHTML = `
            <div class="favorites-section">
                <div class="favorites-header">
                    <h4>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —É–∑–ª—ã (${favorites.length})</h4>
                </div>
                <div class="favorites-nodes">
                    ${this.renderCategoryNodes('favorites', favorites)}
                </div>
            </div>
        `;
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    toggleFavorite(nodeType) {
        const favorites = this.getFavorites();
        const index = favorites.findIndex(node => node.type === nodeType);
        
        if (index >= 0) {
            favorites.splice(index, 1);
        } else {
            const node = this.nodeLibrary ? this.nodeLibrary.getNodeType(nodeType) : null;
            if (node) {
                favorites.push({ ...node, type: nodeType });
            }
        }
        
        this.saveFavorites(favorites);
        this.updateFavoriteButtons();
        
        if (this.selectedCategory === 'favorites') {
            this.renderFavorites();
        }
    }

    getFavorites() {
        try {
            return JSON.parse(localStorage.getItem('nodeLibrary_favorites') || '[]');
        } catch {
            return [];
        }
    }

    saveFavorites(favorites) {
        localStorage.setItem('nodeLibrary_favorites', JSON.stringify(favorites));
    }

    updateFavoriteButtons() {
        const favorites = this.getFavorites();
        const favoriteTypes = favorites.map(node => node.type);
        
        this.container.querySelectorAll('.node-favorite').forEach(btn => {
            const nodeType = btn.closest('.node-item').dataset.nodeType;
            btn.textContent = favoriteTypes.includes(nodeType) ? '‚òÖ' : '‚òÜ';
            btn.classList.toggle('active', favoriteTypes.includes(nodeType));
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–∑–ª–µ
    showNodeInfo(nodeType) {
        const node = this.nodeLibrary ? this.nodeLibrary.getNodeType(nodeType) : null;
        if (!node) return;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const modal = document.createElement('div');
        modal.className = 'node-info-modal';
        modal.innerHTML = `
            <div class="modal-overlay" onclick="this.parentElement.remove()"></div>
            <div class="modal-content">
                <div class="modal-header">
                    <h3>${node.icon} ${node.name}</h3>
                    <button class="modal-close" onclick="this.closest('.node-info-modal').remove()">√ó</button>
                </div>
                
                <div class="modal-body">
                    <div class="node-full-description">
                        <p>${node.description}</p>
                    </div>
                    
                    <div class="node-details">
                        <div class="detail-section">
                            <h4>–í—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã</h4>
                            <div class="io-details">
                                <div class="io-group">
                                    <strong>–í—Ö–æ–¥—ã:</strong> ${node.inputs?.join(', ') || '–ù–µ—Ç'}
                                </div>
                                <div class="io-group">
                                    <strong>–í—ã—Ö–æ–¥—ã:</strong> ${node.outputs?.join(', ') || '–ù–µ—Ç'}
                                </div>
                            </div>
                        </div>
                        
                        ${node.config && Object.keys(node.config).length > 0 ? `
                            <div class="detail-section">
                                <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (${Object.keys(node.config).length})</h4>
                                <div class="config-details">
                                    ${Object.entries(node.config).map(([key, field]) => `
                                        <div class="config-item">
                                            <strong>${field.label}:</strong>
                                            <span class="config-type">${field.type}</span>
                                            ${field.default ? `<span class="config-default">(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${field.default})</span>` : ''}
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button class="btn-primary" onclick="nodeLibraryPanel.addNodeFromModal('${nodeType}'); this.closest('.node-info-modal').remove();">
                        –î–æ–±–∞–≤–∏—Ç—å —É–∑–µ–ª
                    </button>
                    <button class="btn-secondary" onclick="this.closest('.node-info-modal').remove()">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }

    addNodeFromModal(nodeType) {
        if (this.onNodeDrop) {
            this.onNodeDrop(nodeType);
        }
    }

    updateContent() {
        const content = this.container.querySelector('#libraryContent');
        content.innerHTML = this.renderCategories();
        this.updateFavoriteButtons();
    }

    getTotalNodesCount() {
        return this.nodeLibrary ? this.nodeLibrary.getAllNodeTypes().length : 0;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–æ–≤
    setNodeDropCallback(callback) {
        this.onNodeDrop = callback;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStats() {
        const statsElement = this.container.querySelector('.stats-text');
        if (statsElement) {
            statsElement.textContent = `${this.getTotalNodesCount()} —É–∑–ª–æ–≤`;
        }
    }

    // –°–≤—è–∑–∞—Ç—å —Å VisualEditor
    connectToVisualEditor(visualEditor) {
        this.visualEditor = visualEditor;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–æ–≤
        this.setNodeDropCallback((nodeType) => {
            if (this.visualEditor) {
                // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ —Ü–µ–Ω—Ç—Ä canvas
                const centerX = this.visualEditor.viewport.width / 2;
                const centerY = this.visualEditor.viewport.height / 2;
                this.visualEditor.addNodeFromLibrary(nodeType, centerX, centerY);
            }
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
let nodeLibraryPanel = null;

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NodeLibraryPanel;
}