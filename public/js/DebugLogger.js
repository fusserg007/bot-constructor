/**
 * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 */
class DebugLogger {
    constructor() {
        this.logs = [];
        this.isEnabled = true;
        this.logLevel = 'debug'; // debug, info, warn, error
        this.maxLogs = 1000;
        this.categories = new Set();
        this.listeners = new Set();
        
        // –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        this.levels = {
            'debug': 0,
            'info': 1,
            'warn': 2,
            'error': 3
        };
        
        console.log('üîß DebugLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
     */
    log(level, category, message, data = null) {
        if (!this.isEnabled) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.levels[level] < this.levels[this.logLevel]) return;
        
        const logEntry = {
            id: this.generateId(),
            timestamp: new Date(),
            level: level,
            category: category,
            message: message,
            data: data,
            stackTrace: level === 'error' ? new Error().stack : null
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
        this.logs.push(logEntry);
        this.categories.add(category);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        if (this.logs.length > this.maxLogs) {
            this.logs.shift();
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
        this.outputToConsole(logEntry);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        this.notifyListeners(logEntry);
        
        return logEntry.id;
    }
    
    /**
     * –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
     */
    debug(category, message, data = null) {
        return this.log('debug', category, message, data);
    }
    
    info(category, message, data = null) {
        return this.log('info', category, message, data);
    }
    
    warn(category, message, data = null) {
        return this.log('warn', category, message, data);
    }
    
    error(category, message, data = null) {
        return this.log('error', category, message, data);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
     */
    getLogs(filter = null) {
        let filteredLogs = [...this.logs];
        
        if (filter) {
            if (filter.level) {
                filteredLogs = filteredLogs.filter(log => log.level === filter.level);
            }
            if (filter.category) {
                filteredLogs = filteredLogs.filter(log => log.category === filter.category);
            }
            if (filter.search) {
                const searchLower = filter.search.toLowerCase();
                filteredLogs = filteredLogs.filter(log => 
                    log.message.toLowerCase().includes(searchLower) ||
                    log.category.toLowerCase().includes(searchLower)
                );
            }
            if (filter.since) {
                filteredLogs = filteredLogs.filter(log => log.timestamp >= filter.since);
            }
        }
        
        return filteredLogs;
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –≤ JSON
     */
    exportLogs() {
        const exportData = {
            timestamp: new Date().toISOString(),
            totalLogs: this.logs.length,
            categories: Array.from(this.categories),
            systemInfo: this.getSystemInfo(),
            logs: this.logs
        };
        
        return JSON.stringify(exportData, null, 2);
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏
     */
    clear() {
        const clearedCount = this.logs.length;
        this.logs = [];
        this.categories.clear();
        
        this.info('system', `–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã (—É–¥–∞–ª–µ–Ω–æ ${clearedCount} –∑–∞–ø–∏—Å–µ–π)`);
        return clearedCount;
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤
     */
    addListener(callback) {
        this.listeners.add(callback);
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è
     */
    removeListener(callback) {
        this.listeners.delete(callback);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setLogLevel(level) {
        if (this.levels.hasOwnProperty(level)) {
            this.logLevel = level;
            this.info('system', `–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${level}`);
        } else {
            this.warn('system', `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${level}`);
        }
    }
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    setEnabled(enabled) {
        this.isEnabled = enabled;
        console.log(`üîß DebugLogger ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤
     */
    getStats() {
        const stats = {
            total: this.logs.length,
            byLevel: {},
            byCategory: {},
            timeRange: null
        };
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        for (const level of Object.keys(this.levels)) {
            stats.byLevel[level] = this.logs.filter(log => log.level === level).length;
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for (const category of this.categories) {
            stats.byCategory[category] = this.logs.filter(log => log.category === category).length;
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if (this.logs.length > 0) {
            stats.timeRange = {
                start: this.logs[0].timestamp,
                end: this.logs[this.logs.length - 1].timestamp
            };
        }
        
        return stats;
    }
    
    // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }
    
    outputToConsole(logEntry) {
        const timestamp = logEntry.timestamp.toLocaleTimeString();
        const prefix = `[${timestamp}] [${logEntry.category}]`;
        
        switch (logEntry.level) {
            case 'debug':
                console.debug(`üîç ${prefix}`, logEntry.message, logEntry.data);
                break;
            case 'info':
                console.info(`‚ÑπÔ∏è ${prefix}`, logEntry.message, logEntry.data);
                break;
            case 'warn':
                console.warn(`‚ö†Ô∏è ${prefix}`, logEntry.message, logEntry.data);
                break;
            case 'error':
                console.error(`‚ùå ${prefix}`, logEntry.message, logEntry.data);
                if (logEntry.stackTrace) {
                    console.error('Stack trace:', logEntry.stackTrace);
                }
                break;
        }
    }
    
    notifyListeners(logEntry) {
        for (const listener of this.listeners) {
            try {
                listener(logEntry);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ –ª–æ–≥–æ–≤:', error);
            }
        }
    }
    
    getSystemInfo() {
        return {
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString(),
            url: window.location.href,
            viewport: {
                width: window.innerWidth,
                height: window.innerHeight
            },
            screen: {
                width: screen.width,
                height: screen.height
            }
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (typeof window !== 'undefined') {
    window.debugLogger = new DebugLogger();
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    window.addEventListener('error', (event) => {
        window.debugLogger.error('global', '–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ JavaScript', {
            message: event.message,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno,
            error: event.error
        });
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–∏—Å—ã
    window.addEventListener('unhandledrejection', (event) => {
        window.debugLogger.error('global', '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞', {
            reason: event.reason,
            promise: event.promise
        });
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DebugLogger;
}