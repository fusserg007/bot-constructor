/**
 * –†–µ–µ—Å—Ç—Ä —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 */
class NodeRegistry {
  constructor() {
    this.nodeTypes = new Map();
    this.categories = new Map();
    this.initialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–µ—Å—Ç—Ä —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏ —É–∑–ª–æ–≤
   */
  init() {
    if (this.initialized) return;

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    this.registerCategory('triggers', {
      name: 'Triggers',
      displayName: '–¢—Ä–∏–≥–≥–µ—Ä—ã',
      description: '–£–∑–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π',
      icon: 'üéØ',
      color: '#4CAF50'
    });

    this.registerCategory('conditions', {
      name: 'conditions',
      displayName: '–£—Å–ª–æ–≤–∏—è',
      description: '–£–∑–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –∏ –ª–æ–≥–∏–∫–∏',
      icon: '‚ùì',
      color: '#FF9800'
    });

    this.registerCategory('actions', {
      name: 'actions',
      displayName: '–î–µ–π—Å—Ç–≤–∏—è',
      description: '–£–∑–ª—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π',
      icon: '‚ö°',
      color: '#2196F3'
    });

    this.registerCategory('data', {
      name: 'data',
      displayName: '–î–∞–Ω–Ω—ã–µ',
      description: '–£–∑–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏',
      icon: 'üíæ',
      color: '#9C27B0'
    });

    this.registerCategory('integrations', {
      name: 'integrations',
      displayName: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
      description: '–£–∑–ª—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π',
      icon: 'üîó',
      color: '#F44336'
    });

    this.initialized = true;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–∑–ª–æ–≤
   */
  registerCategory(id, categoryInfo) {
    this.categories.set(id, {
      id,
      ...categoryInfo
    });
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–∏–ø —É–∑–ª–∞
   */
  registerNodeType(nodeClass, metadata = {}) {
    if (!nodeClass.prototype || typeof nodeClass !== 'function') {
      throw new Error('Node class must be a constructor function');
    }

    const nodeType = metadata.type || nodeClass.name.toLowerCase().replace('node', '');
    const category = metadata.category || 'actions';

    const nodeInfo = {
      type: nodeType,
      category: category,
      class: nodeClass,
      displayName: metadata.displayName || nodeType,
      description: metadata.description || '',
      icon: metadata.icon || '‚öôÔ∏è',
      tags: metadata.tags || [],
      inputs: metadata.inputs || [],
      outputs: metadata.outputs || [],
      configSchema: metadata.configSchema || {},
      examples: metadata.examples || []
    };

    this.nodeTypes.set(nodeType, nodeInfo);
    return nodeInfo;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —É–∑–ª–∞
   */
  getNodeType(type) {
    return this.nodeTypes.get(type);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —É–∑–ª–æ–≤
   */
  getAllNodeTypes() {
    return Array.from(this.nodeTypes.values());
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø—ã —É–∑–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getNodeTypesByCategory(category) {
    return Array.from(this.nodeTypes.values())
      .filter(nodeInfo => nodeInfo.category === category);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getCategories() {
    return Array.from(this.categories.values());
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getCategory(categoryId) {
    return this.categories.get(categoryId);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∑–ª–∞ –ø–æ —Ç–∏–ø—É
   */
  createNode(type, config = {}) {
    const nodeInfo = this.getNodeType(type);
    if (!nodeInfo) {
      throw new Error(`Unknown node type: ${type}`);
    }

    const node = new nodeInfo.class();
    node.type = type;
    node.category = nodeInfo.category;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    node.config = {
      displayName: nodeInfo.displayName,
      description: nodeInfo.description,
      icon: nodeInfo.icon,
      ...config
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    nodeInfo.inputs.forEach(input => {
      node.addInput(input.name, input.type, input.required);
    });

    nodeInfo.outputs.forEach(output => {
      node.addOutput(output.name, output.type);
    });

    return node;
  }

  /**
   * –ü–æ–∏—Å–∫ —É–∑–ª–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
   */
  searchNodes(query) {
    if (!query || query.trim() === '') {
      return this.getAllNodeTypes();
    }

    const searchTerm = query.toLowerCase().trim();
    
    return Array.from(this.nodeTypes.values()).filter(nodeInfo => {
      return nodeInfo.displayName.toLowerCase().includes(searchTerm) ||
             nodeInfo.description.toLowerCase().includes(searchTerm) ||
             nodeInfo.type.toLowerCase().includes(searchTerm) ||
             nodeInfo.tags.some(tag => tag.toLowerCase().includes(searchTerm));
    });
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É —É–∑–ª–∞
   */
  validateNodeSchema(schema) {
    const nodeInfo = this.getNodeType(schema.type);
    if (!nodeInfo) {
      return {
        isValid: false,
        errors: [`Unknown node type: ${schema.type}`]
      };
    }

    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (nodeInfo.configSchema.required) {
      nodeInfo.configSchema.required.forEach(field => {
        if (!schema.config || schema.config[field] === undefined) {
          errors.push(`Required field '${field}' is missing`);
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
    if (nodeInfo.configSchema.properties && schema.config) {
      Object.entries(nodeInfo.configSchema.properties).forEach(([field, fieldSchema]) => {
        const value = schema.config[field];
        if (value !== undefined) {
          if (!this.validateFieldType(value, fieldSchema)) {
            errors.push(`Field '${field}' has invalid type`);
          }
        }
      });
    }

    return {
      isValid: errors.length === 0,
      errors: errors
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∏–ø –ø–æ–ª—è
   */
  validateFieldType(value, fieldSchema) {
    switch (fieldSchema.type) {
      case 'string':
        return typeof value === 'string';
      case 'number':
        return typeof value === 'number' && !isNaN(value);
      case 'boolean':
        return typeof value === 'boolean';
      case 'array':
        return Array.isArray(value);
      case 'object':
        return typeof value === 'object' && value !== null && !Array.isArray(value);
      default:
        return true;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ —É–∑–ª–∞
   */
  getConfigSchema(type) {
    const nodeInfo = this.getNodeType(type);
    return nodeInfo ? nodeInfo.configSchema : null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
   */
  canConnect(sourceType, sourceOutput, targetType, targetInput) {
    const sourceInfo = this.getNodeType(sourceType);
    const targetInfo = this.getNodeType(targetType);

    if (!sourceInfo || !targetInfo) {
      return false;
    }

    const sourceOutputInfo = sourceInfo.outputs[sourceOutput];
    const targetInputInfo = targetInfo.inputs[targetInput];

    if (!sourceOutputInfo || !targetInputInfo) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤
    if (sourceOutputInfo.type === 'any' || targetInputInfo.type === 'any') {
      return true;
    }

    return sourceOutputInfo.type === targetInputInfo.type;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–∑–ª–∞–º
   */
  getStats() {
    const stats = {
      totalNodes: this.nodeTypes.size,
      categories: {}
    };

    this.categories.forEach((category, id) => {
      stats.categories[id] = {
        name: category.displayName,
        count: this.getNodeTypesByCategory(id).length
      };
    });

    return stats;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–µ—Å—Ç—Ä –≤ JSON
   */
  export() {
    return {
      categories: Array.from(this.categories.entries()),
      nodeTypes: Array.from(this.nodeTypes.entries()).map(([type, info]) => ({
        type,
        category: info.category,
        displayName: info.displayName,
        description: info.description,
        icon: info.icon,
        tags: info.tags,
        inputs: info.inputs,
        outputs: info.outputs,
        configSchema: info.configSchema
      }))
    };
  }

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–µ—Å—Ç—Ä –∏–∑ JSON
   */
  import(data) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.categories) {
      data.categories.forEach(([id, category]) => {
        this.categories.set(id, category);
      });
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã —É–∑–ª–æ–≤ (–±–µ–∑ –∫–ª–∞—Å—Å–æ–≤ - —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
    if (data.nodeTypes) {
      data.nodeTypes.forEach(nodeInfo => {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
        const PlaceholderClass = class extends BaseNode {
          constructor() {
            super();
          }
        };

        this.nodeTypes.set(nodeInfo.type, {
          ...nodeInfo,
          class: PlaceholderClass
        });
      });
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä
   */
  clear() {
    this.nodeTypes.clear();
    this.categories.clear();
    this.initialized = false;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–µ—Å—Ç—Ä–∞
const nodeRegistry = new NodeRegistry();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { NodeRegistry, nodeRegistry };
} else if (typeof window !== 'undefined') {
  window.NodeRegistry = NodeRegistry;
  window.nodeRegistry = nodeRegistry;
}