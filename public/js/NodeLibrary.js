/**
 * –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–∑–ª–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ —É–∑–ª–æ–≤, –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
class NodeLibrary {
    constructor() {
        this.nodeTypes = this.initializeNodeTypes();
        this.categories = this.initializeCategories();
        this.searchIndex = this.buildSearchIndex();
        this.initialized = false;
        
        // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        this.complexityLevels = {
            1: { name: '–ù–æ–≤–∏—á–æ–∫', color: '#4CAF50', description: '–ü—Ä–æ—Å—Ç—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞' },
            2: { name: '–ë–∏–∑–Ω–µ—Å', color: '#FF9800', description: '–ì–æ—Ç–æ–≤—ã–µ –±–∏–∑–Ω–µ—Å-—Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –≤–æ—Ä–æ–Ω–∫–∏' },
            3: { name: '–ü—Ä–æ—Ñ–∏', color: '#F44336', description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' }
        };
        
        this.currentLevel = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å —É—Ä–æ–≤–Ω—è –Ω–æ–≤–∏—á–∫–∞
        
        // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.cache = {
            nodesByCategory: new Map(),
            nodesByLevel: new Map(),
            searchResults: new Map(),
            statistics: null,
            lastCacheUpdate: 0
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        this.logger = this.initLogger();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–≥–µ—Ä
     */
    initLogger() {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (typeof loggers !== 'undefined' && loggers.nodeLibrary) {
            return loggers.nodeLibrary;
        }
        
        // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ª–æ–≥–≥–µ—Ä—É
        return {
            info: (...args) => console.log(...args),
            warn: (...args) => console.warn(...args),
            debug: (...args) => console.log(...args),
            error: (...args) => console.error(...args)
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
     */
    init() {
        if (this.initialized) return;
        
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NodeLibrary...');
        this.validateNodeTypes();
        this.buildSearchIndex();
        this.initialized = true;
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if (window.complexityLevelSwitcher) {
            window.complexityLevelSwitcher.onLevelChange((level, prevLevel, config) => {
                this.onComplexityLevelChange(level, config);
            });
        }
        
        console.log(`‚úÖ NodeLibrary –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${Object.keys(this.nodeTypes).length} —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ –≤ ${this.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö`);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     */
    onComplexityLevelChange(level, config) {
        console.log(`üéØ NodeLibrary: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ${level}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        this.cache.nodesByCategory.clear();
        this.cache.searchResults.clear();
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–∑–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (window.nodeLibraryPanel) {
            window.nodeLibraryPanel.refresh();
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if (window.visualEditor) {
            window.visualEditor.onComplexityLevelChange(level, config);
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ ComplexityLevelSwitcher)
     */
    setComplexityLevel(level, config) {
        this.currentComplexityLevel = level;
        this.currentComplexityConfig = config;
        this.onComplexityLevelChange(level, config);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —É–∑–ª–æ–≤
     */
    validateNodeTypes() {
        const errors = [];
        
        Object.entries(this.nodeTypes).forEach(([type, node]) => {
            if (!node.category) {
                errors.push(`Node type '${type}' missing category`);
            }
            if (!node.name) {
                errors.push(`Node type '${type}' missing name`);
            }
            if (!node.description) {
                errors.push(`Node type '${type}' missing description`);
            }
            if (!Array.isArray(node.inputs)) {
                errors.push(`Node type '${type}' inputs must be array`);
            }
            if (!Array.isArray(node.outputs)) {
                errors.push(`Node type '${type}' outputs must be array`);
            }
        });

        if (errors.length > 0) {
            console.warn('‚ö†Ô∏è NodeLibrary validation warnings:', errors);
        }
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    buildSearchIndex() {
        this.searchIndex = {};
        
        Object.entries(this.nodeTypes).forEach(([type, node]) => {
            const searchTerms = [
                type,
                node.name,
                node.description,
                node.category,
                node.complexity || 'beginner',
                ...(node.tags || [])
            ].join(' ').toLowerCase();
            
            this.searchIndex[type] = searchTerms;
        });
        
        return this.searchIndex;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     */
    setComplexityLevel(level) {
        if (level >= 1 && level <= 3) {
            this.currentLevel = level;
            this.cache.nodesByLevel.clear(); // –û—á–∏—â–∞–µ–º –∫—ç—à
            this.logger.info(`üéØ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${this.complexityLevels[level].name}`);
            return true;
        }
        return false;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —É–∑–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     */
    getNodesForCurrentLevel() {
        const cacheKey = `level_${this.currentLevel}`;
        
        if (this.cache.nodesByLevel.has(cacheKey)) {
            return this.cache.nodesByLevel.get(cacheKey);
        }

        const filteredNodes = {};
        
        Object.entries(this.nodeTypes).forEach(([type, node]) => {
            const nodeLevel = node.level || 1;
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∑–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
            if (nodeLevel <= this.currentLevel) {
                filteredNodes[type] = node;
            }
        });

        this.cache.nodesByLevel.set(cacheKey, filteredNodes);
        return filteredNodes;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —É–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–∑–ª–∞
     */
    getSmartSuggestions(nodeType) {
        const node = this.nodeTypes[nodeType];
        if (!node || !node.smartSuggestions) {
            return [];
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        return node.smartSuggestions.filter(suggestionType => {
            const suggestionNode = this.nodeTypes[suggestionType];
            return suggestionNode && (suggestionNode.level || 1) <= this.currentLevel;
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö —É–∑–ª–æ–≤
     */
    areNodesCompatible(sourceType, targetType) {
        const sourceNode = this.nodeTypes[sourceType];
        const targetNode = this.nodeTypes[targetType];
        
        if (!sourceNode || !targetNode) return false;
        
        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if (sourceNode.compatibility && targetNode.compatibility) {
            const sourceCategories = sourceNode.compatibility.categories || [];
            const targetCategories = targetNode.compatibility.categories || [];
            
            return sourceCategories.some(cat => targetCategories.includes(cat));
        }
        
        return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏
    }

    initializeNodeTypes() {
        return {
            // –¢—Ä–∏–≥–≥–µ—Ä—ã - –£—Ä–æ–≤–µ–Ω—å 1: –ù–æ–≤–∏—á–æ–∫
            'command': {
                category: 'triggers',
                name: '–ö–æ–º–∞–Ω–¥–∞',
                description: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (/start, /help)',
                icon: '‚ö°',
                level: 1, // –ù–æ–≤–∏—á–æ–∫
                complexity: 'beginner',
                inputs: [],
                outputs: ['output'],
                config: {
                    command: { type: 'text', label: '–ö–æ–º–∞–Ω–¥–∞', default: '/start' },
                    description: { type: 'text', label: '–û–ø–∏—Å–∞–Ω–∏–µ', default: '' }
                },
                // –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤
                smartSuggestions: ['send_message', 'create_keyboard', 'save_variable'],
                // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –±–ª–æ–∫–∞–º–∏
                compatibility: {
                    outputs: ['message_context', 'user_context'],
                    categories: ['communication', 'user_interaction']
                }
            },
            'text': {
                category: 'triggers',
                name: '–¢–µ–∫—Å—Ç',
                description: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                icon: 'üí¨',
                level: 1, // –ù–æ–≤–∏—á–æ–∫
                complexity: 'beginner',
                inputs: [],
                outputs: ['output'],
                config: {
                    pattern: { type: 'text', label: '–®–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞', default: '' },
                    exact_match: { type: 'checkbox', label: '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ', default: false }
                },
                smartSuggestions: ['text_check', 'send_message', 'save_variable'],
                compatibility: {
                    outputs: ['text_data', 'user_context'],
                    categories: ['text_processing', 'user_interaction']
                }
            },
            'callback': {
                category: 'triggers',
                name: 'Callback',
                description: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫',
                icon: 'üîò',
                inputs: [],
                outputs: ['output'],
                config: {
                    callback_data: { type: 'text', label: '–î–∞–Ω–Ω—ã–µ callback', default: '' }
                }
            },

            // –£—Å–ª–æ–≤–∏—è
            'text_check': {
                category: 'conditions',
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞',
                description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
                icon: 'üî§',
                inputs: ['input'],
                outputs: ['true', 'false'],
                config: {
                    condition: { type: 'select', label: '–£—Å–ª–æ–≤–∏–µ', options: ['contains', 'equals', 'starts_with', 'ends_with', 'regex'], default: 'contains' },
                    value: { type: 'text', label: '–ó–Ω–∞—á–µ–Ω–∏–µ', default: '' },
                    case_sensitive: { type: 'checkbox', label: '–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä', default: false }
                }
            },
            'user_check': {
                category: 'conditions',
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                icon: 'üë§',
                inputs: ['input'],
                outputs: ['true', 'false'],
                config: {
                    property: { type: 'select', label: '–°–≤–æ–π—Å—Ç–≤–æ', options: ['is_admin', 'is_member', 'user_id', 'username', 'first_name', 'is_bot'], default: 'is_member' },
                    value: { type: 'text', label: '–ó–Ω–∞—á–µ–Ω–∏–µ', default: '' },
                    operator: { type: 'select', label: '–û–ø–µ—Ä–∞—Ç–æ—Ä', options: ['equals', 'not_equals', 'contains'], default: 'equals' }
                }
            },
            'time_check': {
                category: 'conditions',
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏',
                description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É',
                icon: 'üïê',
                inputs: ['input'],
                outputs: ['true', 'false'],
                config: {
                    check_type: { type: 'select', label: '–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏', options: ['time_range', 'day_of_week', 'date_range', 'hour'], default: 'time_range' },
                    start_time: { type: 'text', label: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (HH:MM)', default: '09:00' },
                    end_time: { type: 'text', label: '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (HH:MM)', default: '18:00' },
                    days: { type: 'text', label: '–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (1-7, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', default: '1,2,3,4,5' },
                    timezone: { type: 'text', label: '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', default: 'Europe/Moscow' }
                }
            },
            'data_check': {
                category: 'conditions',
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö',
                icon: 'üìä',
                inputs: ['input'],
                outputs: ['true', 'false'],
                config: {
                    data_source: { type: 'select', label: '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö', options: ['variable', 'user_data', 'chat_data', 'global_data'], default: 'variable' },
                    key: { type: 'text', label: '–ö–ª—é—á/–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π', default: '' },
                    operator: { type: 'select', label: '–û–ø–µ—Ä–∞—Ç–æ—Ä', options: ['equals', 'not_equals', 'greater', 'less', 'greater_equal', 'less_equal', 'exists', 'not_exists'], default: 'equals' },
                    value: { type: 'text', label: '–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', default: '' },
                    data_type: { type: 'select', label: '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö', options: ['string', 'number', 'boolean'], default: 'string' }
                }
            },
            'logic_and': {
                category: 'conditions',
                name: '–ò (AND)',
                description: '–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ò - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º–∏',
                icon: '‚àß',
                inputs: ['input1', 'input2'],
                outputs: ['output'],
                config: {
                    description: { type: 'text', label: '–û–ø–∏—Å–∞–Ω–∏–µ', default: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò' }
                }
            },
            'logic_or': {
                category: 'conditions',
                name: '–ò–õ–ò (OR)',
                description: '–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ò–õ–ò - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º',
                icon: '‚à®',
                inputs: ['input1', 'input2'],
                outputs: ['output'],
                config: {
                    description: { type: 'text', label: '–û–ø–∏—Å–∞–Ω–∏–µ', default: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò' }
                }
            },
            'logic_not': {
                category: 'conditions',
                name: '–ù–ï (NOT)',
                description: '–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ù–ï - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                icon: '¬¨',
                inputs: ['input'],
                outputs: ['output'],
                config: {
                    description: { type: 'text', label: '–û–ø–∏—Å–∞–Ω–∏–µ', default: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ù–ï' }
                }
            },

            // –î–µ–π—Å—Ç–≤–∏—è - –£—Ä–æ–≤–µ–Ω—å 1: –ù–æ–≤–∏—á–æ–∫
            'send_message': {
                category: 'actions',
                name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                icon: 'üí¨',
                level: 1, // –ù–æ–≤–∏—á–æ–∫
                complexity: 'beginner',
                inputs: ['input'],
                outputs: ['output', 'error'],
                config: {
                    text: { type: 'textarea', label: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', default: '–ü—Ä–∏–≤–µ—Ç!' },
                    parse_mode: { type: 'select', label: '–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞', options: ['none', 'HTML', 'Markdown'], default: 'none' },
                    disable_web_page_preview: { type: 'checkbox', label: '–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫', default: false },
                    reply_to_message: { type: 'checkbox', label: '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ', default: false },
                    delete_after: { type: 'number', label: '–£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ (—Å–µ–∫)', default: 0 }
                },
                smartSuggestions: ['create_keyboard', 'text_check', 'delay_action'],
                compatibility: {
                    outputs: ['message_sent', 'user_notified'],
                    categories: ['communication', 'user_interaction']
                }
            },

            // –ë–∏–∑–Ω–µ—Å-–±–ª–æ–∫–∏ - –£—Ä–æ–≤–µ–Ω—å 2: –ë–∏–∑–Ω–µ—Å
            'ecommerce_catalog': {
                category: 'business',
                name: 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
                description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞',
                icon: 'üõí',
                level: 2, // –ë–∏–∑–Ω–µ—Å
                complexity: 'business',
                inputs: ['input'],
                outputs: ['item_selected', 'catalog_viewed', 'error'],
                config: {
                    catalog_source: { type: 'select', label: '–ò—Å—Ç–æ—á–Ω–∏–∫ –∫–∞—Ç–∞–ª–æ–≥–∞', options: ['json_file', 'api_endpoint', 'database'], default: 'json_file' },
                    items_per_page: { type: 'number', label: '–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ', default: 5 },
                    show_prices: { type: 'checkbox', label: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—ã', default: true },
                    show_images: { type: 'checkbox', label: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', default: true },
                    currency: { type: 'text', label: '–í–∞–ª—é—Ç–∞', default: '‚ÇΩ' }
                },
                smartSuggestions: ['ecommerce_cart', 'payment_processor', 'save_variable'],
                compatibility: {
                    outputs: ['product_data', 'user_selection'],
                    categories: ['ecommerce', 'business_logic']
                }
            },

            'ecommerce_cart': {
                category: 'business',
                name: 'üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫',
                description: '–£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                icon: 'üõçÔ∏è',
                level: 2, // –ë–∏–∑–Ω–µ—Å
                complexity: 'business',
                inputs: ['product_data'],
                outputs: ['cart_updated', 'checkout_ready', 'cart_empty'],
                config: {
                    max_items: { type: 'number', label: '–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤', default: 10 },
                    auto_save: { type: 'checkbox', label: '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', default: true },
                    show_total: { type: 'checkbox', label: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ç–æ–≥–æ', default: true }
                },
                smartSuggestions: ['payment_processor', 'send_message', 'save_variable'],
                compatibility: {
                    outputs: ['cart_data', 'order_data'],
                    categories: ['ecommerce', 'data_management']
                }
            },

            // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–ª–æ–∫–∏ - –£—Ä–æ–≤–µ–Ω—å 3: –ü—Ä–æ—Ñ–∏
            'advanced_loop': {
                category: 'logic',
                name: 'üîÑ –¶–∏–∫–ª For',
                description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ü–∏–∫–ª–µ —Å —Å—á–µ—Ç—á–∏–∫–æ–º',
                icon: 'üîÑ',
                level: 3, // –ü—Ä–æ—Ñ–∏
                complexity: 'advanced',
                inputs: ['input', 'loop_data'],
                outputs: ['iteration', 'completed', 'error'],
                config: {
                    start_value: { type: 'number', label: '–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', default: 0 },
                    end_value: { type: 'number', label: '–ö–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', default: 10 },
                    step: { type: 'number', label: '–®–∞–≥', default: 1 },
                    max_iterations: { type: 'number', label: '–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π', default: 100 },
                    break_condition: { type: 'text', label: '–£—Å–ª–æ–≤–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è', default: '' }
                },
                smartSuggestions: ['condition_check', 'save_variable', 'api_request'],
                compatibility: {
                    outputs: ['loop_iteration', 'counter_value'],
                    categories: ['advanced_logic', 'flow_control']
                }
            },

            'api_integration': {
                category: 'integrations',
                name: 'üåê API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
                description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API',
                icon: 'üåê',
                level: 3, // –ü—Ä–æ—Ñ–∏
                complexity: 'advanced',
                inputs: ['request_data'],
                outputs: ['success', 'error', 'data_received'],
                config: {
                    endpoint_url: { type: 'text', label: 'URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞', default: '' },
                    method: { type: 'select', label: 'HTTP –º–µ—Ç–æ–¥', options: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'], default: 'GET' },
                    headers: { type: 'textarea', label: '–ó–∞–≥–æ–ª–æ–≤–∫–∏ (JSON)', default: '{}' },
                    auth_type: { type: 'select', label: '–¢–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', options: ['none', 'bearer', 'basic', 'api_key'], default: 'none' },
                    retry_attempts: { type: 'number', label: '–ü–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞', default: 3 },
                    timeout: { type: 'number', label: '–¢–∞–π–º–∞—É—Ç (—Å–µ–∫)', default: 30 }
                },
                smartSuggestions: ['data_transformer', 'condition_check', 'error_handler'],
                compatibility: {
                    outputs: ['api_response', 'processed_data'],
                    categories: ['api_integration', 'external_services']
                }
            },
            'send_photo': {
                category: 'actions',
                name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ',
                description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é',
                icon: 'üñºÔ∏è',
                inputs: ['input'],
                outputs: ['output', 'error'],
                config: {
                    photo_url: { type: 'text', label: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', default: '' },
                    photo_file: { type: 'text', label: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É', default: '' },
                    caption: { type: 'textarea', label: '–ü–æ–¥–ø–∏—Å—å', default: '' },
                    parse_mode: { type: 'select', label: '–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞', options: ['none', 'HTML', 'Markdown'], default: 'none' }
                }
            },
            'send_document': {
                category: 'actions',
                name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç',
                description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç',
                icon: 'üìÑ',
                inputs: ['input'],
                outputs: ['output', 'error'],
                config: {
                    document_url: { type: 'text', label: 'URL –¥–æ–∫—É–º–µ–Ω—Ç–∞', default: '' },
                    document_file: { type: 'text', label: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É', default: '' },
                    caption: { type: 'textarea', label: '–ü–æ–¥–ø–∏—Å—å', default: '' },
                    filename: { type: 'text', label: '–ò–º—è —Ñ–∞–π–ª–∞', default: '' }
                }
            },
            'create_keyboard': {
                category: 'actions',
                name: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
                description: '–°–æ–∑–¥–∞–µ—Ç inline –∏–ª–∏ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
                icon: '‚å®Ô∏è',
                inputs: ['input'],
                outputs: ['output'],
                config: {
                    keyboard_type: { type: 'select', label: '–¢–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', options: ['inline', 'reply'], default: 'inline' },
                    buttons: { type: 'textarea', label: '–ö–Ω–æ–ø–∫–∏ (JSON)', default: '[{"text": "–ö–Ω–æ–ø–∫–∞", "callback_data": "button_1"}]' },
                    resize_keyboard: { type: 'checkbox', label: '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä', default: true },
                    one_time_keyboard: { type: 'checkbox', label: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è', default: false }
                }
            },
            'delete_message': {
                category: 'actions',
                name: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                description: '–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞',
                icon: 'üóëÔ∏è',
                inputs: ['input'],
                outputs: ['output', 'error'],
                config: {
                    target: { type: 'select', label: '–ß—Ç–æ —É–¥–∞–ª–∏—Ç—å', options: ['current_message', 'reply_message', 'by_id'], default: 'current_message' },
                    message_id: { type: 'text', label: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è', default: '' },
                    delay: { type: 'number', label: '–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)', default: 0 }
                }
            },
            'admin_action': {
                category: 'actions',
                name: '–î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —á–∞—Ç–µ',
                icon: 'üëÆ',
                inputs: ['input'],
                outputs: ['output', 'error'],
                config: {
                    action: { type: 'select', label: '–î–µ–π—Å—Ç–≤–∏–µ', options: ['kick_user', 'ban_user', 'unban_user', 'mute_user', 'unmute_user', 'promote_user', 'demote_user'], default: 'kick_user' },
                    target_user: { type: 'select', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', options: ['message_author', 'reply_user', 'by_id'], default: 'message_author' },
                    user_id: { type: 'text', label: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', default: '' },
                    duration: { type: 'number', label: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)', default: 0 },
                    reason: { type: 'text', label: '–ü—Ä–∏—á–∏–Ω–∞', default: '' }
                }
            },
            'delay_action': {
                category: 'actions',
                name: '–ó–∞–¥–µ—Ä–∂–∫–∞',
                description: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
                icon: '‚è±Ô∏è',
                inputs: ['input'],
                outputs: ['output'],
                config: {
                    delay_type: { type: 'select', label: '–¢–∏–ø –∑–∞–¥–µ—Ä–∂–∫–∏', options: ['seconds', 'minutes', 'hours'], default: 'seconds' },
                    duration: { type: 'number', label: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', default: 1 },
                    description: { type: 'text', label: '–û–ø–∏—Å–∞–Ω–∏–µ', default: '–ü–∞—É–∑–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏' }
                }
            },
            'forward_message': {
                category: 'actions',
                name: '–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                description: '–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç',
                icon: '‚ÜóÔ∏è',
                inputs: ['input'],
                outputs: ['output', 'error'],
                config: {
                    target_chat: { type: 'text', label: 'ID —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞', default: '' },
                    source_message: { type: 'select', label: '–ò—Å—Ç–æ—á–Ω–∏–∫', options: ['current_message', 'reply_message'], default: 'current_message' },
                    disable_notification: { type: 'checkbox', label: '–ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', default: false }
                }
            },
            'edit_message': {
                category: 'actions',
                name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                description: '–ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
                icon: '‚úèÔ∏è',
                inputs: ['input'],
                outputs: ['output', 'error'],
                config: {
                    new_text: { type: 'textarea', label: '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç', default: '' },
                    message_id: { type: 'text', label: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è', default: '' },
                    parse_mode: { type: 'select', label: '–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞', options: ['none', 'HTML', 'Markdown'], default: 'none' }
                }
            },

            // –î–∞–Ω–Ω—ã–µ
            'save_variable': {
                category: 'data',
                name: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
                description: '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
                icon: 'üíæ',
                inputs: ['input'],
                outputs: ['output'],
                config: {
                    variable_name: { type: 'text', label: '–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π', default: 'my_var' },
                    value: { type: 'text', label: '–ó–Ω–∞—á–µ–Ω–∏–µ', default: '' },
                    scope: { type: 'select', label: '–û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏', options: ['user', 'chat', 'global'], default: 'user' },
                    data_type: { type: 'select', label: '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö', options: ['string', 'number', 'boolean', 'json'], default: 'string' }
                }
            },
            'load_variable': {
                category: 'data',
                name: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
                description: '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π',
                icon: 'üìÇ',
                inputs: ['input'],
                outputs: ['output', 'not_found'],
                config: {
                    variable_name: { type: 'text', label: '–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π', default: 'my_var' },
                    scope: { type: 'select', label: '–û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏', options: ['user', 'chat', 'global'], default: 'user' },
                    default_value: { type: 'text', label: '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', default: '' }
                }
            },
            'counter': {
                category: 'data',
                name: '–°—á–µ—Ç—á–∏–∫',
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Å—á–µ—Ç—á–∏–∫',
                icon: 'üî¢',
                inputs: ['input'],
                outputs: ['output'],
                config: {
                    counter_name: { type: 'text', label: '–ò–º—è —Å—á–µ—Ç—á–∏–∫–∞', default: 'counter' },
                    operation: { type: 'select', label: '–û–ø–µ—Ä–∞—Ü–∏—è', options: ['increment', 'decrement', 'set', 'reset'], default: 'increment' },
                    value: { type: 'number', label: '–ó–Ω–∞—á–µ–Ω–∏–µ', default: 1 },
                    scope: { type: 'select', label: '–û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏', options: ['user', 'chat', 'global'], default: 'user' },
                    min_value: { type: 'number', label: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', default: 0 },
                    max_value: { type: 'number', label: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', default: 1000 }
                }
            },
            'database_query': {
                category: 'data',
                name: '–ó–∞–ø—Ä–æ—Å –∫ –ë–î',
                description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                icon: 'üóÑÔ∏è',
                inputs: ['input'],
                outputs: ['success', 'error', 'empty'],
                config: {
                    operation: { type: 'select', label: '–û–ø–µ—Ä–∞—Ü–∏—è', options: ['select', 'insert', 'update', 'delete'], default: 'select' },
                    table: { type: 'text', label: '–¢–∞–±–ª–∏—Ü–∞', default: 'users' },
                    conditions: { type: 'textarea', label: '–£—Å–ª–æ–≤–∏—è (JSON)', default: '{"user_id": "{user_id}"}' },
                    data: { type: 'textarea', label: '–î–∞–Ω–Ω—ã–µ (JSON)', default: '{}' },
                    limit: { type: 'number', label: '–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π', default: 10 }
                }
            },
            'random_generator': {
                category: 'data',
                name: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π',
                description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞',
                icon: 'üé≤',
                inputs: ['input'],
                outputs: ['output'],
                config: {
                    type: { type: 'select', label: '–¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', options: ['number', 'string', 'choice', 'boolean'], default: 'number' },
                    min_number: { type: 'number', label: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ', default: 1 },
                    max_number: { type: 'number', label: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ', default: 100 },
                    string_length: { type: 'number', label: '–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏', default: 8 },
                    string_chars: { type: 'text', label: '–°–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏', default: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789' },
                    choices: { type: 'textarea', label: '–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ (–ø–æ —Å—Ç—Ä–æ–∫–µ)', default: '–í–∞—Ä–∏–∞–Ω—Ç 1\n–í–∞—Ä–∏–∞–Ω—Ç 2\n–í–∞—Ä–∏–∞–Ω—Ç 3' }
                }
            },
            'data_transformer': {
                category: 'data',
                name: '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö',
                description: '–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏',
                icon: 'üîÑ',
                inputs: ['input'],
                outputs: ['output', 'error'],
                config: {
                    operation: { type: 'select', label: '–û–ø–µ—Ä–∞—Ü–∏—è', options: ['json_parse', 'json_stringify', 'to_upper', 'to_lower', 'trim', 'split', 'join'], default: 'json_parse' },
                    input_data: { type: 'text', label: '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', default: '' },
                    separator: { type: 'text', label: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–¥–ª—è split/join)', default: ',' },
                    target_variable: { type: 'text', label: '–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', default: 'result' }
                }
            },
            'data_validator': {
                category: 'data',
                name: '–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö',
                description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º',
                icon: '‚úÖ',
                inputs: ['input'],
                outputs: ['valid', 'invalid'],
                config: {
                    validation_type: { type: 'select', label: '–¢–∏–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏', options: ['email', 'phone', 'url', 'number', 'length', 'regex'], default: 'email' },
                    input_value: { type: 'text', label: '–ü—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', default: '' },
                    min_length: { type: 'number', label: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞', default: 1 },
                    max_length: { type: 'number', label: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞', default: 100 },
                    regex_pattern: { type: 'text', label: '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ', default: '' }
                }
            },

            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            'http_request': {
                category: 'integrations',
                name: 'HTTP-–∑–∞–ø—Ä–æ—Å',
                description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API',
                icon: 'üåê',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    url: { type: 'text', label: 'URL', default: 'https://api.example.com' },
                    method: { type: 'select', label: '–ú–µ—Ç–æ–¥', options: ['GET', 'POST', 'PUT', 'DELETE'], default: 'GET' },
                    headers: { type: 'textarea', label: '–ó–∞–≥–æ–ª–æ–≤–∫–∏ (JSON)', default: '{"Content-Type": "application/json"}' },
                    body: { type: 'textarea', label: '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞', default: '' },
                    timeout: { type: 'number', label: '–¢–∞–π–º–∞—É—Ç (—Å–µ–∫)', default: 30 }
                }
            },
            'weather_api': {
                category: 'integrations',
                name: '–ü–æ–≥–æ–¥–∞',
                description: '–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ OpenWeatherMap API',
                icon: 'üå§Ô∏è',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    api_key: { type: 'text', label: 'API –∫–ª—é—á OpenWeatherMap', default: '' },
                    city: { type: 'text', label: '–ì–æ—Ä–æ–¥', default: 'Moscow' },
                    units: { type: 'select', label: '–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è', options: ['metric', 'imperial', 'kelvin'], default: 'metric' },
                    lang: { type: 'select', label: '–Ø–∑—ã–∫', options: ['ru', 'en', 'de', 'fr', 'es'], default: 'ru' }
                }
            },
            'news_api': {
                category: 'integrations',
                name: '–ù–æ–≤–æ—Å—Ç–∏',
                description: '–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ NewsAPI',
                icon: 'üì∞',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    api_key: { type: 'text', label: 'API –∫–ª—é—á NewsAPI', default: '' },
                    query: { type: 'text', label: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', default: '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
                    country: { type: 'select', label: '–°—Ç—Ä–∞–Ω–∞', options: ['ru', 'us', 'gb', 'de', 'fr'], default: 'ru' },
                    category: { type: 'select', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', options: ['general', 'business', 'entertainment', 'health', 'science', 'sports', 'technology'], default: 'technology' },
                    page_size: { type: 'number', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π', default: 5 }
                }
            },
            'currency_api': {
                category: 'integrations',
                name: '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç',
                description: '–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ ExchangeRate API',
                icon: 'üí±',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    base_currency: { type: 'select', label: '–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', options: ['USD', 'EUR', 'RUB', 'GBP', 'JPY', 'CNY'], default: 'USD' },
                    target_currency: { type: 'select', label: '–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞', options: ['USD', 'EUR', 'RUB', 'GBP', 'JPY', 'CNY'], default: 'RUB' },
                    amount: { type: 'number', label: '–°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏', default: 1 }
                }
            },
            'translate_api': {
                category: 'integrations',
                name: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫',
                description: '–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Google Translate API',
                icon: 'üåç',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    api_key: { type: 'text', label: 'API –∫–ª—é—á Google Translate', default: '' },
                    text: { type: 'textarea', label: '–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞', default: '{message_text}' },
                    source_lang: { type: 'select', label: '–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫', options: ['auto', 'ru', 'en', 'de', 'fr', 'es', 'zh'], default: 'auto' },
                    target_lang: { type: 'select', label: '–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫', options: ['ru', 'en', 'de', 'fr', 'es', 'zh'], default: 'en' }
                }
            },
            'qr_generator': {
                category: 'integrations',
                name: 'QR-–∫–æ–¥',
                description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —á–µ—Ä–µ–∑ QR Server API',
                icon: 'üì±',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    text: { type: 'textarea', label: '–¢–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞', default: '{message_text}' },
                    size: { type: 'select', label: '–†–∞–∑–º–µ—Ä', options: ['100x100', '200x200', '300x300', '400x400'], default: '200x200' },
                    format: { type: 'select', label: '–§–æ—Ä–º–∞—Ç', options: ['png', 'jpg', 'gif', 'svg'], default: 'png' }
                }
            },
            'joke_api': {
                category: 'integrations',
                name: '–ê–Ω–µ–∫–¥–æ—Ç—ã',
                description: '–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã —á–µ—Ä–µ–∑ JokeAPI',
                icon: 'üòÑ',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    category: { type: 'select', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', options: ['Any', 'Programming', 'Misc', 'Dark', 'Pun', 'Spooky', 'Christmas'], default: 'Programming' },
                    type: { type: 'select', label: '–¢–∏–ø', options: ['single', 'twopart'], default: 'single' },
                    lang: { type: 'select', label: '–Ø–∑—ã–∫', options: ['en', 'de', 'es', 'fr', 'pt'], default: 'en' }
                }
            },
            'cat_api': {
                category: 'integrations',
                name: '–°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫',
                description: '–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Cat API',
                icon: 'üê±',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    breed: { type: 'text', label: '–ü–æ—Ä–æ–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', default: '' },
                    limit: { type: 'number', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ', default: 1 }
                }
            },
            'webhook_sender': {
                category: 'integrations',
                name: 'Webhook',
                description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ webhook URL',
                icon: 'üîó',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    webhook_url: { type: 'text', label: 'URL webhook', default: '' },
                    method: { type: 'select', label: 'HTTP –º–µ—Ç–æ–¥', options: ['POST', 'PUT', 'PATCH'], default: 'POST' },
                    payload: { type: 'textarea', label: '–î–∞–Ω–Ω—ã–µ (JSON)', default: '{"message": "{message_text}", "user_id": "{user_id}"}' },
                    secret: { type: 'text', label: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á', default: '' }
                }
            },
            'scheduler': {
                category: 'integrations',
                name: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫',
                description: '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
                icon: '‚è∞',
                inputs: ['input'],
                outputs: ['scheduled', 'error'],
                config: {
                    schedule_type: { type: 'select', label: '–¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', options: ['once', 'daily', 'weekly', 'monthly'], default: 'once' },
                    datetime: { type: 'text', label: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (YYYY-MM-DD HH:MM)', default: '' },
                    timezone: { type: 'text', label: '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', default: 'Europe/Moscow' },
                    action_data: { type: 'textarea', label: '–î–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (JSON)', default: '{}' }
                }
            },
            'notification_sender': {
                category: 'integrations',
                name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã',
                icon: 'üîî',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    service: { type: 'select', label: '–°–µ—Ä–≤–∏—Å', options: ['telegram', 'email', 'slack', 'discord'], default: 'telegram' },
                    recipient: { type: 'text', label: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å', default: '' },
                    title: { type: 'text', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', default: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞' },
                    message: { type: 'textarea', label: '–°–æ–æ–±—â–µ–Ω–∏–µ', default: '{message_text}' },
                    priority: { type: 'select', label: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', options: ['low', 'normal', 'high'], default: 'normal' }
                }
            },
            'crypto_api': {
                category: 'integrations',
                name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
                description: '–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ CoinGecko API',
                icon: '‚Çø',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    coin_id: { type: 'text', label: 'ID –º–æ–Ω–µ—Ç—ã', default: 'bitcoin' },
                    vs_currency: { type: 'select', label: '–í–∞–ª—é—Ç–∞', options: ['usd', 'eur', 'rub', 'btc', 'eth'], default: 'usd' },
                    include_24hr_change: { type: 'checkbox', label: '–í–∫–ª—é—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á', default: true }
                }
            },
            'github_api': {
                category: 'integrations',
                name: 'GitHub',
                description: '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö —á–µ—Ä–µ–∑ GitHub API',
                icon: 'üêô',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    username: { type: 'text', label: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', default: '' },
                    repository: { type: 'text', label: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è', default: '' },
                    action: { type: 'select', label: '–î–µ–π—Å—Ç–≤–∏–µ', options: ['user_info', 'repo_info', 'user_repos', 'repo_commits'], default: 'repo_info' },
                    token: { type: 'text', label: 'GitHub Token (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', default: '' }
                }
            },
            'wikipedia_api': {
                category: 'integrations',
                name: '–í–∏–∫–∏–ø–µ–¥–∏—è',
                description: '–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏',
                icon: 'üìñ',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    query: { type: 'text', label: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', default: '{message_text}' },
                    language: { type: 'select', label: '–Ø–∑—ã–∫', options: ['ru', 'en', 'de', 'fr', 'es', 'it'], default: 'ru' },
                    sentences: { type: 'number', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', default: 3 }
                }
            },
            'youtube_api': {
                category: 'integrations',
                name: 'YouTube',
                description: '–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube —á–µ—Ä–µ–∑ API',
                icon: 'üì∫',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    api_key: { type: 'text', label: 'YouTube API –∫–ª—é—á', default: '' },
                    query: { type: 'text', label: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', default: '{message_text}' },
                    max_results: { type: 'number', label: '–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', default: 5 },
                    order: { type: 'select', label: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', options: ['relevance', 'date', 'rating', 'viewCount'], default: 'relevance' }
                }
            },
            'rss_parser': {
                category: 'integrations',
                name: 'RSS –ø–∞—Ä—Å–µ—Ä',
                description: '–ü–∞—Ä—Å–∏—Ç RSS –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –±–ª–æ–≥–æ–≤',
                icon: 'üì°',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    rss_url: { type: 'text', label: 'URL RSS –ª–µ–Ω—Ç—ã', default: 'https://example.com/rss.xml' },
                    max_items: { type: 'number', label: '–ú–∞–∫—Å–∏–º—É–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤', default: 5 },
                    include_content: { type: 'checkbox', label: '–í–∫–ª—é—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ', default: false }
                }
            },
            'ip_geolocation': {
                category: 'integrations',
                name: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ IP',
                description: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP –∞–¥—Ä–µ—Å—É',
                icon: 'üåç',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    ip_address: { type: 'text', label: 'IP –∞–¥—Ä–µ—Å', default: '{user_ip}' },
                    fields: { type: 'text', label: '–ü–æ–ª—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', default: 'country,city,timezone' }
                }
            },
            'shorturl_api': {
                category: 'integrations',
                name: '–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫',
                description: '–°–æ–∫—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ URL —á–µ—Ä–µ–∑ TinyURL –∏–ª–∏ bit.ly',
                icon: 'üîó',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    service: { type: 'select', label: '–°–µ—Ä–≤–∏—Å', options: ['tinyurl', 'bitly', 'shortio'], default: 'tinyurl' },
                    long_url: { type: 'text', label: '–î–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞', default: '{message_text}' },
                    api_key: { type: 'text', label: 'API –∫–ª—é—á (–¥–ª—è bit.ly)', default: '' }
                }
            },
            'ai_chat': {
                category: 'integrations',
                name: 'AI –ß–∞—Ç',
                description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI —Å–µ—Ä–≤–∏—Å–∞–º–∏ (OpenAI, Claude, etc.)',
                icon: 'ü§ñ',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    service: { type: 'select', label: 'AI –°–µ—Ä–≤–∏—Å', options: ['openai', 'claude', 'gemini', 'local'], default: 'openai' },
                    api_key: { type: 'text', label: 'API –∫–ª—é—á', default: '' },
                    model: { type: 'text', label: '–ú–æ–¥–µ–ª—å', default: 'gpt-3.5-turbo' },
                    prompt: { type: 'textarea', label: '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç', default: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.' },
                    message: { type: 'textarea', label: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', default: '{message_text}' },
                    max_tokens: { type: 'number', label: '–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤', default: 150 }
                }
            },
            'image_generator': {
                category: 'integrations',
                name: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI (DALL-E, Midjourney API)',
                icon: 'üé®',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    service: { type: 'select', label: '–°–µ—Ä–≤–∏—Å', options: ['dalle', 'stable_diffusion', 'midjourney'], default: 'dalle' },
                    api_key: { type: 'text', label: 'API –∫–ª—é—á', default: '' },
                    prompt: { type: 'textarea', label: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', default: '{message_text}' },
                    size: { type: 'select', label: '–†–∞–∑–º–µ—Ä', options: ['256x256', '512x512', '1024x1024'], default: '512x512' },
                    style: { type: 'select', label: '–°—Ç–∏–ª—å', options: ['natural', 'vivid', 'artistic'], default: 'natural' }
                }
            },
            'email_sender': {
                category: 'integrations',
                name: '–û—Ç–ø—Ä–∞–≤–∫–∞ Email',
                description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ SMTP –∏–ª–∏ —Å–µ—Ä–≤–∏—Å—ã (SendGrid, Mailgun)',
                icon: 'üìß',
                inputs: ['input'],
                outputs: ['success', 'error'],
                config: {
                    service: { type: 'select', label: '–°–µ—Ä–≤–∏—Å', options: ['smtp', 'sendgrid', 'mailgun'], default: 'smtp' },
                    api_key: { type: 'text', label: 'API –∫–ª—é—á', default: '' },
                    to_email: { type: 'text', label: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å', default: '' },
                    subject: { type: 'text', label: '–¢–µ–º–∞', default: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞' },
                    body: { type: 'textarea', label: '–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞', default: '{message_text}' },
                    from_email: { type: 'text', label: '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', default: 'bot@example.com' }
                }
            },
            'database_external': {
                category: 'integrations',
                name: '–í–Ω–µ—à–Ω—è—è –ë–î',
                description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–∏–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö (MySQL, PostgreSQL, MongoDB)',
                icon: 'üóÉÔ∏è',
                inputs: ['input'],
                outputs: ['success', 'error', 'empty'],
                config: {
                    db_type: { type: 'select', label: '–¢–∏–ø –ë–î', options: ['mysql', 'postgresql', 'mongodb', 'sqlite'], default: 'mysql' },
                    connection_string: { type: 'text', label: '–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', default: '' },
                    query: { type: 'textarea', label: 'SQL –∑–∞–ø—Ä–æ—Å', default: 'SELECT * FROM users LIMIT 10' },
                    parameters: { type: 'textarea', label: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã (JSON)', default: '{}' }
                }
            }
        };
    }

    initializeCategories() {
        return {
            'triggers': {
                name: '–¢—Ä–∏–≥–≥–µ—Ä—ã',
                icon: '‚ö°',
                description: '–°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞',
                color: '#4caf50'
            },
            'conditions': {
                name: '–£—Å–ª–æ–≤–∏—è',
                icon: '‚ùì',
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã',
                color: '#ff9800'
            },
            'actions': {
                name: '–î–µ–π—Å—Ç–≤–∏—è',
                icon: 'üéØ',
                description: '–î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–æ—Ç',
                color: '#2196f3'
            },
            'data': {
                name: '–î–∞–Ω–Ω—ã–µ',
                icon: 'üíæ',
                description: '–†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
                color: '#9c27b0'
            },
            'integrations': {
                name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
                icon: 'üîó',
                description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
                color: '#607d8b'
            }
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∑–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    getNodesByCategory(category) {
        const cacheKey = `${category}_${this.currentComplexityLevel || 'all'}`;
        
        if (this.cache.nodesByCategory.has(cacheKey)) {
            return this.cache.nodesByCategory.get(cacheKey);
        }

        const nodes = [];
        for (const [type, nodeData] of Object.entries(this.nodeTypes)) {
            if (nodeData.category === category) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–∑–ª–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                if (this.isNodeAllowed(type)) {
                    nodes.push({
                        type: type,
                        ...nodeData
                    });
                }
            }
        }
        
        this.cache.nodesByCategory.set(cacheKey, nodes);
        return nodes;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–∑–ª–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    isNodeAllowed(nodeType) {
        if (!window.complexityLevelSwitcher) {
            return true; // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
        }
        
        return window.complexityLevelSwitcher.isNodeTypeAllowed(nodeType);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    getCategories() {
        return this.categories;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ —É–∑–ª–∞
    getNodeType(type) {
        return this.nodeTypes[type] || null;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É–∑–ª–∞


    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∑–ª–∞
    validateNodeConfig(type, config) {
        const nodeType = this.getNodeType(type);
        if (!nodeType) {
            return { valid: false, errors: [`Unknown node type: ${type}`] };
        }

        const errors = [];

        for (const [key, field] of Object.entries(nodeType.config)) {
            const value = config[key];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (field.required && (value === undefined || value === null || value === '')) {
                errors.push(`Field '${key}' is required`);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
            if (value !== undefined && value !== null) {
                switch (field.type) {
                    case 'number':
                        if (isNaN(Number(value))) {
                            errors.push(`Field '${key}' must be a number`);
                        }
                        break;
                    case 'select':
                        if (field.options && !field.options.includes(value)) {
                            errors.push(`Field '${key}' must be one of: ${field.options.join(', ')}`);
                        }
                        break;
                }
            }
        }

        return {
            valid: errors.length === 0,
            errors: errors
        };
    }


    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —É–∑–ª–æ–≤
     */
    getAllNodeTypes() {
        return Object.keys(this.nodeTypes).map(type => ({
            type,
            ...this.nodeTypes[type]
        }));
    }



    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —É–∑–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getNodeTypesByCategory(category) {
        return Object.keys(this.nodeTypes)
            .filter(type => this.nodeTypes[type].category === category)
            .map(type => ({ type, ...this.nodeTypes[type] }));
    }

    /**
     * –ü–æ–∏—Å–∫ —É–∑–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
     */
    searchNodes(query) {
        if (!query || query.trim() === '') {
            return this.getAllNodeTypes();
        }

        const searchTerm = query.toLowerCase().trim();
        const results = [];

        Object.entries(this.searchIndex).forEach(([type, searchText]) => {
            if (searchText.includes(searchTerm)) {
                const node = this.getNodeType(type);
                if (node) {
                    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    let relevance = 0;
                    if (node.name.toLowerCase().includes(searchTerm)) relevance += 10;
                    if (node.type.toLowerCase().includes(searchTerm)) relevance += 8;
                    if (node.description.toLowerCase().includes(searchTerm)) relevance += 5;
                    if (node.category.toLowerCase().includes(searchTerm)) relevance += 3;

                    results.push({ ...node, relevance });
                }
            }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        return results.sort((a, b) => b.relevance - a.relevance);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∑–ª–∞
     */
    createNodeInstance(type, config = {}) {
        const nodeType = this.getNodeType(type);
        if (!nodeType) {
            throw new Error(`Unknown node type: ${type}`);
        }

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —É–∑–µ–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultConfig = {};
        if (nodeType.config) {
            Object.entries(nodeType.config).forEach(([key, field]) => {
                defaultConfig[key] = field.default;
            });
        }

        const nodeConfig = { ...defaultConfig, ...config };
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä BaseNode
        const node = new BaseNode(null, type, nodeType.category, nodeConfig);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã
        if (nodeType.inputs) {
            nodeType.inputs.forEach(input => {
                node.addInput(input, 'any', false);
            });
        }
        
        if (nodeType.outputs) {
            nodeType.outputs.forEach(output => {
                node.addOutput(output, 'any');
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        node.displayName = nodeType.name;
        node.description = nodeType.description;
        node.icon = nodeType.icon;

        return node;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–∑–ª–∞
     */
    validateNodeConfig(type, config) {
        const nodeType = this.getNodeType(type);
        if (!nodeType) {
            return { isValid: false, errors: [`Unknown node type: ${type}`] };
        }

        const errors = [];
        
        if (nodeType.config) {
            Object.entries(nodeType.config).forEach(([key, field]) => {
                const value = config[key];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if (field.required && (value === undefined || value === null || value === '')) {
                    errors.push(`Field '${field.label}' is required`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
                if (value !== undefined && value !== null) {
                    switch (field.type) {
                        case 'number':
                            if (isNaN(Number(value))) {
                                errors.push(`Field '${field.label}' must be a number`);
                            }
                            break;
                        case 'select':
                            if (field.options && !field.options.includes(value)) {
                                errors.push(`Field '${field.label}' must be one of: ${field.options.join(', ')}`);
                            }
                            break;
                        case 'checkbox':
                            if (typeof value !== 'boolean') {
                                errors.push(`Field '${field.label}' must be a boolean`);
                            }
                            break;
                    }
                }
            });
        }

        return {
            isValid: errors.length === 0,
            errors
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∑–ª–æ–≤
     */
    getCategories() {
        return this.categories;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    getCategoryStats() {
        const stats = {};
        
        this.categories.forEach(category => {
            stats[category.id] = {
                ...category,
                nodeCount: this.getNodeTypesByCategory(category.id).length
            };
        });

        return stats;
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤ JSON
     */
    exportLibrary() {
        return {
            version: '1.0.0',
            categories: this.categories,
            nodeTypes: this.nodeTypes,
            metadata: {
                totalNodes: Object.keys(this.nodeTypes).length,
                totalCategories: this.categories.length,
                exportedAt: new Date().toISOString()
            }
        };
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–∑ JSON
     */
    importLibrary(libraryData) {
        if (!libraryData.nodeTypes || !libraryData.categories) {
            throw new Error('Invalid library format');
        }

        this.nodeTypes = { ...this.nodeTypes, ...libraryData.nodeTypes };
        this.categories = libraryData.categories;
        this.buildSearchIndex();
        
        console.log(`üìö Imported library: ${Object.keys(libraryData.nodeTypes).length} node types`);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–ø —É–∑–ª–∞
     */
    addCustomNodeType(type, definition) {
        if (this.nodeTypes[type]) {
            console.warn(`‚ö†Ô∏è Node type '${type}' already exists, overwriting`);
        }

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const requiredFields = ['category', 'name', 'description', 'inputs', 'outputs'];
        const missingFields = requiredFields.filter(field => !definition[field]);
        
        if (missingFields.length > 0) {
            throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
        }

        this.nodeTypes[type] = definition;
        this.buildSearchIndex();
        
        console.log(`‚ûï Added custom node type: ${type}`);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ç–∏–ø —É–∑–ª–∞
     */
    removeNodeType(type) {
        if (!this.nodeTypes[type]) {
            console.warn(`‚ö†Ô∏è Node type '${type}' does not exist`);
            return false;
        }

        delete this.nodeTypes[type];
        this.buildSearchIndex();
        
        console.log(`‚ûñ Removed node type: ${type}`);
        return true;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    getRecommendations(context = {}) {
        const recommendations = [];
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (context.category) {
            const categoryNodes = this.getNodeTypesByCategory(context.category);
            recommendations.push(...categoryNodes.slice(0, 3));
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
        if (context.recentNodes && context.recentNodes.length > 0) {
            const recentCategories = context.recentNodes.map(node => 
                this.getNodeType(node)?.category
            ).filter(Boolean);
            
            const uniqueCategories = [...new Set(recentCategories)];
            uniqueCategories.forEach(category => {
                const nodes = this.getNodeTypesByCategory(category);
                recommendations.push(...nodes.slice(0, 2));
            });
        }
        
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É–∑–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (recommendations.length === 0) {
            const popularNodes = [
                'send_message', 'text_check', 'command', 
                'save_variable', 'http_request'
            ];
            
            popularNodes.forEach(type => {
                const node = this.getNodeType(type);
                if (node) recommendations.push(node);
            });
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const uniqueRecommendations = recommendations.filter((node, index, arr) => 
            arr.findIndex(n => n.type === node.type) === index
        );
        
        return uniqueRecommendations.slice(0, 8);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —É–∑–ª—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    getCompatibleNodes(sourceNodeType, outputPort) {
        const sourceNode = this.getNodeType(sourceNodeType);
        if (!sourceNode || !sourceNode.outputs[outputPort]) {
            return [];
        }

        const outputType = sourceNode.outputs[outputPort];
        const compatibleNodes = [];

        Object.entries(this.nodeTypes).forEach(([type, node]) => {
            if (node.inputs && node.inputs.length > 0) {
                const hasCompatibleInput = node.inputs.some(input => 
                    input === 'any' || outputType === 'any' || input === outputType
                );
                
                if (hasCompatibleInput) {
                    compatibleNodes.push({ type, ...node });
                }
            }
        });

        return compatibleNodes;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
let nodeLibrary = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        nodeLibrary = new NodeLibrary();
        nodeLibrary.init();
        console.log('üöÄ NodeLibrary –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NodeLibrary;
}