/**
 * Bot Constructor - –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞
 */

class BotConstructor {
    constructor() {
        this.apiUrl = '/api';
        this.currentBot = null;
        this.nodes = new Map();
        this.connections = [];
        this.currentView = 'dashboard';
        this.selectedNode = null;
        this.init();
    }

    init() {
        console.log('üöÄ Bot Constructor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.setupEventListeners();
        this.loadDashboardData();
        this.initCanvas();
    }

    setupEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
        window.backToDashboard = () => {
            console.log('üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—à–±–æ—Ä–¥—É');
            if (window.botConstructor) {
                window.botConstructor.currentBot = null;
                window.botConstructor.showView('dashboard');
            }
        };
        window.editBot = (botId) => this.editBot(botId);
        window.createNewBot = () => this.createNewBot();
        window.saveBotSchema = () => this.saveBotSchema();
        window.testBot = () => this.testBot();
        window.showGeneratedCode = () => this.showCodeModal();
        window.validateCurrentSchema = () => this.validateSchema();
        window.showTab = (tabName) => this.showTab(tabName);
        window.copyCode = () => this.copyCode();
        window.closeCodeModal = () => this.closeCodeModal();

        // Drag & Drop –¥–ª—è —É–∑–ª–æ–≤
        this.setupDragDrop();
    }


    // === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–•–ï–ú–´ ===
    forceDisplaySchema() {
        console.log('üé® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ö–µ–º—ã...');
        
        const canvas = document.getElementById('editorCanvas');
        if (!canvas) {
            console.error('‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
        if (!this.currentBot) {
            console.warn('‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –±–æ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.drawEmptySchema(ctx);
            return;
        }
        
        if (!this.currentBot.configuration || !this.currentBot.configuration.nodes) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            this.drawEmptySchema(ctx);
            return;
        }
        
        const nodes = this.currentBot.configuration.nodes;
        console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${nodes.length} –Ω–æ–¥–æ–≤`);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–¥
        nodes.forEach((node, index) => {
            console.log(`–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–æ–¥—ã ${index + 1}: ${node.id} (${node.type})`);
            this.drawNode(ctx, node, index);
        });
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤—è–∑–∏
        this.drawConnections(ctx);
        
        console.log('‚úÖ –°—Ö–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞');
    }
    
    drawNode(ctx, node, index) {
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–æ–¥—ã
        let x = node.position?.x || (50 + (index % 4) * 180);
        let y = node.position?.y || (50 + Math.floor(index / 4) * 120);
        
        // –†–∞–∑–º–µ—Ä—ã –Ω–æ–¥—ã
        const width = 150;
        const height = 80;
        
        // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const colors = {
            'trigger': '#e3f2fd',
            'action': '#f3e5f5', 
            'condition': '#fff3e0'
        };
        const bgColor = colors[node.type] || '#f5f5f5';
        
        // –†–∏—Å—É–µ–º —Ñ–æ–Ω –Ω–æ–¥—ã
        ctx.fillStyle = bgColor;
        ctx.fillRect(x, y, width, height);
        
        // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, width, height);
        
        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        ctx.fillStyle = '#000';
        ctx.font = 'bold 12px Arial';
        ctx.textAlign = 'center';
        
        // ID –Ω–æ–¥—ã
        ctx.fillText(node.id || 'Unknown', x + width/2, y + 25);
        
        // –¢–∏–ø –Ω–æ–¥—ã
        ctx.font = '10px Arial';
        ctx.fillText(`[${node.type || 'unknown'}]`, x + width/2, y + 45);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (node.data?.command) {
            ctx.fillText(node.data.command, x + width/2, y + 65);
        } else if (node.data?.actionType) {
            ctx.fillText(node.data.actionType, x + width/2, y + 65);
        }
    }
    
    getNodeColor(type) {
        const colors = {
            'trigger': '#e3f2fd',
            'action': '#f3e5f5', 
            'condition': '#fff3e0',
            'default': '#f5f5f5'
        };
        return colors[type] || colors.default;
    }
    
    drawConnections(ctx) {
        if (!this.currentBot?.configuration?.nodes) return;
        
        ctx.strokeStyle = '#666';
        ctx.lineWidth = 2;
        
        this.currentBot.configuration.nodes.forEach((node, index) => {
            const fromX = (node.position?.x || (100 + index * 150)) + 60;
            const fromY = (node.position?.y || (100 + Math.floor(index / 4) * 100)) + 60;
            
            if (node.connections && Array.isArray(node.connections)) {
                node.connections.forEach(targetId => {
                    const targetIndex = this.currentBot.configuration.nodes.findIndex(n => n.id === targetId);
                    if (targetIndex >= 0) {
                        const toX = (this.currentBot.configuration.nodes[targetIndex].position?.x || (100 + targetIndex * 150)) + 60;
                        const toY = (this.currentBot.configuration.nodes[targetIndex].position?.y || (100 + Math.floor(targetIndex / 4) * 100));
                        
                        ctx.beginPath();
                        ctx.moveTo(fromX, fromY);
                        ctx.lineTo(toX, toY);
                        ctx.stroke();
                    }
                });
            }
        });
    }
    
    drawEmptySchema(ctx) {
        ctx.fillStyle = '#f0f0f0';
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        
        ctx.fillStyle = '#666';
        ctx.font = '18px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–°—Ö–µ–º–∞ –±–æ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∑–¥–µ—Å—å', ctx.canvas.width / 2, ctx.canvas.height / 2 - 20);
        ctx.fillText('–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —É–∑–ª—ã –∏–∑ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏', ctx.canvas.width / 2, ctx.canvas.height / 2 + 20);
    }

        // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ê–ú–ò ===
    showView(viewName) {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥: ${viewName}`);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ showView:', {
            viewName,
            currentBot: this.currentBot?.name,
            nodesCount: this.currentBot?.configuration?.nodes?.length
        });
        
        try {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥—ã
            document.querySelectorAll('.view').forEach(view => {
                view.classList.remove('active');
                view.style.display = 'none';
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –≤–∏–¥
            const viewElement = document.getElementById(`${viewName}-view`);
            if (viewElement) {
                viewElement.classList.add('active');
                viewElement.style.display = 'block';
                console.log(`‚úÖ –í–∏–¥ ${viewName} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
            } else {
                console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${viewName}-view –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }
            
            this.currentView = viewName;

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            if (viewName === 'constructor') {
                setTimeout(() => {
                    this.initCanvas();
                    this.displayBotSchema();
                    this.setupDragDrop();
                }, 100);
            }
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            if (viewName === 'dashboard') {
                this.loadDashboardData();
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∏–¥–∞ ${viewName}:`, error);
        }
    }

    // === –î–ê–®–ë–û–†–î ===
    async loadDashboardData() {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...');
        try {
            await Promise.all([
                this.loadStats(),
                this.loadBots()
            ]);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
            this.showFallbackDashboard();
        }
    }

    showFallbackDashboard() {
        console.log('üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –¥–∞—à–±–æ—Ä–¥');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalBotsEl = document.getElementById('totalBots');
        const activeBotsEl = document.getElementById('activeBots');
        const totalMessagesEl = document.getElementById('totalMessages');
        const totalUsersEl = document.getElementById('totalUsers');
        
        if (totalBotsEl) totalBotsEl.textContent = '0';
        if (activeBotsEl) activeBotsEl.textContent = '0';
        if (totalMessagesEl) totalMessagesEl.textContent = '0';
        if (totalUsersEl) totalUsersEl.textContent = '0';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç–æ–≤ –Ω–µ—Ç
        const container = document.getElementById('botsContainer');
        if (container) {
            container.innerHTML = `
                <div class="empty-state">
                    üì≠ –ë–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç<br>
                    <small>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"</small>
                </div>
            `;
        }
    }

    async loadStats() {
        console.log('üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        try {
            const response = await fetch(`${this.apiUrl}/stats/dashboard`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success) {
                const stats = data.data;
                const totalBotsEl = document.getElementById('totalBots');
                const activeBotsEl = document.getElementById('activeBots');
                const totalMessagesEl = document.getElementById('totalMessages');
                const totalUsersEl = document.getElementById('totalUsers');
                
                if (totalBotsEl) totalBotsEl.textContent = stats.totalBots || 0;
                if (activeBotsEl) activeBotsEl.textContent = stats.activeBots || 0;
                if (totalMessagesEl) totalMessagesEl.textContent = stats.messagesProcessed || 0;
                if (totalUsersEl) totalUsersEl.textContent = stats.totalUsers || 0;
                
                console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stats);
            } else {
                throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –≤–µ—Å—å –¥–∞—à–±–æ—Ä–¥
        }
    }

    async loadBots() {
        console.log('ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤...');
        const container = document.getElementById('botsContainer');
        if (!container) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä botsContainer –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        container.innerHTML = '<div class="loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤...</div>';

        try {
            const response = await fetch(`${this.apiUrl}/bots`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();

            if (data.success && data.data && data.data.bots) {
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.data.bots.length} –±–æ—Ç–æ–≤`);
                this.renderBots(data.data.bots);
            } else {
                console.log('üì≠ –ë–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                container.innerHTML = '<div class="empty-state">üì≠ –ë–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', error);
            container.innerHTML = `
                <div class="error-state">
                    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤<br>
                    <small>${error.message}</small><br>
                    <button class="btn btn-sm" onclick="window.botConstructor.loadBots()">üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            `;
            // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
    }

    renderBots(bots) {
        const container = document.getElementById('botsContainer');
        if (!container) return;
        
        if (bots.length === 0) {
            container.innerHTML = '<div class="empty-state">üì≠ –ë–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }

        container.innerHTML = bots.map(bot => `
            <div class="bot-card" onclick="editBot('${bot.id}')">
                <div class="bot-card-header">
                    <div>
                        <div class="bot-card-title">${bot.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
                        <span class="bot-status ${bot.status || 'inactive'}">${this.getStatusText(bot.status)}</span>
                    </div>
                </div>
                <div class="bot-description">
                    ${bot.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                </div>
                <div class="bot-actions">
                    <button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); editBot('${bot.id}')">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    getStatusText(status) {
        const statusMap = {
            'active': '–ê–∫—Ç–∏–≤–µ–Ω',
            'inactive': '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω', 
            'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫'
        };
        return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    // === –ö–û–ù–°–¢–†–£–ö–¢–û–† ===
    async editBot(botId) {
        console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞: ${botId}`);
        
        try {
            const response = await fetch(`${this.apiUrl}/bots/${botId}`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const responseData = await response.json();
            this.currentBot = responseData.data || responseData;
            console.log('üìä –ë–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', this.currentBot);
            console.log(`üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥–æ–≤: ${this.currentBot.configuration?.nodes?.length || 0}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const nameElement = document.getElementById('constructorBotName');
            const statusElement = document.getElementById('constructorBotStatus');
            
            if (nameElement) nameElement.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${this.currentBot.name}`;
            if (statusElement) {
                statusElement.textContent = this.currentBot.status;
                statusElement.className = `bot-status ${this.currentBot.status}`;
            }
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
            this.showView('constructor');
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ö–µ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                this.displayBotSchema();
            }, 300);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞:', error);
            this.showStatus(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞: ${error.message}`, 'error');
        }
    }

    loadBotIntoConstructor(bot) {
        console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:', bot.name);
        
        const nameEl = document.getElementById('constructorBotName');
        const statusEl = document.getElementById('constructorBotStatus');
        
        if (nameEl) {
            nameEl.textContent = bot.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        } else {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç constructorBotName –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (statusEl) {
            statusEl.textContent = this.getStatusText(bot.status);
        } else {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç constructorBotStatus –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        this.nodes.clear();
        this.connections = [];

        if (bot.configuration && bot.configuration.nodes) {
            bot.configuration.nodes.forEach(nodeData => {
                const node = {
                    id: nodeData.id,
                    type: nodeData.type,
                    x: nodeData.position ? nodeData.position.x : Math.random() * 400 + 100,
                    y: nodeData.position ? nodeData.position.y : Math.random() * 300 + 100,
                    config: nodeData.config || {}
                };
                this.nodes.set(node.id, node);
            });

            if (bot.configuration.connections) {
                this.connections = bot.configuration.connections;
            }
        }

        this.renderCanvas();
        this.generateCode();
    }

    // === CANVAS ===
    initCanvas() {
        const canvas = document.getElementById('editorCanvas');
        if (!canvas) return;

        const container = canvas.parentElement;
        canvas.width = Math.min(800, container.clientWidth - 40);
        canvas.height = Math.min(600, container.clientHeight - 40);

        canvas.addEventListener('click', (e) => this.onCanvasClick(e));
        canvas.addEventListener('drop', (e) => this.onCanvasDrop(e));
        canvas.addEventListener('dragover', (e) => e.preventDefault());

        this.renderCanvas();
    }

    renderCanvas() {
        const canvas = document.getElementById('editorCanvas');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = '#fafafa';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        this.drawGrid(ctx);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ö–µ–º—É
        if (this.currentBot && this.currentBot.configuration && this.currentBot.configuration.nodes) {
            this.displayBotSchema();
            return;
        }
        
        // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –Ω–æ–¥—ã –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        this.connections.forEach(conn => this.drawConnection(ctx, conn));
        this.nodes.forEach(node => this.drawNode(ctx, node));

        if (this.nodes.size === 0) {
            ctx.fillStyle = '#666';
            ctx.font = '16px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —É–∑–ª—ã —Å—é–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã', canvas.width / 2, canvas.height / 2);
        }
    }

    drawGrid(ctx) {
        const gridSize = 20;
        ctx.strokeStyle = '#e9ecef';
        ctx.lineWidth = 1;

        for (let x = 0; x <= ctx.canvas.width; x += gridSize) {
            ctx.beginPath();
            ctx.moveTo(x, 0);
            ctx.lineTo(x, ctx.canvas.height);
            ctx.stroke();
        }

        for (let y = 0; y <= ctx.canvas.height; y += gridSize) {
            ctx.beginPath();
            ctx.moveTo(0, y);
            ctx.lineTo(ctx.canvas.width, y);
            ctx.stroke();
        }
    }

    drawNode(ctx, node) {
        const nodeWidth = 120;
        const nodeHeight = 60;
        
        ctx.fillStyle = 'rgba(0,0,0,0.1)';
        ctx.fillRect(node.x + 2, node.y + 2, nodeWidth, nodeHeight);
        
        ctx.fillStyle = this.getNodeColor(node.type);
        ctx.fillRect(node.x, node.y, nodeWidth, nodeHeight);
        
        ctx.strokeStyle = node.id === this.selectedNode ? '#007bff' : '#ddd';
        ctx.lineWidth = node.id === this.selectedNode ? 3 : 1;
        ctx.strokeRect(node.x, node.y, nodeWidth, nodeHeight);
        
        ctx.fillStyle = 'white';
        ctx.font = 'bold 12px Arial';
        ctx.textAlign = 'center';
        
        const icon = this.getNodeIcon(node.type);
        const label = this.getNodeLabel(node.type);
        
        ctx.fillText(icon, node.x + nodeWidth/2, node.y + 25);
        ctx.fillText(label, node.x + nodeWidth/2, node.y + 45);
    }

    drawConnection(ctx, conn) {
        const fromNode = this.nodes.get(conn.from);
        const toNode = this.nodes.get(conn.to);
        
        if (!fromNode || !toNode) return;
        
        const fromX = fromNode.x + 120;
        const fromY = fromNode.y + 30;
        const toX = toNode.x;
        const toY = toNode.y + 30;
        
        ctx.strokeStyle = '#007bff';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(fromX, fromY);
        ctx.lineTo(toX, toY);
        ctx.stroke();
    }

    getNodeColor(type) {
        const colors = {
            'start': '#28a745',
            'command': '#007bff',
            'text': '#17a2b8',
            'message': '#ffc107',
            'keyboard': '#fd7e14',
            'photo': '#e83e8c',
            'condition': '#6f42c1',
            'delay': '#6c757d'
        };
        return colors[type] || '#6c757d';
    }

    getNodeIcon(type) {
        const icons = {
            'start': 'üöÄ',
            'command': '‚ö°',
            'text': 'üí¨',
            'message': 'üì§',
            'keyboard': '‚å®Ô∏è',
            'photo': 'üñºÔ∏è',
            'condition': '‚ùì',
            'delay': '‚è±Ô∏è'
        };
        return icons[type] || '‚ùì';
    }

    getNodeLabel(type) {
        const labels = {
            'start': '–°—Ç–∞—Ä—Ç',
            'command': '–ö–æ–º–∞–Ω–¥–∞',
            'text': '–¢–µ–∫—Å—Ç',
            'message': '–°–æ–æ–±—â–µ–Ω–∏–µ',
            'keyboard': '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
            'photo': '–§–æ—Ç–æ',
            'condition': '–£—Å–ª–æ–≤–∏–µ',
            'delay': '–ó–∞–¥–µ—Ä–∂–∫–∞'
        };
        return labels[type] || '–£–∑–µ–ª';
    }

    // === DRAG & DROP ===
    setupDragDrop() {
        console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop...');
        
        const nodeItems = document.querySelectorAll('.node-item');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${nodeItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .node-item`);
        
        nodeItems.forEach(item => {
            item.addEventListener('dragstart', (e) => {
                console.log('üéØ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è:', item.dataset.type);
                e.dataTransfer.setData('text/plain', item.dataset.type);
            });
        });
        
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
        if (nodeItems.length === 0) {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã .node-item –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É');
            setTimeout(() => this.setupDragDrop(), 1000);
        }
    }

    onCanvasDrop(e) {
        e.preventDefault();
        const nodeType = e.dataTransfer.getData('text/plain');
        
        if (!nodeType) {
            console.warn('‚ö†Ô∏è –¢–∏–ø —É–∑–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏ drop');
            return;
        }
        
        const rect = e.target.getBoundingClientRect();
        const x = e.clientX - rect.left - 60;
        const y = e.clientY - rect.top - 30;
        
        console.log(`üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞ ${nodeType} –≤ –ø–æ–∑–∏—Ü–∏—é (${x}, ${y})`);
        this.addNode(nodeType, x, y);
    }

    onCanvasClick(e) {
        const rect = e.target.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        let clickedNode = null;
        this.nodes.forEach((node, id) => {
            if (x >= node.x && x <= node.x + 120 && y >= node.y && y <= node.y + 60) {
                clickedNode = id;
            }
        });
        
        this.selectedNode = clickedNode;
        this.renderCanvas();
        
        if (clickedNode) {
            this.showNodeProperties(clickedNode);
        }
    }

    addNode(type, x, y) {
        const nodeId = 'node_' + Date.now();
        const node = {
            id: nodeId,
            type: type,
            x: Math.max(0, Math.min(x, 680)),
            y: Math.max(0, Math.min(y, 540)),
            config: this.getDefaultConfig(type)
        };
        
        this.nodes.set(nodeId, node);
        this.renderCanvas();
        this.generateCode();
    }

    getDefaultConfig(type) {
        const defaults = {
            'start': {},
            'command': { command: '/start' },
            'text': { pattern: '' },
            'message': { text: '–ü—Ä–∏–≤–µ—Ç!' },
            'keyboard': { buttons: [] },
            'photo': { url: '', caption: '' },
            'condition': { condition: '' },
            'delay': { duration: 1000 }
        };
        return defaults[type] || {};
    }

    // === –°–í–û–ô–°–¢–í–ê –£–ó–õ–û–í ===
    showNodeProperties(nodeId) {
        const node = this.nodes.get(nodeId);
        if (!node) return;
        
        const panel = document.getElementById('propertiesPanel');
        panel.innerHTML = this.generatePropertiesForm(node);
        this.showTab('properties');
    }

    generatePropertiesForm(node) {
        let form = `<h4>‚öôÔ∏è ${this.getNodeLabel(node.type)}</h4>`;
        
        switch (node.type) {
            case 'command':
                form += `
                    <label>–ö–æ–º–∞–Ω–¥–∞:</label>
                    <input type="text" value="${node.config.command || ''}" 
                           onchange="updateNodeConfig('${node.id}', 'command', this.value)">
                `;
                break;
                
            case 'message':
                form += `
                    <label>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</label>
                    <textarea onchange="updateNodeConfig('${node.id}', 'text', this.value)">${node.config.text || ''}</textarea>
                `;
                break;
                
            case 'condition':
                form += `
                    <label>–£—Å–ª–æ–≤–∏–µ:</label>
                    <input type="text" value="${node.config.condition || ''}" 
                           onchange="updateNodeConfig('${node.id}', 'condition', this.value)">
                `;
                break;
                
            case 'delay':
                form += `
                    <label>–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å):</label>
                    <input type="number" value="${node.config.duration || 1000}" 
                           onchange="updateNodeConfig('${node.id}', 'duration', parseInt(this.value))">
                `;
                break;
        }
        
        form += `
            <div style="margin-top: 1rem;">
                <button class="btn btn-danger btn-sm" onclick="deleteNode('${node.id}')">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É–∑–µ–ª
                </button>
            </div>
        `;
        
        return form;
    }

    // === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–î–ê ===
    generateCode() {
        if (!this.currentBot) return;
        
        const code = this.generateBotCode();
        const codeElement = document.getElementById('generatedCode');
        if (codeElement) {
            codeElement.textContent = code;
        } else {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç generatedCode –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    generateBotCode() {
        let code = `// –ö–æ–¥ –±–æ—Ç–∞: ${this.currentBot.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
        code += `// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n`;
        
        code += `const { Telegraf } = require('telegraf');\n`;
        code += `const bot = new Telegraf('${this.currentBot.token || 'YOUR_BOT_TOKEN'}');\n\n`;
        
        this.nodes.forEach(node => {
            code += this.generateNodeCode(node);
        });
        
        code += `\n// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n`;
        code += `bot.launch();\n`;
        code += `console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');\n`;
        
        return code;
    }

    generateNodeCode(node) {
        let code = '';
        
        switch (node.type) {
            case 'start':
                code += `bot.start((ctx) => {\n`;
                code += `    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');\n`;
                code += `});\n\n`;
                break;
                
            case 'command':
                const cmd = (node.config.command || '').replace('/', '');
                code += `bot.command('${cmd}', (ctx) => {\n`;
                code += `    console.log('–ö–æ–º–∞–Ω–¥–∞ ${cmd} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');\n`;
                code += `});\n\n`;
                break;
                
            case 'message':
                code += `// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${node.config.text}\n`;
                break;
        }
        
        return code;
    }

    // === –£–¢–ò–õ–ò–¢–´ ===
    showTab(tabName) {
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        document.querySelector(`[onclick="showTab('${tabName}')"]`).classList.add('active');
        document.getElementById(`${tabName}-tab`).classList.add('active');
    }

    showCodeModal() {
        const modal = document.getElementById('codeModal');
        const codeElement = document.getElementById('fullGeneratedCode');
        
        if (codeElement) {
            codeElement.textContent = this.generateBotCode();
        } else {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç fullGeneratedCode –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (modal) {
            modal.style.display = 'flex';
        } else {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç codeModal –Ω–µ –Ω–∞–π–¥–µ–Ω');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ alert –∫–∞–∫ fallback
            alert('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n\n' + this.generateBotCode());
        }
    }

    closeCodeModal() {
        const modal = document.getElementById('codeModal');
        if (modal) {
            modal.style.display = 'none';
        } else {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç codeModal –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    copyCode() {
        const code = document.getElementById('generatedCode').textContent;
        navigator.clipboard.writeText(code);
        alert('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
    }

    validateSchema() {
        if (this.nodes.size === 0) {
            alert('–°—Ö–µ–º–∞ –ø—É—Å—Ç–∞!');
            return;
        }
        alert('‚úÖ –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞!');
    }

    async saveBotSchema() {
        alert('üíæ –°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    }

    async testBot() {
        alert('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    }

    createNewBot() {
        console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...');
        
        try {
            const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞:');
            if (name) {
                this.currentBot = {
                    id: 'bot_' + Date.now(),
                    name: name,
                    status: 'draft'
                };
                
                console.log('‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω:', this.currentBot);
                this.loadBotIntoConstructor(this.currentBot);
                this.showView('constructor');
            } else {
                console.log('‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: ' + error.message);
        }
    }

    displayBotSchema() {
        console.log('üé® –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–æ—Ç–∞...');
        
        const canvas = document.getElementById('editorCanvas');
        if (!canvas) {
            console.error('‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        if (!this.currentBot || !this.currentBot.configuration || !this.currentBot.configuration.nodes) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º—ã');
            this.drawEmptySchema(ctx);
            return;
        }
        
        const nodes = this.currentBot.configuration.nodes;
        console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${nodes.length} –Ω–æ–¥–æ–≤`);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã
        nodes.forEach((node, index) => {
            this.drawSingleNode(ctx, node, index);
        });
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤—è–∑–∏
        this.drawNodeConnections(ctx, nodes);
    }
    
    drawSingleNode(ctx, node, index) {
        // –ü–æ–∑–∏—Ü–∏—è –Ω–æ–¥—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        const x = node.position?.x || (50 + (index % 4) * 180);
        const y = node.position?.y || (50 + Math.floor(index / 4) * 120);
        
        // –†–∞–∑–º–µ—Ä—ã –Ω–æ–¥—ã
        const width = 150;
        const height = 80;
        
        // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const colors = {
            'trigger': '#e3f2fd',
            'action': '#f3e5f5', 
            'condition': '#fff3e0'
        };
        ctx.fillStyle = colors[node.type] || '#f5f5f5';
        ctx.fillRect(x, y, width, height);
        
        // –†–∞–º–∫–∞
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, width, height);
        
        // –¢–µ–∫—Å—Ç - ID –Ω–æ–¥—ã
        ctx.fillStyle = '#000';
        ctx.font = 'bold 12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(node.id || 'Unknown', x + width/2, y + 25);
        
        // –¢–µ–∫—Å—Ç - —Ç–∏–ø –Ω–æ–¥—ã
        ctx.font = '10px Arial';
        ctx.fillText(`[${node.type}]`, x + width/2, y + 45);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (node.data?.command) {
            ctx.fillText(node.data.command, x + width/2, y + 65);
        } else if (node.data?.actionType) {
            ctx.fillText(node.data.actionType, x + width/2, y + 65);
        }
    }
    
    drawNodeConnections(ctx, nodes) {
        ctx.strokeStyle = '#666';
        ctx.lineWidth = 2;
        
        nodes.forEach((node, fromIndex) => {
            const fromX = (node.position?.x || (50 + (fromIndex % 4) * 180)) + 75;
            const fromY = (node.position?.y || (50 + Math.floor(fromIndex / 4) * 120)) + 80;
            
            if (node.connections) {
                let connections = [];
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã connections
                if (Array.isArray(node.connections)) {
                    connections = node.connections;
                } else if (typeof node.connections === 'object') {
                    // –î–ª—è condition –Ω–æ–¥–æ–≤
                    Object.values(node.connections).forEach(connArray => {
                        if (Array.isArray(connArray)) {
                            connections = connections.concat(connArray);
                        }
                    });
                }
                
                connections.forEach(targetId => {
                    const targetIndex = nodes.findIndex(n => n.id === targetId);
                    if (targetIndex >= 0) {
                        const targetNode = nodes[targetIndex];
                        const toX = (targetNode.position?.x || (50 + (targetIndex % 4) * 180)) + 75;
                        const toY = (targetNode.position?.y || (50 + Math.floor(targetIndex / 4) * 120));
                        
                        // –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É
                        ctx.beginPath();
                        ctx.moveTo(fromX, fromY);
                        ctx.lineTo(toX, toY);
                        ctx.stroke();
                        
                        // –†–∏—Å—É–µ–º –Ω–∞–∫–æ–Ω–µ—á–Ω–∏–∫ —Å—Ç—Ä–µ–ª–∫–∏
                        const angle = Math.atan2(toY - fromY, toX - fromX);
                        ctx.beginPath();
                        ctx.moveTo(toX, toY);
                        ctx.lineTo(toX - 10 * Math.cos(angle - Math.PI/6), toY - 10 * Math.sin(angle - Math.PI/6));
                        ctx.moveTo(toX, toY);
                        ctx.lineTo(toX - 10 * Math.cos(angle + Math.PI/6), toY - 10 * Math.sin(angle + Math.PI/6));
                        ctx.stroke();
                    }
                });
            }
        });
    }
    
    drawEmptySchema(ctx) {
        ctx.fillStyle = '#f0f0f0';
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        
        ctx.fillStyle = '#666';
        ctx.font = '18px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–°—Ö–µ–º–∞ –±–æ—Ç–∞ –ø—É—Å—Ç–∞', ctx.canvas.width / 2, ctx.canvas.height / 2 - 20);
        ctx.fillText('–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —É–∑–ª—ã –∏–∑ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏', ctx.canvas.width / 2, ctx.canvas.height / 2 + 20);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.updateNodeConfig = function(nodeId, key, value) {
    const node = window.botConstructor.nodes.get(nodeId);
    if (node) {
        node.config[key] = value;
        window.botConstructor.generateCode();
    }
};

window.deleteNode = function(nodeId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —É–∑–µ–ª?')) {
        window.botConstructor.nodes.delete(nodeId);
        window.botConstructor.renderCanvas();
        window.botConstructor.generateCode();
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.BotConstructor = BotConstructor;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
window.BotConstructor = BotConstructor;

document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot Constructor...');
    try {
        window.botConstructor = new BotConstructor();
        console.log('‚úÖ Bot Constructor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bot Constructor:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = 'position:fixed;top:10px;left:10px;background:red;color:white;padding:10px;z-index:9999;';
        errorDiv.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message;
        document.body.appendChild(errorDiv);
    }


}