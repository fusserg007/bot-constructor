#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
–ë–∞–∑–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
–î–∞—Ç–∞: 26.07.2025, 20:08:03
"""

import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional
from collections import defaultdict

import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
if not bot_token:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = telebot.TeleBot(bot_token)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, Dict[str, Any]] = defaultdict(lambda: {
    'message_count': 0,
    'last_activity': datetime.now(),
    'variables': {}
})

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
bot_variables = {
    'uptime': {
        'type': 'string',
        'defaultValue': '0 –º–∏–Ω—É—Ç'
    },
    'message_count': {
        'type': 'number',
        'defaultValue': 0
    },
    'user_count': {
        'type': 'number',
        'defaultValue': 0
    },
    'last_update': {
        'type': 'string',
        'defaultValue': '26.07.2025, 19:16:45'
    }
}

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
start_time = datetime.now()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    logger.info(f"üì® –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_state(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = replace_variables("""üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç.

‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞""", user_id)
        bot.send_message(
            chat_id, 
            message_text, 
            parse_mode='HTML'
        )
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['help'])
def handle_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    logger.info(f"üì® –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_state(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = replace_variables("""üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚úÖ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

<i>–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–æ–≤</i>""", user_id)
        bot.send_message(
            chat_id, 
            message_text, 
            parse_mode='HTML'
        )
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['status'])
def handle_status(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    logger.info(f"üì® –ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_state(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = replace_variables("""üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {{uptime}}
üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {{message_count}}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {{user_count}}

üîß –í–µ—Ä—Å–∏—è: 1.0.0
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {{last_update}}""", user_id)
        bot.send_message(
            chat_id, 
            message_text, 
            parse_mode='HTML'
        )
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /status: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def update_user_state(user_id: int) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state = user_states[user_id]
    state['message_count'] += 1
    state['last_activity'] = datetime.now()

def replace_variables(text: str, user_id: int) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ"""
    result = text
    
    # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for key, variable in bot_variables.items():
        placeholder = f"{{{{{key}}}}}"
        result = result.replace(placeholder, str(variable.get('defaultValue', '')))
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    state = user_states[user_id]
    result = result.replace('{{message_count}}', str(state['message_count']))
    result = result.replace('{{user_count}}', str(len(user_states)))
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    uptime = datetime.now() - start_time
    uptime_str = f"{uptime.days} –¥–Ω–µ–π {uptime.seconds // 3600} —á–∞—Å–æ–≤"
    result = result.replace('{{uptime}}', uptime_str)
    
    return result

def get_bot_stats() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    uptime = datetime.now() - start_time
    return {
        'total_users': len(user_states),
        'total_messages': sum(state['message_count'] for state in user_states.values()),
        'uptime_seconds': uptime.total_seconds(),
        'uptime_str': f"{uptime.days} –¥–Ω–µ–π {uptime.seconds // 3600} —á–∞—Å–æ–≤"
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_unknown_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"üí¨ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {config['name']}")
    logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {config['description']}")
    
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except KeyboardInterrupt:
        logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        bot.stop_polling()

if __name__ == '__main__':
    main()
