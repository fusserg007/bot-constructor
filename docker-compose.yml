version: '3.8'

services:
  bot-constructor:
    build: .
    container_name: bot-constructor-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - WEBHOOK_BASE_URL=${WEBHOOK_BASE_URL:-http://localhost:3000}
      - USE_POLLING=${USE_POLLING:-false}
    volumes:
      # Монтируем директории данных для персистентности
      - ./data/users:/app/data/users
      - ./data/bots:/app/data/bots
      - ./data/logs:/app/data/logs
      - ./data/visual_schemas:/app/data/visual_schemas
      # Монтируем конфигурационные файлы
      - ./data/templates:/app/data/templates:ro
    networks:
      - bot-constructor-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3000, path: '/api/health', timeout: 2000 }; const req = http.request(options, (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx для reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: bot-constructor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - bot-constructor
    networks:
      - bot-constructor-network
    profiles:
      - with-nginx

networks:
  bot-constructor-network:
    driver: bridge

volumes:
  bot-data:
    driver: local