/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { SchemaValidator } from './core/validation/SchemaValidator';
import { SchemaVersioning } from './core/versioning/SchemaVersioning';
import { DataMigration } from './core/migration/DataMigration';
import { BotSchema } from './core/types';

async function testDataMigration() {
    console.log('üîÑ Testing data migration and validation system...\n');

    // –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ö–µ–º—ã
    console.log('üìã Test 1: Validating correct schema...');
    const validSchema: BotSchema = {
        id: 'test-schema-1',
        name: 'Test Bot',
        nodes: [
            {
                id: 'trigger-1',
                type: 'trigger-command',
                category: 'triggers',
                position: { x: 100, y: 100 },
                data: {
                    label: 'Start Command',
                    config: { command: '/start' },
                    inputs: [],
                    outputs: [{
                        id: 'output',
                        name: '–í—ã—Ö–æ–¥',
                        type: 'control',
                        dataType: 'any',
                        required: false
                    }]
                }
            },
            {
                id: 'action-1',
                type: 'action-send-message',
                category: 'actions',
                position: { x: 400, y: 100 },
                data: {
                    label: 'Send Welcome',
                    config: { message: '–ü—Ä–∏–≤–µ—Ç!' },
                    inputs: [{
                        id: 'input',
                        name: '–í—Ö–æ–¥',
                        type: 'control',
                        dataType: 'any',
                        required: false
                    }],
                    outputs: []
                }
            }
        ],
        edges: [
            {
                id: 'edge-1',
                source: 'trigger-1',
                target: 'action-1'
            }
        ],
        variables: {},
        settings: {
            name: 'Test Bot',
            description: 'Test bot for validation',
            platforms: ['telegram'],
            mode: 'polling',
            variables: {}
        },
        version: '1.0.0',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };

    const validator = new SchemaValidator();
    const validationResult = validator.validateSchema(validSchema);

    console.log('‚úÖ Validation result:', {
        isValid: validationResult.isValid,
        errors: validationResult.errors.length,
        warnings: validationResult.warnings.length
    });

    if (validationResult.errors.length > 0) {
        console.log('‚ùå Errors:', validationResult.errors.map(e => e.message));
    }

    if (validationResult.warnings.length > 0) {
        console.log('‚ö†Ô∏è Warnings:', validationResult.warnings.map(w => w.message));
    }

    // –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ö–µ–º—ã
    console.log('\nüìã Test 2: Validating invalid schema...');
    const invalidSchema = {
        // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ id
        name: 'Invalid Bot',
        nodes: [
            {
                // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id —É–∑–ª–∞
                type: 'trigger-command',
                category: 'triggers',
                position: { x: 100, y: 100 }
                // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data
            }
        ],
        edges: [],
        variables: {},
        settings: {
            name: 'Invalid Bot',
            platforms: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º
            mode: 'invalid-mode' // –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º
        }
    } as any;

    const invalidResult = validator.validateSchema(invalidSchema);
    console.log('‚ùå Invalid schema result:', {
        isValid: invalidResult.isValid,
        errors: invalidResult.errors.length,
        warnings: invalidResult.warnings.length
    });

    console.log('Errors found:', invalidResult.errors.map(e => `${e.type}: ${e.message}`));

    // –¢–µ—Å—Ç 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Å—Ö–µ–º—ã
    console.log('\nüîç Test 3: Schema version detection...');

    const oldSchemaV1 = {
        id: 'old-bot',
        name: 'Old Bot',
        configuration: {
            nodes: [
                {
                    id: 'node1',
                    type: 'action',
                    data: { message: 'Hello' },
                    connections: ['node2']
                }
            ]
        }
    };

    const detectedVersion = SchemaVersioning.detectSchemaVersion(oldSchemaV1);
    console.log('üìä Detected version for old schema:', detectedVersion);

    const currentVersion = SchemaVersioning.getCurrentVersion();
    console.log('üìä Current version:', currentVersion);

    const needsMigration = SchemaVersioning.needsMigration(oldSchemaV1);
    console.log('üîÑ Needs migration:', needsMigration);

    // –¢–µ—Å—Ç 4: –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîÑ Test 4: Data migration...');

    if (needsMigration) {
        console.log('Starting migration from', detectedVersion, 'to', currentVersion);

        const migrationResult = await DataMigration.migrateToCurrentVersion(oldSchemaV1);

        console.log('Migration result:', {
            success: migrationResult.success,
            errors: migrationResult.errors.length,
            warnings: migrationResult.warnings.length
        });

        if (migrationResult.errors.length > 0) {
            console.log('Migration errors:', migrationResult.errors);
        }

        if (migrationResult.warnings.length > 0) {
            console.log('Migration warnings:', migrationResult.warnings);
        }

        if (migrationResult.success && migrationResult.migratedSchema) {
            console.log('‚úÖ Migration successful!');
            console.log('Migrated schema version:', migrationResult.migratedSchema.version);
            console.log('Migrated nodes count:', migrationResult.migratedSchema.nodes.length);
            console.log('Migrated edges count:', migrationResult.migratedSchema.edges.length);

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ö–µ–º—É
            const migratedValidation = validator.validateSchema(migrationResult.migratedSchema);
            console.log('Migrated schema validation:', {
                isValid: migratedValidation.isValid,
                errors: migratedValidation.errors.length,
                warnings: migratedValidation.warnings.length
            });
        }
    }

    // –¢–µ—Å—Ç 5: –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('\nüìã Test 5: Schema versioning...');

    const supportedVersions = SchemaVersioning.getSupportedVersions();
    console.log('Supported versions:', supportedVersions.map(v => v.version));

    const versionWarnings = SchemaVersioning.getVersionWarnings('0.1.0');
    console.log('Version 0.1.0 warnings:', versionWarnings);

    const canMigrate = DataMigration.canMigrate('0.1.0', '1.0.0');
    console.log('Can migrate 0.1.0 -> 1.0.0:', canMigrate);

    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
    console.log('\nüÜï Test 6: Creating new schema...');

    const newSchema = SchemaVersioning.createNewSchema({
        name: 'New Test Bot',
        nodes: [],
        edges: []
    });

    console.log('New schema created:', {
        id: newSchema.id,
        version: newSchema.version,
        platforms: newSchema.settings.platforms
    });

    const newSchemaValidation = validator.validateSchema(newSchema);
    console.log('New schema validation:', {
        isValid: newSchemaValidation.isValid,
        warnings: newSchemaValidation.warnings.length
    });

    console.log('\nüéâ Data migration and validation tests completed!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDataMigration().catch(console.error);