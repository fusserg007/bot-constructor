/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

import { initializeAdapters, getAdapterRegistry } from './core/adapters';
import { PollingManager } from './core/polling/PollingManager';

async function testIntegration() {
  console.log('üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤\n');

  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...');
    initializeAdapters();
    
    const registry = getAdapterRegistry();
    const pollingManager = PollingManager.getInstance();
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    const platforms = registry.getSupportedPlatforms();
    console.log(`\nüåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${platforms.join(', ')}`);

    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º:');
    
    const testResults: Record<string, boolean> = {};
    
    for (const platform of platforms) {
      try {
        console.log(`\n  üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${platform}...`);
        
        // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        const adapter = registry.createAdapter(platform);
        console.log(`    ‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        const capabilities = adapter.getCapabilities();
        console.log(`    üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:`);
        console.log(`      - Inline –∫–Ω–æ–ø–∫–∏: ${capabilities.supportsInlineButtons}`);
        console.log(`      - –ú–µ–¥–∏–∞: ${capabilities.supportsMedia}`);
        console.log(`      - –§–∞–π–ª—ã: ${capabilities.supportsFiles}`);
        console.log(`      - Webhooks: ${capabilities.supportsWebhooks}`);
        console.log(`      - Polling: ${capabilities.supportsPolling}`);
        console.log(`      - –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${capabilities.maxMessageLength}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º polling –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if (capabilities.supportsPolling) {
          console.log(`    ‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ polling...`);
          
          const adapterId = `test-${platform}-bot`;
          pollingManager.startPolling(adapterId, adapter, {
            interval: 5000,
            enabled: true,
            maxRetries: 1
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ polling –∞–∫—Ç–∏–≤–µ–Ω
          const isActive = pollingManager.isPollingActive(adapterId);
          console.log(`      Polling –∞–∫—Ç–∏–≤–µ–Ω: ${isActive}`);
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
          pollingManager.stopPolling(adapterId);
          console.log(`      Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        }
        
        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await adapter.dispose();
        console.log(`    üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã`);
        
        testResults[platform] = true;
        
      } catch (error) {
        console.error(`    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${platform}:`, error);
        testResults[platform] = false;
      }
    }

    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤:');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const adapters = platforms.map(platform => ({
        platform,
        adapter: registry.createAdapter(platform)
      }));
      
      console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${adapters.length} –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = registry.getStats();
      console.log(`  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞:`);
      console.log(`    - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${stats.totalRegistered}`);
      console.log(`    - –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.totalActive}`);
      console.log(`    - –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:`, stats.activeByPlatform);
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
      for (const { adapter } of adapters) {
        await adapter.dispose();
      }
      
      console.log(`  üßπ –í—Å–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã`);
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞:', error);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PollingManager
    console.log('\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PollingManager:');
    
    try {
      const overallStats = pollingManager.getOverallStats();
      console.log(`  üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ polling:`);
      console.log(`    - –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${overallStats.totalActive}`);
      console.log(`    - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${overallStats.totalRequests}`);
      console.log(`    - –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${overallStats.totalErrors}`);
      console.log(`    - –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:`, overallStats.platformStats);
      
      console.log(`  ‚úÖ PollingManager —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç`);
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PollingManager:', error);
    }

    // 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log('=' .repeat(50));
    
    const successfulPlatforms = Object.entries(testResults)
      .filter(([, success]) => success)
      .map(([platform]) => platform);
    
    const failedPlatforms = Object.entries(testResults)
      .filter(([, success]) => !success)
      .map(([platform]) => platform);
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${successfulPlatforms.join(', ') || '–Ω–µ—Ç'}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${failedPlatforms.join(', ') || '–Ω–µ—Ç'}`);
    
    console.log('\nüìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:');
    console.log('  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('  ‚úÖ –†–µ–µ—Å—Ç—Ä –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('  ‚úÖ PollingManager: —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('  ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    const successRate = (successfulPlatforms.length / platforms.length) * 100;
    console.log(`\nüéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${successRate.toFixed(1)}%`);
    
    if (successRate === 100) {
      console.log('\nüèÜ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é.');
    } else {
      console.log('\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testIntegration().catch(console.error);