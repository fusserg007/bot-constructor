/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ —Å Telegram API
 */

const fs = require('fs');
const path = require('path');

console.log('üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram API...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
const telegramToken = process.env.TELEGRAM_BOT_TOKEN;

if (!telegramToken) {
  console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  console.log('üìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram');
  console.log('   2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
  console.log('   3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: set TELEGRAM_BOT_TOKEN=your_token');
  console.log('   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç');
  console.log('\nüîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π...\n');
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
const botPath = path.join(__dirname, '..', 'data', 'bots', 'bot_simple-test-bot.json');
const botData = JSON.parse(fs.readFileSync(botPath, 'utf8'));

console.log(`ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞: ${botData.name}`);

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram API –∫–ª–∏–µ–Ω—Ç–∞
class TelegramBot {
  constructor(token) {
    this.token = token;
    this.apiUrl = `https://api.telegram.org/bot${token}`;
    this.isSimulation = !token || token === 'TEST_TOKEN';
    
    if (this.isSimulation) {
      console.log('üé≠ –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)');
    } else {
      console.log('üåê –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ API');
    }
  }
  
  async getMe() {
    if (this.isSimulation) {
      return {
        ok: true,
        result: {
          id: 123456789,
          is_bot: true,
          first_name: 'Test Bot',
          username: 'test_simple_bot',
          can_join_groups: true,
          can_read_all_group_messages: false,
          supports_inline_queries: false
        }
      };
    }
    
    try {
      const response = await fetch(`${this.apiUrl}/getMe`);
      return await response.json();
    } catch (error) {
      return { ok: false, error: error.message };
    }
  }
  
  async sendMessage(chatId, text, options = {}) {
    const message = {
      chat_id: chatId,
      text: text,
      parse_mode: options.parse_mode || 'HTML',
      ...options
    };
    
    if (this.isSimulation) {
      console.log(`üì§ [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`);
      console.log(`   –¢–µ–∫—Å—Ç: ${text.substring(0, 100)}${text.length > 100 ? '...' : ''}`);
      console.log(`   –†–µ–∂–∏–º: ${message.parse_mode}`);
      
      return {
        ok: true,
        result: {
          message_id: Math.floor(Math.random() * 1000000),
          from: { id: 123456789, is_bot: true, first_name: 'Test Bot' },
          chat: { id: chatId, type: 'private' },
          date: Math.floor(Date.now() / 1000),
          text: text
        }
      };
    }
    
    try {
      const response = await fetch(`${this.apiUrl}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(message)
      });
      return await response.json();
    } catch (error) {
      return { ok: false, error: error.message };
    }
  }
  
  async getUpdates(offset = 0) {
    if (this.isSimulation) {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const simulatedUpdates = [
        {
          update_id: 1,
          message: {
            message_id: 1,
            from: { id: 111111, is_bot: false, first_name: 'Test User' },
            chat: { id: 111111, type: 'private' },
            date: Math.floor(Date.now() / 1000),
            text: '/start'
          }
        },
        {
          update_id: 2,
          message: {
            message_id: 2,
            from: { id: 222222, is_bot: false, first_name: 'Another User' },
            chat: { id: 222222, type: 'private' },
            date: Math.floor(Date.now() / 1000),
            text: '/help'
          }
        },
        {
          update_id: 3,
          message: {
            message_id: 3,
            from: { id: 111111, is_bot: false, first_name: 'Test User' },
            chat: { id: 111111, type: 'private' },
            date: Math.floor(Date.now() / 1000),
            text: '/status'
          }
        }
      ];
      
      return {
        ok: true,
        result: simulatedUpdates.filter(u => u.update_id > offset)
      };
    }
    
    try {
      const response = await fetch(`${this.apiUrl}/getUpdates?offset=${offset}`);
      return await response.json();
    } catch (error) {
      return { ok: false, error: error.message };
    }
  }
}

// –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç —Å Telegram API
class TelegramBotIntegration {
  constructor(botSchema, telegramToken) {
    this.botSchema = botSchema;
    this.telegram = new TelegramBot(telegramToken);
    this.lastUpdateId = 0;
    this.isRunning = false;
    this.stats = {
      messagesReceived: 0,
      messagesSent: 0,
      errors: 0,
      startTime: new Date()
    };
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º runtime –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    this.loadRuntime();
  }
  
  loadRuntime() {
    // –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è runtime –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    this.nodes = new Map();
    this.edges = new Map();
    
    this.botSchema.configuration.nodes.forEach(node => {
      this.nodes.set(node.id, node);
    });
    
    this.botSchema.configuration.edges.forEach(edge => {
      if (!this.edges.has(edge.source)) {
        this.edges.set(edge.source, []);
      }
      this.edges.get(edge.source).push(edge);
    });
    
    console.log(`üîß Runtime –∑–∞–≥—Ä—É–∂–µ–Ω: ${this.nodes.size} —É–∑–ª–æ–≤, ${this.edges.size} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
  }
  
  async start() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const me = await this.telegram.getMe();
    if (!me.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: ${me.error}`);
    }
    
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: ${me.result.first_name} (@${me.result.username})`);
    console.log(`   ID: ${me.result.id}`);
    console.log(`   –ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: ${me.result.can_join_groups}`);
    
    this.isRunning = true;
    this.pollUpdates();
    
    return me.result;
  }
  
  async pollUpdates() {
    while (this.isRunning) {
      try {
        const updates = await this.telegram.getUpdates(this.lastUpdateId + 1);
        
        if (updates.ok && updates.result.length > 0) {
          for (const update of updates.result) {
            await this.processUpdate(update);
            this.lastUpdateId = update.update_id;
          }
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
        this.stats.errors++;
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
  }
  
  async processUpdate(update) {
    if (!update.message) return;
    
    const message = update.message;
    this.stats.messagesReceived++;
    
    console.log(`\nüì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.from.first_name} (${message.from.id}):`);
    console.log(`   –¢–µ–∫—Å—Ç: ${message.text}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageType = 'text';
    let messageText = message.text;
    
    if (message.text && message.text.startsWith('/')) {
      messageType = 'command';
    }
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–∏–≥–≥–µ—Ä
    const trigger = this.findTrigger(messageType, messageText);
    
    if (!trigger) {
      console.log('   ‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: ${trigger.data.label}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    const actions = this.edges.get(trigger.id) || [];
    
    for (const edge of actions) {
      const actionNode = this.nodes.get(edge.target);
      if (actionNode) {
        await this.executeAction(actionNode, message);
      }
    }
  }
  
  findTrigger(messageType, messageText) {
    for (const [nodeId, node] of this.nodes) {
      if (node.type === 'trigger-command' && messageType === 'command') {
        if (node.data.command === messageText) {
          return node;
        }
      } else if (node.type === 'trigger-message' && messageType === 'text') {
        return node;
      }
    }
    return null;
  }
  
  async executeAction(actionNode, message) {
    console.log(`   ‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${actionNode.data.label}`);
    
    if (actionNode.type === 'action-send-message') {
      let text = actionNode.data.text || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
      
      // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      text = text.replace(/{{message_count}}/g, this.stats.messagesReceived);
      text = text.replace(/{{user_count}}/g, '1'); // –£–ø—Ä–æ—â–µ–Ω–Ω–æ
      text = text.replace(/{{uptime}}/g, this.getUptime());
      text = text.replace(/{{last_update}}/g, new Date().toLocaleString('ru-RU'));
      
      const result = await this.telegram.sendMessage(
        message.chat.id,
        text,
        { parse_mode: actionNode.data.parseMode || 'HTML' }
      );
      
      if (result.ok) {
        console.log(`   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: ${result.result.message_id})`);
        this.stats.messagesSent++;
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.error}`);
        this.stats.errors++;
      }
    }
  }
  
  getUptime() {
    const uptimeMs = Date.now() - this.stats.startTime.getTime();
    const uptimeMinutes = Math.floor(uptimeMs / (1000 * 60));
    
    if (uptimeMinutes < 1) return '–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã';
    if (uptimeMinutes < 60) return `${uptimeMinutes} –º–∏–Ω—É—Ç`;
    
    const hours = Math.floor(uptimeMinutes / 60);
    return `${hours} —á–∞—Å–æ–≤ ${uptimeMinutes % 60} –º–∏–Ω—É—Ç`;
  }
  
  stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    this.isRunning = false;
  }
  
  getStats() {
    return {
      ...this.stats,
      uptime: this.getUptime(),
      isRunning: this.isRunning
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testTelegramIntegration() {
  try {
    const bot = new TelegramBotIntegration(botData, telegramToken);
    
    console.log('üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –£–∑–ª–æ–≤ –≤ —Å—Ö–µ–º–µ: ${botData.configuration.nodes.length}`);
    console.log(`   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${botData.configuration.edges.length}`);
    console.log(`   –ö–æ–º–∞–Ω–¥: ${botData.configuration.nodes.filter(n => n.type === 'trigger-command').length}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    const botInfo = await bot.start();
    
    console.log('\n‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...');
    
    // –î–∞–µ–º –±–æ—Ç—É –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    bot.stop();
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalStats = bot.getStats();
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${finalStats.messagesReceived}`);
    console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${finalStats.messagesSent}`);
    console.log(`   –û—à–∏–±–æ–∫: ${finalStats.errors}`);
    console.log(`   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${finalStats.uptime}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const testResults = {
      botId: botData.id,
      timestamp: new Date().toISOString(),
      telegramIntegration: {
        botInfo: botInfo,
        stats: finalStats,
        success: finalStats.errors === 0
      }
    };
    
    const resultsPath = path.join(__dirname, 'telegram-integration-test-results.json');
    fs.writeFileSync(resultsPath, JSON.stringify(testResults, null, 2));
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${resultsPath}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
    botData.stats.messagesProcessed += finalStats.messagesReceived;
    botData.stats.lastActivity = new Date().toISOString();
    botData.updatedAt = new Date().toISOString();
    
    if (telegramToken && telegramToken !== 'TEST_TOKEN') {
      botData.platforms[0].status = 'connected';
    }
    
    fs.writeFileSync(botPath, JSON.stringify(botData, null, 2));
    
    return testResults;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    return { success: false, error: error.message };
  }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è fetch –¥–ª—è Node.js
if (typeof fetch === 'undefined') {
  global.fetch = async (url, options = {}) => {
    const https = require('https');
    const http = require('http');
    const urlParsed = new URL(url);
    const client = urlParsed.protocol === 'https:' ? https : http;
    
    return new Promise((resolve, reject) => {
      const req = client.request(url, {
        method: options.method || 'GET',
        headers: options.headers || {}
      }, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          resolve({
            ok: res.statusCode >= 200 && res.statusCode < 300,
            status: res.statusCode,
            json: async () => JSON.parse(data),
            text: async () => data
          });
        });
      });
      
      req.on('error', reject);
      
      if (options.body) {
        req.write(options.body);
      }
      
      req.end();
    });
  };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTelegramIntegration().then(results => {
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  
  if (results.success !== false) {
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
    if (!telegramToken || telegramToken === 'TEST_TOKEN') {
      console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram:');
      console.log('   1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather');
      console.log('   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN');
      console.log('   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç');
      console.log('   4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É –≤ Telegram');
    }
  } else {
    console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫');
  }
  
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});