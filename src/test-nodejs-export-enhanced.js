/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js –∫–æ–¥
 */
const fs = require('fs');
const path = require('path');
const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (postData) {
      req.write(postData);
    }
    req.end();
  });
}

// –°—Ö–µ–º–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
const enhancedBotSchema = {
  id: "enhanced-test-bot",
  name: "Enhanced Test Bot",
  token: "ENHANCED_TOKEN_123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  description: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∞",
  status: "draft",
  platforms: [
    {
      platform: "telegram",
      enabled: true,
      credentials: {
        token: "TELEGRAM_TOKEN_123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      },
      mode: "polling",
      status: "disconnected"
    }
  ],
  configuration: {
    nodes: [
      // –ö–æ–º–∞–Ω–¥–∞ /start
      {
        id: "start-trigger",
        type: "trigger-command",
        position: { x: 100, y: 100 },
        data: {
          label: "Start Command",
          command: "/start",
          description: "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
          color: "#3b82f6"
        }
      },
      {
        id: "welcome-message",
        type: "action-send-message",
        position: { x: 400, y: 100 },
        data: {
          label: "Welcome Message",
          text: "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Enhanced Test Bot!\\n\\n–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:\\n\\n‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏\\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API\\n‚Ä¢ –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞\\n‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
          parseMode: "HTML",
          buttons: [
            [
              { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "stats" },
              { text: "üîó API —Ç–µ—Å—Ç", callback_data: "api_test" }
            ],
            [
              { text: "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data: "quiz" },
              { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "help" }
            ]
          ],
          color: "#10b981"
        }
      },
      
      // –ö–æ–º–∞–Ω–¥–∞ /stats
      {
        id: "stats-trigger",
        type: "trigger-command",
        position: { x: 100, y: 250 },
        data: {
          label: "Stats Command",
          command: "/stats",
          description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞",
          color: "#3b82f6"
        }
      },
      {
        id: "stats-message",
        type: "action-send-message",
        position: { x: 400, y: 250 },
        data: {
          label: "Stats Message",
          text: "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\\n\\nüë§ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {{message_count}}\\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {{user_count}}\\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {{uptime}}\\nüïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {{current_time}}\\n\\nüî¢ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {{random_number}}",
          parseMode: "HTML",
          color: "#f59e0b"
        }
      },
      
      // –ö–æ–º–∞–Ω–¥–∞ /api
      {
        id: "api-trigger",
        type: "trigger-command",
        position: { x: 100, y: 400 },
        data: {
          label: "API Command",
          command: "/api",
          description: "–¢–µ—Å—Ç API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
          color: "#3b82f6"
        }
      },
      {
        id: "api-integration",
        type: "action-integration",
        position: { x: 400, y: 400 },
        data: {
          label: "Random Fact API",
          url: "https://uselessfacts.jsph.pl/random.json?language=en",
          method: "GET",
          headers: {},
          responseMapping: {
            fact: "text",
            source: "source_url"
          },
          color: "#8b5cf6"
        }
      },
      {
        id: "api-response",
        type: "action-send-message",
        position: { x: 700, y: 400 },
        data: {
          label: "API Response",
          text: "üåê <b>–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:</b>\\n\\n{{random_fact_api_fact}}\\n\\nüîó <a href='{{random_fact_api_source}}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a>",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      {
        id: "text-handler",
        type: "trigger-message",
        position: { x: 100, y: 550 },
        data: {
          label: "Text Handler",
          description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
          color: "#ef4444"
        }
      },
      {
        id: "text-condition",
        type: "condition-text",
        position: { x: 400, y: 550 },
        data: {
          label: "Text Condition",
          conditions: [
            { type: "contains", value: "–ø—Ä–∏–≤–µ—Ç", caseSensitive: false },
            { type: "contains", value: "hello", caseSensitive: false }
          ],
          operator: "OR",
          color: "#f59e0b"
        }
      },
      {
        id: "greeting-response",
        type: "action-send-message",
        position: { x: 700, y: 500 },
        data: {
          label: "Greeting Response",
          text: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è.\\n\\n–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{{message_text}}\"\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π!",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      {
        id: "default-response",
        type: "action-send-message",
        position: { x: 700, y: 600 },
        data: {
          label: "Default Response",
          text: "ü§î –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{{message_text}}\"\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
          parseMode: "HTML",
          color: "#6b7280"
        }
      },
      
      // –ö–æ–º–∞–Ω–¥–∞ /help
      {
        id: "help-trigger",
        type: "trigger-command",
        position: { x: 100, y: 700 },
        data: {
          label: "Help Command",
          command: "/help",
          description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
          color: "#3b82f6"
        }
      },
      {
        id: "help-message",
        type: "action-send-message",
        position: { x: 400, y: 700 },
        data: {
          label: "Help Message",
          text: "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\\n\\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\n/api - –¢–µ—Å—Ç API\\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\\n\\n<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API\\n‚Ä¢ –ö–Ω–æ–ø–∫–∏ –∏ callback'–∏\\n‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\\n\\n<i>–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤</i>",
          parseMode: "HTML",
          color: "#6366f1"
        }
      },
      
      // –ú–µ–¥–∏–∞ —É–∑–µ–ª
      {
        id: "media-action",
        type: "action-send-media",
        position: { x: 100, y: 850 },
        data: {
          label: "Send Photo",
          mediaType: "photo",
          mediaUrl: "https://picsum.photos/800/600?random={{random_seed}}",
          caption: "üì∏ –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\\n\\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {{current_time}}\\nSeed: {{random_seed}}",
          parseMode: "HTML",
          color: "#ec4899"
        }
      }
    ],
    edges: [
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤—è–∑–∏
      { id: "start-to-welcome", source: "start-trigger", target: "welcome-message" },
      { id: "stats-to-message", source: "stats-trigger", target: "stats-message" },
      { id: "api-to-integration", source: "api-trigger", target: "api-integration" },
      { id: "integration-to-response", source: "api-integration", target: "api-response" },
      { id: "help-to-message", source: "help-trigger", target: "help-message" },
      
      // –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
      { id: "text-to-condition", source: "text-handler", target: "text-condition" },
      { id: "condition-true", source: "text-condition", target: "greeting-response", sourceHandle: "true" },
      { id: "condition-false", source: "text-condition", target: "default-response", sourceHandle: "false" }
    ],
    variables: {
      message_count: {
        type: "number",
        defaultValue: 0,
        description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      },
      user_count: {
        type: "number", 
        defaultValue: 1,
        description: "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
      },
      current_time: {
        type: "string",
        defaultValue: "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
        description: "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"
      },
      uptime: {
        type: "string",
        defaultValue: "0 —Å–µ–∫",
        description: "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"
      },
      random_number: {
        type: "number",
        defaultValue: 42,
        description: "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"
      },
      random_seed: {
        type: "number",
        defaultValue: 1000,
        description: "Seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
      },
      message_text: {
        type: "string",
        defaultValue: "",
        description: "–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
      }
    },
    settings: {
      logging: true,
      debug: false,
      errorHandling: true,
      stateManagement: true
    }
  },
  stats: {
    messagesProcessed: 0,
    activeUsers: 0,
    uptime: 1,
    lastActivity: new Date().toISOString()
  },
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
async function createEnhancedTestBot() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...\n');
  
  try {
    const botId = `enhanced-test-bot-${Date.now()}`;
    const botData = {
      ...enhancedBotSchema,
      id: botId
    };
    
    const botsDir = path.join(__dirname, '..', 'data', 'bots');
    const botPath = path.join(botsDir, `bot_${botId}.json`);
    
    if (!fs.existsSync(botsDir)) {
      fs.mkdirSync(botsDir, { recursive: true });
    }
    
    fs.writeFileSync(botPath, JSON.stringify(botData, null, 2));
    
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω!');
    console.log(`üìã ID: ${botData.id}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${botData.name}`);
    console.log(`üìä –£–∑–ª–æ–≤: ${botData.configuration.nodes.length}`);
    console.log(`üîó –°–≤—è–∑–µ–π: ${botData.configuration.edges.length}`);
    console.log(`üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${Object.keys(botData.configuration.variables).length}`);
    console.log(`üíæ –§–∞–π–ª: ${botPath}`);
    
    return botData;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
async function testEnhancedNodeJSExport(botId) {
  console.log(`\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ Node.js –¥–ª—è –±–æ—Ç–∞ ${botId}...\n`);
  
  const exportOptions = [
    {
      name: "–ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
      options: {
        includeComments: true,
        multiplatform: false,
        includeIntegrations: false,
        includeAdvancedFeatures: false
      }
    },
    {
      name: "–ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
      options: {
        includeComments: true,
        multiplatform: true,
        includeIntegrations: true,
        includeAdvancedFeatures: true,
        generateTests: true,
        generateDocumentation: true
      }
    },
    {
      name: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
      options: {
        includeComments: false,
        minify: true,
        includeIntegrations: false,
        includeAdvancedFeatures: false
      }
    }
  ];
  
  const results = [];
  
  for (const exportConfig of exportOptions) {
    console.log(`üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${exportConfig.name}`);
    
    try {
      const exportRequest = await makeRequest({
        hostname: 'localhost',
        port: 3002,
        path: `/api/export/${botId}/nodejs`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      }, JSON.stringify({ options: exportConfig.options }));
      
      if (exportRequest.statusCode === 200) {
        console.log(`‚úÖ ${exportConfig.name} - —É—Å–ø–µ—à–Ω–æ`);
        console.log(`üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: ${Math.round(exportRequest.data.length / 1024)} KB`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const archivePath = path.join(__dirname, '..', 'temp', `enhanced-export-${exportConfig.name.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}.zip`);
        fs.writeFileSync(archivePath, exportRequest.data);
        
        results.push({
          name: exportConfig.name,
          success: true,
          size: exportRequest.data.length,
          path: archivePath,
          options: exportConfig.options
        });
      } else {
        console.log(`‚ùå ${exportConfig.name} - –æ—à–∏–±–∫–∞ ${exportRequest.statusCode}`);
        results.push({
          name: exportConfig.name,
          success: false,
          error: exportRequest.statusCode
        });
      }
    } catch (error) {
      console.log(`üí• ${exportConfig.name} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
      results.push({
        name: exportConfig.name,
        success: false,
        error: error.message
      });
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
function analyzeExportQuality(results) {
  console.log('üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n');
  console.log('‚îÄ'.repeat(60));
  
  const successfulExports = results.filter(r => r.success);
  const failedExports = results.filter(r => !r.success);
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${successfulExports.length}/${results.length}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${failedExports.length}/${results.length}`);
  
  if (successfulExports.length > 0) {
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤:');
    successfulExports.forEach(result => {
      const sizeKB = Math.round(result.size / 1024);
      const sizeCategory = sizeKB < 10 ? '–ú–∞–ª—ã–π' : sizeKB < 50 ? '–°—Ä–µ–¥–Ω–∏–π' : '–ë–æ–ª—å—à–æ–π';
      console.log(`  ‚Ä¢ ${result.name}: ${sizeKB} KB (${sizeCategory})`);
    });
    
    const avgSize = Math.round(successfulExports.reduce((sum, r) => sum + r.size, 0) / successfulExports.length / 1024);
    console.log(`  üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${avgSize} KB`);
  }
  
  if (failedExports.length > 0) {
    console.log('\n‚ùå –û—à–∏–±–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    failedExports.forEach(result => {
      console.log(`  ‚Ä¢ ${result.name}: ${result.error}`);
    });
  }
  
  // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
  const qualityScore = (successfulExports.length / results.length) * 100;
  console.log(`\nüéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${Math.round(qualityScore)}%`);
  
  if (qualityScore >= 90) {
    console.log('üéâ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∞!');
  } else if (qualityScore >= 70) {
    console.log('üëç –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∞');
  } else {
    console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
  }
  
  return qualityScore >= 70;
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
async function testTypeScriptExporter(botId) {
  console.log(`\nüî∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞...\n`);
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
    const { NodeJSExporter } = require('./core/export/NodeJSExporter.ts');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    const botData = JSON.parse(fs.readFileSync(botPath, 'utf8'));
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const exportConfigs = [
      {
        name: "TypeScript Basic",
        options: {
          includeComments: true,
          includeAdvancedFeatures: false,
          includeIntegrations: false
        }
      },
      {
        name: "TypeScript Advanced",
        options: {
          includeComments: true,
          includeAdvancedFeatures: true,
          includeIntegrations: true,
          generateTests: true
        }
      }
    ];
    
    const tsResults = [];
    
    for (const config of exportConfigs) {
      console.log(`üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${config.name}`);
      
      try {
        const exporter = new NodeJSExporter(botData, config.options);
        const result = exporter.export();
        
        if (result.success) {
          console.log(`‚úÖ ${config.name} - —É—Å–ø–µ—à–Ω–æ`);
          console.log(`üìÅ –§–∞–π–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${result.files.length}`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
          const fileTypes = result.files.reduce((acc, file) => {
            acc[file.type] = (acc[file.type] || 0) + 1;
            return acc;
          }, {});
          
          console.log(`üìä –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:`, fileTypes);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          const outputDir = path.join(__dirname, '..', 'temp', `ts-export-${config.name.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}`);
          fs.mkdirSync(outputDir, { recursive: true });
          
          result.files.forEach(file => {
            fs.writeFileSync(path.join(outputDir, file.path), file.content);
          });
          
          console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputDir}`);
          
          tsResults.push({
            name: config.name,
            success: true,
            filesCount: result.files.length,
            fileTypes: fileTypes,
            outputDir: outputDir
          });
        } else {
          console.log(`‚ùå ${config.name} - –æ—à–∏–±–∫–∞: ${result.error}`);
          tsResults.push({
            name: config.name,
            success: false,
            error: result.error
          });
        }
      } catch (error) {
        console.log(`üí• ${config.name} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
        tsResults.push({
          name: config.name,
          success: false,
          error: error.message
        });
      }
      
      console.log('');
    }
    
    return tsResults;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞:', error.message);
    return [];
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js\n');
  console.log('='.repeat(70));
  
  let allTestsPassed = true;
  
  // 1. –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
  const enhancedBot = await createEnhancedTestBot();
  if (!enhancedBot) {
    allTestsPassed = false;
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç');
    return;
  }
  
  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
  const exportResults = await testEnhancedNodeJSExport(enhancedBot.id);
  const exportQuality = analyzeExportQuality(exportResults);
  if (!exportQuality) allTestsPassed = false;
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
  const tsResults = await testTypeScriptExporter(enhancedBot.id);
  if (tsResults.length > 0) {
    console.log('\nüî∑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã TypeScript —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    console.log('‚îÄ'.repeat(50));
    
    const tsSuccessful = tsResults.filter(r => r.success);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö TS —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${tsSuccessful.length}/${tsResults.length}`);
    
    tsSuccessful.forEach(result => {
      console.log(`  ‚Ä¢ ${result.name}: ${result.filesCount} —Ñ–∞–π–ª–æ–≤`);
    });
    
    if (tsSuccessful.length === 0) allTestsPassed = false;
  }
  
  console.log('\n' + '='.repeat(70));
  
  if (allTestsPassed) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞');
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞');
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞');
    
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    console.log('‚Ä¢ –ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º');
    console.log('‚Ä¢ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏');
    console.log('‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
    console.log('‚Ä¢ TypeScript —ç–∫—Å–ø–æ—Ä—Ç —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π');
    console.log('‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API');
    console.log('‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã');
    console.log('‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
  } else {
    console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∏');
    console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ TypeScript –º–æ–¥—É–ª–∏');
  }
  
  console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  main();
}

module.exports = {
  createEnhancedTestBot,
  testEnhancedNodeJSExport,
  testTypeScriptExporter,
  analyzeExportQuality,
  enhancedBotSchema
};