/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π
 */

const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (postData) {
      req.write(postData);
    }
    
    req.end();
  });
}

// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–±–æ—Ç–∞
async function testDemoBotIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤...');
    
    const botsRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: '/api/bots',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (botsRequest.statusCode !== 200) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤');
      return false;
    }
    
    const botsResponse = JSON.parse(botsRequest.data);
    const bots = botsResponse.data ? botsResponse.data.bots : botsResponse;
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –±–æ—Ç–æ–≤: ${bots.length}`);
    
    // –ò—â–µ–º –¥–µ–º–æ-–±–æ—Ç–æ–≤
    const demoBots = bots.filter(bot => bot.name === 'Demo Bot');
    console.log(`ü§ñ –ù–∞–π–¥–µ–Ω–æ –¥–µ–º–æ-–±–æ—Ç–æ–≤: ${demoBots.length}`);
    
    if (demoBots.length === 0) {
      console.log('‚ö†Ô∏è –î–µ–º–æ-–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–º–æ-–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π:');
      console.log('   node src/create-demo-bot.js');
      return false;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–µ–º–æ-–±–æ—Ç–∞
    const demoBot = demoBots[0];
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–º–æ-–±–æ—Ç–∞: ${demoBot.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/bots/${demoBot.id}`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (botRequest.statusCode !== 200) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –±–æ—Ç–∞');
      return false;
    }
    
    const botDetails = JSON.parse(botRequest.data);
    const bot = botDetails.data || botDetails;
    
    console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞
    const checks = [
      { 
        condition: bot.name === 'Demo Bot', 
        name: '–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞',
        value: bot.name 
      },
      { 
        condition: bot.description && bot.description.includes('demonstration'), 
        name: '–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞',
        value: bot.description ? bot.description.substring(0, 50) + '...' : '–ù–µ—Ç'
      },
      { 
        condition: bot.status === 'draft', 
        name: '–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞',
        value: bot.status 
      },
      { 
        condition: bot.platforms && bot.platforms.length > 0, 
        name: '–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        value: bot.platforms ? bot.platforms.length : 0
      },
      { 
        condition: bot.configuration && bot.configuration.nodes, 
        name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∑–ª–æ–≤',
        value: bot.configuration && bot.configuration.nodes ? bot.configuration.nodes.length : 0
      },
      { 
        condition: bot.configuration && bot.configuration.edges, 
        name: '–°–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏',
        value: bot.configuration && bot.configuration.edges ? bot.configuration.edges.length : 0
      },
      { 
        condition: bot.configuration && bot.configuration.variables, 
        name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞',
        value: bot.configuration && bot.configuration.variables ? Object.keys(bot.configuration.variables).length : 0
      }
    ];
    
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞:');
    let passedChecks = 0;
    
    checks.forEach(check => {
      if (check.condition) {
        console.log(`‚úÖ ${check.name}: ${check.value}`);
        passedChecks++;
      } else {
        console.log(`‚ùå ${check.name}: ${check.value}`);
      }
    });
    
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedChecks}/${checks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    if (bot.configuration && bot.configuration.nodes) {
      const commandNodes = bot.configuration.nodes.filter(node => node.type === 'trigger-command');
      
      console.log('\nüìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:');
      commandNodes.forEach(node => {
        console.log(`  ‚Ä¢ ${node.data.command} - ${node.data.description || node.data.label}`);
      });
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞
    console.log('\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞...');
    
    const exportRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/export/${demoBot.id}/nodejs`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, JSON.stringify({ 
      options: {
        includeComments: true,
        minify: false
      }
    }), true);
    
    if (exportRequest.statusCode === 200) {
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Node.js —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: ${Math.round(exportRequest.data.length / 1024)} KB`);
    } else {
      console.log('‚ùå –≠–∫—Å–ø–æ—Ä—Ç –≤ Node.js –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', exportRequest.statusCode);
    }
    
    // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const success = passedChecks >= checks.length * 0.8; // 80% –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
    
    if (success) {
      console.log('\nüéâ –î–µ–º–æ-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É!');
      
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Dashboard: http://localhost:3002');
      console.log('2. –ù–∞–π–¥–∏—Ç–µ "Demo Bot" –≤ —Å–ø–∏—Å–∫–µ –±–æ—Ç–æ–≤');
      console.log('3. –ù–∞–∂–º–∏—Ç–µ "Edit" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ');
      console.log('4. –ò–∑—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥—ã');
      console.log('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ "Platforms" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.log('6. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Node.js –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
      
    } else {
      console.log('\n‚ö†Ô∏è –î–µ–º–æ-–±–æ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
    }
    
    return success;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:');
      console.log('   node server.js');
    }
    
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–±–æ—Ç–∞\n');
  console.log('='.repeat(60));
  
  const success = await testDemoBotIntegration();
  
  console.log('\n' + '='.repeat(60));
  
  if (success) {
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  } else {
    console.log('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  main();
}

module.exports = {
  testDemoBotIntegration
};