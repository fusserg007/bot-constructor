/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É runtime
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞...\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
const botPath = path.join(__dirname, '..', 'data', 'bots', 'bot_simple-test-bot.json');

if (!fs.existsSync(botPath)) {
  console.error('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node src/test-simple-bot.js');
  process.exit(1);
}

const botData = JSON.parse(fs.readFileSync(botPath, 'utf8'));
console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–æ—Ç: ${botData.name} (ID: ${botData.id})`);

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–æ–≤
class SimpleBotRuntime {
  constructor(botSchema) {
    this.botSchema = botSchema;
    this.nodes = new Map();
    this.edges = new Map();
    this.variables = new Map();
    this.userStates = new Map();
    
    this.initializeBot();
  }
  
  initializeBot() {
    // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —É–∑–ª—ã
    this.botSchema.configuration.nodes.forEach(node => {
      this.nodes.set(node.id, node);
    });
    
    // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.botSchema.configuration.edges.forEach(edge => {
      if (!this.edges.has(edge.source)) {
        this.edges.set(edge.source, []);
      }
      this.edges.get(edge.source).push(edge);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    Object.entries(this.botSchema.configuration.variables || {}).forEach(([key, variable]) => {
      this.variables.set(key, variable.defaultValue);
    });
    
    console.log(`üîß –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:`);
    console.log(`   –£–∑–ª–æ–≤: ${this.nodes.size}`);
    console.log(`   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${this.edges.size}`);
    console.log(`   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${this.variables.size}`);
  }
  
  async processMessage(message) {
    const { type, text, userId, chatId } = message;
    
    console.log(`\nüì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:`);
    console.log(`   –¢–∏–ø: ${type}`);
    console.log(`   –¢–µ–∫—Å—Ç: ${text}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!this.userStates.has(userId)) {
      this.userStates.set(userId, {
        messageCount: 0,
        lastActivity: new Date(),
        variables: new Map()
      });
    }
    
    const userState = this.userStates.get(userId);
    userState.messageCount++;
    userState.lastActivity = new Date();
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    const matchingTriggers = this.findMatchingTriggers(message);
    
    if (matchingTriggers.length === 0) {
      console.log(`   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤`);
      return { success: false, reason: 'No matching triggers' };
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–∏–≥–≥–µ—Ä
    const trigger = matchingTriggers[0];
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: ${trigger.data.label}`);
    
    return await this.executeTrigger(trigger, message);
  }
  
  findMatchingTriggers(message) {
    const triggers = [];
    
    for (const [nodeId, node] of this.nodes) {
      if (node.type === 'trigger-command' && message.type === 'command') {
        if (node.data.command === message.text) {
          triggers.push(node);
        }
      } else if (node.type === 'trigger-message' && message.type === 'text') {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞
        triggers.push(node);
      }
    }
    
    return triggers;
  }
  
  async executeTrigger(triggerNode, message) {
    console.log(`   üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞: ${triggerNode.id}`);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —É–∑–ª—ã
    const connections = this.edges.get(triggerNode.id) || [];
    
    if (connections.length === 0) {
      console.log(`   ‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞`);
      return { success: false, reason: 'No connections' };
    }
    
    const results = [];
    
    for (const connection of connections) {
      const targetNode = this.nodes.get(connection.target);
      if (targetNode) {
        const result = await this.executeNode(targetNode, message);
        results.push(result);
      }
    }
    
    return {
      success: true,
      trigger: triggerNode.data.label,
      results: results
    };
  }
  
  async executeNode(node, message) {
    console.log(`   ‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∑–ª–∞: ${node.data.label} (${node.type})`);
    
    switch (node.type) {
      case 'action-send-message':
        return this.executeSendMessage(node, message);
      
      case 'condition-text-contains':
        return this.executeTextCondition(node, message);
      
      default:
        console.log(`   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–∑–ª–∞: ${node.type}`);
        return { success: false, reason: 'Unknown node type' };
    }
  }
  
  executeSendMessage(node, message) {
    let text = node.data.text || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for (const [key, value] of this.variables) {
      const placeholder = `{{${key}}}`;
      text = text.replace(new RegExp(placeholder, 'g'), value);
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const userState = this.userStates.get(message.userId);
    if (userState) {
      text = text.replace(/{{message_count}}/g, userState.messageCount);
      text = text.replace(/{{user_count}}/g, this.userStates.size);
      text = text.replace(/{{uptime}}/g, this.calculateUptime());
    }
    
    console.log(`   üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    return {
      success: true,
      type: 'send_message',
      text: text,
      parseMode: node.data.parseMode || 'HTML',
      chatId: message.chatId
    };
  }
  
  executeTextCondition(node, message) {
    const condition = node.data.condition || '';
    const value = node.data.value || '';
    const messageText = message.text || '';
    
    let result = false;
    
    switch (condition) {
      case 'contains':
        result = messageText.toLowerCase().includes(value.toLowerCase());
        break;
      case 'equals':
        result = messageText.toLowerCase() === value.toLowerCase();
        break;
      case 'starts_with':
        result = messageText.toLowerCase().startsWith(value.toLowerCase());
        break;
      default:
        result = false;
    }
    
    console.log(`   üîç –£—Å–ª–æ–≤–∏–µ "${condition}" —Å "${value}": ${result}`);
    
    return {
      success: true,
      type: 'condition',
      result: result,
      condition: condition,
      value: value
    };
  }
  
  calculateUptime() {
    const startTime = new Date(this.botSchema.createdAt);
    const now = new Date();
    const uptimeMs = now - startTime;
    const uptimeMinutes = Math.floor(uptimeMs / (1000 * 60));
    
    if (uptimeMinutes < 60) {
      return `${uptimeMinutes} –º–∏–Ω—É—Ç`;
    } else if (uptimeMinutes < 1440) {
      const hours = Math.floor(uptimeMinutes / 60);
      return `${hours} —á–∞—Å–æ–≤`;
    } else {
      const days = Math.floor(uptimeMinutes / 1440);
      return `${days} –¥–Ω–µ–π`;
    }
  }
  
  getStats() {
    return {
      totalUsers: this.userStates.size,
      totalMessages: Array.from(this.userStates.values())
        .reduce((sum, state) => sum + state.messageCount, 0),
      uptime: this.calculateUptime(),
      nodesCount: this.nodes.size,
      edgesCount: this.edges.size
    };
  }
}

// –°–æ–∑–¥–∞–µ–º runtime –¥–ª—è –±–æ—Ç–∞
const runtime = new SimpleBotRuntime(botData);

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const testMessages = [
  {
    type: 'command',
    text: '/start',
    userId: 'user1',
    chatId: 'chat1'
  },
  {
    type: 'command',
    text: '/help',
    userId: 'user1',
    chatId: 'chat1'
  },
  {
    type: 'command',
    text: '/status',
    userId: 'user2',
    chatId: 'chat2'
  },
  {
    type: 'command',
    text: '/unknown',
    userId: 'user1',
    chatId: 'chat1'
  },
  {
    type: 'text',
    text: '–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!',
    userId: 'user3',
    chatId: 'chat3'
  }
];

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n');
  
  const results = [];
  
  for (let i = 0; i < testMessages.length; i++) {
    const message = testMessages[i];
    console.log(`\n--- –¢–µ—Å—Ç ${i + 1}/${testMessages.length} ---`);
    
    try {
      const result = await runtime.processMessage(message);
      results.push({ message, result, success: true });
      
      if (result.success) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.trigger || '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}`);
        if (result.results) {
          result.results.forEach(r => {
            if (r.type === 'send_message') {
              console.log(`   üì§ –û—Ç–≤–µ—Ç: ${r.text.substring(0, 50)}...`);
            }
          });
        }
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.reason}`);
      }
    } catch (error) {
      console.log(`   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
      results.push({ message, error: error.message, success: false });
    }
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
  const stats = runtime.getStats();
  console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}`);
  console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π: ${stats.totalMessages}`);
  console.log(`   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${stats.uptime}`);
  console.log(`   –£–∑–ª–æ–≤: ${stats.nodesCount}`);
  console.log(`   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.edgesCount}`);
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  
  console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`);
  console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed}`);
  console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${(successful / results.length * 100).toFixed(1)}%`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const testResults = {
    botId: botData.id,
    timestamp: new Date().toISOString(),
    tests: results,
    stats: stats,
    summary: {
      total: results.length,
      successful: successful,
      failed: failed,
      successRate: successful / results.length
    }
  };
  
  const resultsPath = path.join(__dirname, 'bot-execution-test-results.json');
  fs.writeFileSync(resultsPath, JSON.stringify(testResults, null, 2));
  console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${resultsPath}`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
  botData.stats.messagesProcessed += stats.totalMessages;
  botData.stats.activeUsers = stats.totalUsers;
  botData.stats.lastActivity = new Date().toISOString();
  botData.updatedAt = new Date().toISOString();
  
  fs.writeFileSync(botPath, JSON.stringify(botData, null, 2));
  console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
  
  return testResults;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().then(results => {
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  
  if (results.summary.successRate >= 0.8) {
    console.log('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å >= 80%)');
  } else {
    console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å < 80%)');
  }
  
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram API');
  console.log('   2. –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫');
  console.log('   3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π');
  console.log('   4. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
  
}).catch(error => {
  console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  process.exit(1);
});