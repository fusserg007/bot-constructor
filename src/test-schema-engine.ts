/**
 * –¢–µ—Å—Ç Schema Engine - –¥–≤–∏–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º
 */

import { SchemaEngine, SchemaExecutionContext } from './core/engine/SchemaEngine';
import { MessengerPlatform } from './core/types';

// –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç reactflow)
interface TestNode {
  id: string;
  type: string;
  data: any;
  position: { x: number; y: number };
}

interface TestEdge {
  id: string;
  source: string;
  target: string;
  sourceHandle?: string;
  targetHandle?: string;
}

console.log('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Schema Engine...\n');

async function testSchemaEngine() {
  try {
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ Schema Engine...');
    const engine = new SchemaEngine();
    console.log('‚úÖ Schema Engine —Å–æ–∑–¥–∞–Ω');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const mockAdapter = {
      sendMessage: async (chatId: string, message: any) => {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${chatId}:`, message.text);
        return { messageId: 'test-message-id' };
      },
      editMessage: async (chatId: string, messageId: string, message: any) => {
        console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –≤ ${chatId}:`, message.text);
        return true;
      },
      deleteMessage: async (chatId: string, messageId: string) => {
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –≤ ${chatId}`);
        return true;
      }
    } as any;

    const context: SchemaExecutionContext = {
      userId: 'test-user-123',
      chatId: 'test-chat-456',
      platform: 'telegram' as MessengerPlatform,
      message: {
        text: '/start',
        messageId: 'msg-123',
        timestamp: Date.now(),
        user: {
          id: 'test-user-123',
          username: 'testuser',
          firstName: 'Test',
          lastName: 'User'
        }
      },
      variables: {
        userName: 'Test User'
      },
      sessionData: {},
      adapter: mockAdapter
    };

    console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω');

    return { engine, context };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Schema Engine:', error);
    return null;
  }
}

async function testSimpleSchema() {
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å—Ö–µ–º—ã...');

  const result = await testSchemaEngine();
  if (!result) return false;

  const { engine, context } = result;

  try {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É: —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥—ã -> –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const nodes: TestNode[] = [
      {
        id: 'trigger-1',
        type: 'trigger-command',
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /start',
          command: '/start'
        },
        position: { x: 0, y: 0 }
      },
      {
        id: 'action-1',
        type: 'action-send-message',
        data: {
          label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
          message: '–ü—Ä–∏–≤–µ—Ç, {{userName}}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.'
        },
        position: { x: 200, y: 0 }
      }
    ];

    const edges: TestEdge[] = [
      {
        id: 'edge-1',
        source: 'trigger-1',
        target: 'action-1'
      }
    ];

    console.log('üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å—Ö–µ–º—ã...');
    const result = await engine.executeSchema(nodes, edges, context);

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    console.log('  - –£—Å–ø–µ—à–Ω–æ:', result.success);
    console.log('  - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–∑–ª—ã:', result.executedNodes);
    console.log('  - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', result.executionTime, '–º—Å');
    console.log('  - –û—à–∏–±–∫–∏:', result.errors.length);

    if (result.errors.length > 0) {
      console.log('  - –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:', result.errors);
    }

    return result.success && result.executedNodes.length === 2;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–π —Å—Ö–µ–º—ã:', error);
    return false;
  }
}

async function testConditionalSchema() {
  console.log('\nüîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏...');

  const result = await testSchemaEngine();
  if (!result) return false;

  const { engine, context } = result;

  try {
    // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Å —É—Å–ª–æ–≤–∏–µ–º: —Ç—Ä–∏–≥–≥–µ—Ä -> —É—Å–ª–æ–≤–∏–µ -> –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è
    const nodes: TestNode[] = [
      {
        id: 'trigger-1',
        type: 'trigger-message',
        data: {
          label: '–õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        },
        position: { x: 0, y: 0 }
      },
      {
        id: 'condition-1',
        type: 'condition-text-contains',
        data: {
          label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø—Ä–∏–≤–µ—Ç"',
          pattern: '–ø—Ä–∏–≤–µ—Ç'
        },
        position: { x: 200, y: 0 }
      },
      {
        id: 'action-true',
        type: 'action-send-message',
        data: {
          label: '–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
          message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'
        },
        position: { x: 400, y: -50 }
      },
      {
        id: 'action-false',
        type: 'action-send-message',
        data: {
          label: '–û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç',
          message: '–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.'
        },
        position: { x: 400, y: 50 }
      }
    ];

    const edges: TestEdge[] = [
      {
        id: 'edge-1',
        source: 'trigger-1',
        target: 'condition-1'
      },
      {
        id: 'edge-true',
        source: 'condition-1',
        target: 'action-true',
        sourceHandle: 'true'
      },
      {
        id: 'edge-false',
        source: 'condition-1',
        target: 'action-false',
        sourceHandle: 'false'
      }
    ];

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "–ø—Ä–∏–≤–µ—Ç"
    const contextWithGreeting = {
      ...context,
      message: {
        ...context.message!,
        text: '–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!'
      }
    };

    console.log('üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å —É—Å–ª–æ–≤–∏–µ–º (true –≤–µ—Ç–∫–∞)...');
    const resultTrue = await engine.executeSchema(nodes, edges, contextWithGreeting);

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (true):');
    console.log('  - –£—Å–ø–µ—à–Ω–æ:', resultTrue.success);
    console.log('  - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–∑–ª—ã:', resultTrue.executedNodes);
    console.log('  - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', resultTrue.executionTime, '–º—Å');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const contextWithoutGreeting = {
      ...context,
      message: {
        ...context.message!,
        text: '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?'
      }
    };

    console.log('\\nüìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å —É—Å–ª–æ–≤–∏–µ–º (false –≤–µ—Ç–∫–∞)...');
    const resultFalse = await engine.executeSchema(nodes, edges, contextWithoutGreeting);

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (false):');
    console.log('  - –£—Å–ø–µ—à–Ω–æ:', resultFalse.success);
    console.log('  - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–∑–ª—ã:', resultFalse.executedNodes);
    console.log('  - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', resultFalse.executionTime, '–º—Å');

    return resultTrue.success && resultFalse.success && 
           resultTrue.executedNodes.includes('action-true') &&
           resultFalse.executedNodes.includes('action-false');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª–æ–≤–Ω–æ–π —Å—Ö–µ–º—ã:', error);
    return false;
  }
}

async function testDataOperations() {
  console.log('\\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏...');

  const result = await testSchemaEngine();
  if (!result) return false;

  const { engine, context } = result;

  try {
    // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö
    const nodes: TestNode[] = [
      {
        id: 'trigger-1',
        type: 'trigger-command',
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /save',
          command: '/save'
        },
        position: { x: 0, y: 0 }
      },
      {
        id: 'data-save',
        type: 'data-variable-set',
        data: {
          label: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è',
          variableName: 'savedName',
          variableValue: '{{userName}}'
        },
        position: { x: 200, y: 0 }
      },
      {
        id: 'data-load',
        type: 'data-variable-get',
        data: {
          label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–º—è',
          variableName: 'savedName'
        },
        position: { x: 400, y: 0 }
      },
      {
        id: 'action-1',
        type: 'action-send-message',
        data: {
          label: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ',
          message: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è: {{savedName}}'
        },
        position: { x: 600, y: 0 }
      }
    ];

    const edges: TestEdge[] = [
      {
        id: 'edge-1',
        source: 'trigger-1',
        target: 'data-save'
      },
      {
        id: 'edge-2',
        source: 'data-save',
        target: 'data-load'
      },
      {
        id: 'edge-3',
        source: 'data-load',
        target: 'action-1'
      }
    ];

    const contextWithSave = {
      ...context,
      message: {
        ...context.message!,
        text: '/save'
      }
    };

    console.log('üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö...');
    const result = await engine.executeSchema(nodes, edges, contextWithSave);

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    console.log('  - –£—Å–ø–µ—à–Ω–æ:', result.success);
    console.log('  - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–∑–ª—ã:', result.executedNodes);
    console.log('  - –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', result.finalVariables);
    console.log('  - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', result.executionTime, '–º—Å');

    return result.success && result.executedNodes.length === 4;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏:', error);
    return false;
  }
}

async function testEngineStats() {
  console.log('\\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–∂–∫–∞...');

  const result = await testSchemaEngine();
  if (!result) return false;

  const { engine } = result;

  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');
    const stats = engine.getExecutionStats();

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–∫–∞:');
    console.log('  - –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:', stats.totalExecutions);
    console.log('  - –£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:', stats.successfulExecutions);
    console.log('  - –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:', stats.failedExecutions);
    console.log('  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', stats.averageExecutionTime.toFixed(2), '–º—Å');
    console.log('  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:', stats.activeExecutions);

    console.log('\\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');
    const history = engine.getExecutionHistory();
    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', history.length, '–∑–∞–ø–∏—Å–µ–π');

    console.log('\\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π...');
    const activeExecutions = engine.getActiveExecutions();
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', activeExecutions);

    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Schema Engine...\\n');

  const results = {
    engine: await testSchemaEngine() !== null,
    simple: await testSimpleSchema(),
    conditional: await testConditionalSchema(),
    data: await testDataOperations(),
    stats: await testEngineStats()
  };

  console.log('\\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞:', results.engine ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞:', results.simple ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –£—Å–ª–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞:', results.conditional ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:', results.data ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–∫–∞:', results.stats ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');

  const allPassed = Object.values(results).every(result => result);
  
  if (allPassed) {
    console.log('\\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Schema Engine —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    console.log('\\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Schema Engine:');
    console.log('  ‚öôÔ∏è –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º React Flow');
    console.log('  üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ (—Ç—Ä–∏–≥–≥–µ—Ä—ã, –¥–µ–π—Å—Ç–≤–∏—è, —É—Å–ª–æ–≤–∏—è, –¥–∞–Ω–Ω—ã–µ, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏)');
    console.log('  üîÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å true/false –≤–µ—Ç–≤–ª–µ–Ω–∏–µ–º');
    console.log('  üíæ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏');
    console.log('  üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API —á–µ—Ä–µ–∑ HTTP');
    console.log('  üìù –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
    console.log('  üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤');
    console.log('  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    console.log('  üö´ –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π');
    console.log('  ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫');
  } else {
    console.log('\\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
  }

  return allPassed;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().then(success => {
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
  process.exit(1);
});