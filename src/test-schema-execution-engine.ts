/**
 * –¢–µ—Å—Ç –¥–≤–∏–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º
 */
import { SchemaExecutionEngine, ExecutionContext } from './core/engine/SchemaExecutionEngine';
import { UserStateManager } from './core/engine/UserStateManager';
import { ErrorHandler } from './core/engine/ErrorHandler';
import { BotSchema } from './core/types';

// –ú–æ–∫ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockMessengerAdapter {
  public sentMessages: any[] = [];
  public sentMedia: any[] = [];

  async sendMessage(chatId: string, message: string, options?: any): Promise<void> {
    this.sentMessages.push({ chatId, message, options });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${chatId}: ${message}`);
  }

  async sendMedia(chatId: string, type: string, media: string, options?: any): Promise<void> {
    this.sentMedia.push({ chatId, type, media, options });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ –≤ ${chatId}: ${type} - ${media}`);
  }

  clearHistory(): void {
    this.sentMessages = [];
    this.sentMedia = [];
  }
}

async function testSchemaExecutionEngine() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º...\n');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    const engine = new SchemaExecutionEngine();
    const userStateManager = UserStateManager.getInstance();
    const errorHandler = ErrorHandler.getInstance();
    const mockAdapter = new MockMessengerAdapter();

    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã:');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    const testSchema: BotSchema = {
      id: 'test-schema',
      name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞',
      nodes: [
        {
          id: 'start-trigger',
          type: 'trigger-command',
          data: { command: '/start' },
          position: { x: 100, y: 100 }
        },
        {
          id: 'welcome-message',
          type: 'action-send-message',
          data: { 
            message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {{userId}}! –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {{current_time}}'
          },
          position: { x: 300, y: 100 }
        },
        {
          id: 'ask-name',
          type: 'action-request-input',
          data: {
            message: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
            variable: 'userName'
          },
          position: { x: 500, y: 100 }
        },
        {
          id: 'greet-user',
          type: 'action-send-message',
          data: {
            message: '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {{userName}}!'
          },
          position: { x: 700, y: 100 }
        }
      ],
      edges: [
        { id: 'edge-1', source: 'start-trigger', target: 'welcome-message' },
        { id: 'edge-2', source: 'welcome-message', target: 'ask-name' },
        { id: 'edge-3', source: 'ask-name', target: 'greet-user' }
      ],
      variables: {},
      settings: {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞',
        description: '–°—Ö–µ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞',
        platforms: ['telegram'],
        mode: 'polling',
        variables: {}
      },
      version: '1.0.0',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const context = engine.createExecutionContext(
      'user123',
      'chat456',
      'telegram',
      { messageText: '/start' }
    );

    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${context.executionId}`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ö–µ–º—É
    const result = await engine.executeSchema(
      testSchema,
      'command',
      { command: '/start' },
      context,
      mockAdapter as any
    );

    console.log(`   ‚úÖ –°—Ö–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${result.success ? '—É—Å–ø–µ—à–Ω–æ' : '—Å –æ—à–∏–±–∫–∞–º–∏'}`);
    console.log(`   üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: ${result.actions.length}`);
    console.log(`   üìù –õ–æ–≥–æ–≤: ${result.logs.length}`);
    
    if (result.errors.length > 0) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${result.errors.join(', ')}`);
    }

    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSession = userStateManager.getUserSession('telegram', 'user123', 'chat456');
    console.log(`   ‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userSession.sessionId}`);
    console.log(`   üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${Object.keys(userSession.variables).length}`);
    console.log(`   üîÑ –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥: ${userSession.waitingForInput ? '–¥–∞' : '–Ω–µ—Ç'}`);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userSession.waitingForInput) {
      const inputResult = userStateManager.processUserInput('telegram', 'user123', 'chat456', '–ê–ª–µ–∫—Å–µ–π');
      console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –≤–≤–æ–¥: ${inputResult.processed ? '–¥–∞' : '–Ω–µ—Ç'}`);
      
      if (inputResult.processed && inputResult.nextNodes) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Å–ª–µ–¥—É—é—â–∏–º–∏ —É–∑–ª–∞–º–∏
        for (const nodeId of inputResult.nextNodes) {
          const nodeResult = await engine.executeNode(nodeId, testSchema, context, mockAdapter as any);
          console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω —É–∑–µ–ª ${nodeId}: ${nodeResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '—Å –æ—à–∏–±–∫–æ–π'}`);
        }
      }
    }

    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏:');

    // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Å —É—Å–ª–æ–≤–∏–µ–º
    const conditionalSchema: BotSchema = {
      id: 'conditional-schema',
      name: '–°—Ö–µ–º–∞ —Å —É—Å–ª–æ–≤–∏–µ–º',
      nodes: [
        {
          id: 'message-trigger',
          type: 'trigger-message',
          data: {},
          position: { x: 100, y: 100 }
        },
        {
          id: 'check-greeting',
          type: 'condition-text-contains',
          data: { pattern: '–ø—Ä–∏–≤–µ—Ç|hello|hi' },
          position: { x: 300, y: 100 }
        },
        {
          id: 'greeting-response',
          type: 'action-send-message',
          data: { message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' },
          position: { x: 500, y: 50 }
        },
        {
          id: 'default-response',
          type: 'action-send-message',
          data: { message: '–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.' },
          position: { x: 500, y: 150 }
        }
      ],
      edges: [
        { id: 'edge-1', source: 'message-trigger', target: 'check-greeting' },
        { id: 'edge-2', source: 'check-greeting', target: 'greeting-response', sourceHandle: 'true' },
        { id: 'edge-3', source: 'check-greeting', target: 'default-response', sourceHandle: 'false' }
      ],
      variables: {},
      settings: {
        name: '–°—Ö–µ–º–∞ —Å —É—Å–ª–æ–≤–∏–µ–º',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏',
        platforms: ['telegram'],
        mode: 'polling',
        variables: {}
      },
      version: '1.0.0',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    mockAdapter.clearHistory();
    const greetingContext = engine.createExecutionContext(
      'user456',
      'chat789',
      'telegram',
      { messageText: '–ü—Ä–∏–≤–µ—Ç!' }
    );

    const greetingResult = await engine.executeSchema(
      conditionalSchema,
      'message',
      { text: '–ü—Ä–∏–≤–µ—Ç!' },
      greetingContext,
      mockAdapter as any
    );

    console.log(`   ‚úÖ –¢–µ—Å—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º: ${greetingResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${mockAdapter.sentMessages.length}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    mockAdapter.clearHistory();
    const normalContext = engine.createExecutionContext(
      'user456',
      'chat789',
      'telegram',
      { messageText: '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?' }
    );

    const normalResult = await engine.executeSchema(
      conditionalSchema,
      'message',
      { text: '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?' },
      normalContext,
      mockAdapter as any
    );

    console.log(`   ‚úÖ –¢–µ—Å—Ç —Å –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ${normalResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${mockAdapter.sentMessages.length}`);

    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:');

    // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Å –æ—à–∏–±–∫–æ–π
    const errorSchema: BotSchema = {
      id: 'error-schema',
      name: '–°—Ö–µ–º–∞ —Å –æ—à–∏–±–∫–æ–π',
      nodes: [
        {
          id: 'start',
          type: 'trigger-command',
          data: { command: '/error' },
          position: { x: 100, y: 100 }
        },
        {
          id: 'invalid-node',
          type: 'invalid-type', // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —É–∑–ª–∞
          data: {},
          position: { x: 300, y: 100 }
        }
      ],
      edges: [
        { id: 'edge-1', source: 'start', target: 'invalid-node' }
      ],
      variables: {},
      settings: {
        name: '–°—Ö–µ–º–∞ —Å –æ—à–∏–±–∫–æ–π',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
        platforms: ['telegram'],
        mode: 'polling',
        variables: {}
      },
      version: '1.0.0',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const errorContext = engine.createExecutionContext('user789', 'chat123', 'telegram');
    const errorResult = await engine.executeSchema(
      errorSchema,
      'command',
      { command: '/error' },
      errorContext,
      mockAdapter as any
    );

    console.log(`   ‚úÖ –¢–µ—Å—Ç —Å –æ—à–∏–±–∫–æ–π: ${errorResult.success ? '–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞ –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å'}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorResult.errors.length}`);

    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const sessionStats = userStateManager.getSessionStats();
    console.log(`   üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${sessionStats.totalSessions}`);
    console.log(`   üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessionStats.activeSessions}`);
    console.log(`   üì± –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:`, sessionStats.sessionsByPlatform);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    const errorStats = errorHandler.getErrorStats();
    console.log(`   ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${errorStats.totalErrors}`);
    console.log(`   üìä –ü–æ —Ç–∏–ø–∞–º:`, errorStats.errorsByType);

    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:');

    // –°—Ö–µ–º–∞ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    const mathSchema: BotSchema = {
      id: 'math-schema',
      name: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞',
      nodes: [
        {
          id: 'start',
          type: 'trigger-command',
          data: { command: '/calc' },
          position: { x: 100, y: 100 }
        },
        {
          id: 'set-numbers',
          type: 'action-set-variable',
          data: { variable: 'number1', value: '10' },
          position: { x: 300, y: 100 }
        },
        {
          id: 'math-operation',
          type: 'utility-math',
          data: {
            operation: 'add',
            operand1: '{{number1}}',
            operand2: '5',
            resultVariable: 'result'
          },
          position: { x: 500, y: 100 }
        },
        {
          id: 'show-result',
          type: 'action-send-message',
          data: { message: '–†–µ–∑—É–ª—å—Ç–∞—Ç: {{number1}} + 5 = {{result}}' },
          position: { x: 700, y: 100 }
        }
      ],
      edges: [
        { id: 'edge-1', source: 'start', target: 'set-numbers' },
        { id: 'edge-2', source: 'set-numbers', target: 'math-operation' },
        { id: 'edge-3', source: 'math-operation', target: 'show-result' }
      ],
      variables: {},
      settings: {
        name: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏',
        platforms: ['telegram'],
        mode: 'polling',
        variables: {}
      },
      version: '1.0.0',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    mockAdapter.clearHistory();
    const mathContext = engine.createExecutionContext('user999', 'chat999', 'telegram');
    const mathResult = await engine.executeSchema(
      mathSchema,
      'command',
      { command: '/calc' },
      mathContext,
      mockAdapter as any
    );

    console.log(`   ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞: ${mathResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    console.log(`   üî¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${Object.keys(mathResult.variables).length}`);
    console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${mockAdapter.sentMessages.length}`);

    if (mockAdapter.sentMessages.length > 0) {
      console.log(`   üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${mockAdapter.sentMessages[mockAdapter.sentMessages.length - 1].message}`);
    }

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–≤–∏–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–≤–∏–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testSchemaExecutionEngine()
    .then(() => {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testSchemaExecutionEngine };