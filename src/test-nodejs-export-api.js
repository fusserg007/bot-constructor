/**
 * –¢–µ—Å—Ç API —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js –∫–æ–¥
 */

const http = require('http');
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null, binary = false) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      const chunks = [];
      
      res.on('data', (chunk) => {
        chunks.push(chunk);
      });
      
      res.on('end', () => {
        const data = binary ? Buffer.concat(chunks) : Buffer.concat(chunks).toString();
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (postData) {
      req.write(postData);
    }
    
    req.end();
  });
}

// –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API
async function testExportAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js –∫–æ–¥...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const healthCheck = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: '/api/bots',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (healthCheck.statusCode !== 200) {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm start');
      return;
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞
    const botId = 'simple-test-bot';
    console.log(`\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞: ${botId}`);
    
    const exportOptions = {
      includeComments: true,
      minify: false,
      platform: 'telegram'
    };
    
    const exportRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/export/${botId}/nodejs`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, JSON.stringify({ options: exportOptions }), true);
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${exportRequest.statusCode}`);
    
    if (exportRequest.statusCode === 200) {
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω!');
      console.log('üìÅ –ü–æ–ª—É—á–µ–Ω ZIP –∞—Ä—Ö–∏–≤ —Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const archivePath = path.join(__dirname, '..', 'temp', `exported-${botId}-${Date.now()}.zip`);
      fs.writeFileSync(archivePath, exportRequest.data);
      console.log(`üíæ –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${archivePath}`);
      
    } else if (exportRequest.statusCode === 404) {
      console.error('‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
      const botsRequest = await makeRequest({
        hostname: 'localhost',
        port: 3002,
        path: '/api/bots',
        method: 'GET'
      });
      
      if (botsRequest.statusCode === 200) {
        const bots = JSON.parse(botsRequest.data);
        bots.forEach(bot => {
          console.log(`  - ${bot.id}: ${bot.name}`);
        });
      }
      
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', exportRequest.statusCode);
      console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', exportRequest.data);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø—Ü–∏—è–º–∏
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...');
    
    const minifiedExportRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/export/${botId}/nodejs`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, JSON.stringify({ 
      options: {
        includeComments: false,
        minify: true,
        platform: 'telegram'
      }
    }), true);
    
    if (minifiedExportRequest.statusCode === 200) {
      console.log('‚úÖ –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω!');
    } else {
      console.log('‚ö†Ô∏è –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è:', minifiedExportRequest.statusCode);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
    console.log('\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞...');
    
    const notFoundRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: '/api/export/nonexistent-bot/nodejs',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, JSON.stringify({ options: exportOptions }));
    
    if (notFoundRequest.statusCode === 404) {
      console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ (404)');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞:', notFoundRequest.statusCode);
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:');
      console.log('   npm start');
      console.log('   –∏–ª–∏');
      console.log('   node server.js');
    }
  }
}

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
async function createTestBot() {
  console.log('ü§ñ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...\n');
  
  const testBot = {
    name: '–≠–∫—Å–ø–æ—Ä—Ç –¢–µ—Å—Ç –ë–æ—Ç',
    description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js',
    platforms: [
      {
        platform: 'telegram',
        enabled: true
      }
    ],
    configuration: {
      nodes: [
        {
          id: 'start-cmd',
          type: 'trigger-command',
          data: {
            command: '/start',
            label: '–°—Ç–∞—Ä—Ç',
            description: '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞'
          }
        },
        {
          id: 'start-msg',
          type: 'action-send-message',
          data: {
            text: 'üöÄ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç!\n\n–Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Node.js –∫–æ–¥.',
            label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
            parseMode: 'HTML'
          }
        },
        {
          id: 'info-cmd',
          type: 'trigger-command',
          data: {
            command: '/info',
            label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ'
          }
        },
        {
          id: 'info-msg',
          type: 'action-send-message',
          data: {
            text: 'üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n‚Ä¢ –°–æ–∑–¥–∞–Ω: –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–æ–≤\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: –≤ Node.js –∫–æ–¥\n‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {{message_count}}\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {{user_count}}',
            label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            parseMode: 'HTML'
          }
        }
      ],
      edges: [
        {
          id: 'start-edge',
          source: 'start-cmd',
          target: 'start-msg'
        },
        {
          id: 'info-edge',
          source: 'info-cmd',
          target: 'info-msg'
        }
      ],
      variables: {
        message_count: {
          type: 'number',
          defaultValue: 0
        },
        user_count: {
          type: 'number',
          defaultValue: 0
        }
      }
    }
  };
  
  try {
    const createRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: '/api/bots',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, JSON.stringify(testBot));
    
    if (createRequest.statusCode === 201) {
      const createdBot = JSON.parse(createRequest.data);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω!');
      console.log(`üìã ID: ${createdBot.id}`);
      console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${createdBot.name}`);
      return createdBot.id;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', createRequest.statusCode);
      console.log('üìÑ –û—Ç–≤–µ—Ç:', createRequest.data);
      return null;
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞:', error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runFullTest() {
  console.log('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ Node.js\n');
  console.log('=' .repeat(50));
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–∫—Å–ø–æ—Ä—Ç–∞
  await testExportAPI();
  
  console.log('\n' + '='.repeat(50));
  
  // –°–æ–∑–¥–∞–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
  const newBotId = await createTestBot();
  
  if (newBotId) {
    console.log(`\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞: ${newBotId}`);
    
    try {
      const exportRequest = await makeRequest({
        hostname: 'localhost',
        port: 3002,
        path: `/api/export/${newBotId}/nodejs`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      }, JSON.stringify({ 
        options: {
          includeComments: true,
          minify: false
        }
      }), true);
      
      if (exportRequest.statusCode === 200) {
        console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —É—Å–ø–µ—à–µ–Ω!');
        
        const archivePath = path.join(__dirname, '..', 'temp', `new-bot-export-${Date.now()}.zip`);
        fs.writeFileSync(archivePath, exportRequest.data);
        console.log(`üíæ –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${archivePath}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞:', exportRequest.statusCode);
      }
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞:', error.message);
    }
  }
  
  console.log('\nüéØ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--full')) {
    runFullTest();
  } else if (args.includes('--create')) {
    createTestBot();
  } else {
    testExportAPI();
  }
}

module.exports = {
  testExportAPI,
  createTestBot,
  runFullTest
};