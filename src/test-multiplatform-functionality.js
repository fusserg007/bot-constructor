/**
 * –¢–µ—Å—Ç –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
 */

const fs = require('fs');
const path = require('path');
const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (postData) {
      req.write(postData);
    }
    
    req.end();
  });
}

// –°—Ö–µ–º–∞ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
const multiplatformBotSchema = {
  name: "Multiplatform Test Bot",
  token: "MULTIPLATFORM_TOKEN_123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  description: "Bot for testing multiplatform functionality across Telegram and MAX",
  status: "draft",
  platforms: [
    {
      platform: "telegram",
      enabled: true,
      credentials: {
        token: "TELEGRAM_TEST_TOKEN"
      },
      mode: "polling",
      status: "disconnected"
    },
    {
      platform: "max",
      enabled: true,
      credentials: {
        apiKey: "MAX_TEST_API_KEY",
        secretKey: "MAX_TEST_SECRET_KEY"
      },
      mode: "webhook",
      status: "disconnected"
    }
  ],
  configuration: {
    nodes: [
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      {
        id: "universal-start-trigger",
        type: "trigger-command",
        position: { x: 100, y: 100 },
        data: {
          label: "Universal Start Command",
          command: "/start",
          description: "Works on all platforms",
          color: "#3b82f6",
          platforms: ["telegram", "max"] // –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        }
      },
      {
        id: "universal-welcome-message",
        type: "action-send-message",
        position: { x: 400, y: 100 },
        data: {
          label: "Universal Welcome",
          text: "Welcome to Multiplatform Bot!\n\nThis bot works on multiple messaging platforms:\n‚Ä¢ Telegram\n‚Ä¢ MAX\n\nPlatform: {{current_platform}}\nUser ID: {{user_id}}\nChat ID: {{chat_id}}",
          parseMode: "HTML",
          color: "#10b981",
          platforms: ["telegram", "max"]
        }
      },
      
      // Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      {
        id: "telegram-specific-trigger",
        type: "trigger-command",
        position: { x: 100, y: 250 },
        data: {
          label: "Telegram Only Command",
          command: "/telegram",
          description: "Only works on Telegram",
          color: "#0088cc",
          platforms: ["telegram"] // –¢–æ–ª—å–∫–æ –¥–ª—è Telegram
        }
      },
      {
        id: "telegram-specific-message",
        type: "action-send-message",
        position: { x: 400, y: 250 },
        data: {
          label: "Telegram Features",
          text: "<b>Telegram-specific features:</b>\n\n‚Ä¢ Inline keyboards\n‚Ä¢ Media groups\n‚Ä¢ Stickers\n‚Ä¢ Voice messages\n‚Ä¢ File uploads\n‚Ä¢ Channels support\n\nThis message uses HTML formatting specific to Telegram.",
          parseMode: "HTML",
          color: "#0088cc",
          platforms: ["telegram"]
        }
      },
      
      // MAX-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      {
        id: "max-specific-trigger",
        type: "trigger-command",
        position: { x: 100, y: 400 },
        data: {
          label: "MAX Only Command",
          command: "/max",
          description: "Only works on MAX",
          color: "#ff6b35",
          platforms: ["max"] // –¢–æ–ª—å–∫–æ –¥–ª—è MAX
        }
      },
      {
        id: "max-specific-message",
        type: "action-send-message",
        position: { x: 400, y: 400 },
        data: {
          label: "MAX Features",
          text: "MAX-specific features:\n\n‚Ä¢ Corporate messaging\n‚Ä¢ Team collaboration\n‚Ä¢ File sharing\n‚Ä¢ Video calls integration\n‚Ä¢ Business workflows\n\nThis message is optimized for MAX platform.",
          parseMode: "HTML",
          color: "#ff6b35",
          platforms: ["max"]
        }
      },
      
      // –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      {
        id: "adaptation-test-trigger",
        type: "trigger-command",
        position: { x: 100, y: 550 },
        data: {
          label: "Message Adaptation Test",
          command: "/adapt",
          description: "Test message adaptation",
          color: "#8b5cf6",
          platforms: ["telegram", "max"]
        }
      },
      {
        id: "adaptation-test-message",
        type: "action-send-message",
        position: { x: 400, y: 550 },
        data: {
          label: "Adaptive Message",
          text: "{{#if telegram}}This is Telegram! You can use <b>HTML</b> and <i>formatting</i>.{{/if}}{{#if max}}This is MAX! Simple text formatting works best here.{{/if}}\n\nPlatform capabilities:\n{{#if telegram}}‚Ä¢ Supports HTML formatting\n‚Ä¢ Inline keyboards available\n‚Ä¢ Media support: full{{/if}}{{#if max}}‚Ä¢ Basic text formatting\n‚Ä¢ Button support: limited\n‚Ä¢ Media support: basic{{/if}}",
          parseMode: "HTML",
          color: "#8b5cf6",
          platforms: ["telegram", "max"],
          adaptiveContent: true // –§–ª–∞–≥ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        }
      },
      
      // –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫
      {
        id: "error-test-trigger",
        type: "trigger-command",
        position: { x: 100, y: 700 },
        data: {
          label: "Error Isolation Test",
          command: "/error",
          description: "Test error isolation between platforms",
          color: "#ef4444",
          platforms: ["telegram", "max"]
        }
      },
      {
        id: "error-test-action",
        type: "action-send-message",
        position: { x: 400, y: 700 },
        data: {
          label: "Error Test Message",
          text: "Testing error isolation...\n\nThis message will intentionally cause different behaviors on different platforms to test error isolation.",
          parseMode: "HTML",
          color: "#ef4444",
          platforms: ["telegram", "max"],
          errorTest: true // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        }
      }
    ],
    edges: [
      {
        id: "universal-start-edge",
        source: "universal-start-trigger",
        target: "universal-welcome-message"
      },
      {
        id: "telegram-specific-edge",
        source: "telegram-specific-trigger",
        target: "telegram-specific-message"
      },
      {
        id: "max-specific-edge",
        source: "max-specific-trigger",
        target: "max-specific-message"
      },
      {
        id: "adaptation-test-edge",
        source: "adaptation-test-trigger",
        target: "adaptation-test-message"
      },
      {
        id: "error-test-edge",
        source: "error-test-trigger",
        target: "error-test-action"
      }
    ],
    variables: {
      current_platform: {
        type: "string",
        defaultValue: "unknown",
        description: "Current messaging platform"
      },
      user_id: {
        type: "string",
        defaultValue: "unknown",
        description: "User ID on current platform"
      },
      chat_id: {
        type: "string",
        defaultValue: "unknown",
        description: "Chat ID on current platform"
      },
      telegram_features: {
        type: "boolean",
        defaultValue: false,
        description: "Telegram-specific features available"
      },
      max_features: {
        type: "boolean",
        defaultValue: false,
        description: "MAX-specific features available"
      }
    },
    settings: {
      logging: true,
      debug: true,
      errorHandling: "graceful",
      platformIsolation: true, // –í–∫–ª—é—á–∞–µ–º –∏–∑–æ–ª—è—Ü–∏—é –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
      adaptiveMessaging: true, // –í–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      crossPlatformVariables: true // –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    }
  },
  stats: {
    messagesProcessed: 0,
    activeUsers: 0,
    uptime: 1,
    lastActivity: new Date().toISOString(),
    platformStats: {
      telegram: {
        messagesProcessed: 0,
        activeUsers: 0,
        errors: 0
      },
      max: {
        messagesProcessed: 0,
        activeUsers: 0,
        errors: 0
      }
    }
  },
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
async function createMultiplatformBot() {
  console.log('üåê –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...\n');
  
  try {
    const botId = `multiplatform-test-${Date.now()}`;
    const botData = {
      ...multiplatformBotSchema,
      id: botId
    };
    
    const botsDir = path.join(__dirname, '..', 'data', 'bots');
    const botPath = path.join(botsDir, `bot_${botId}.json`);
    
    if (!fs.existsSync(botsDir)) {
      fs.mkdirSync(botsDir, { recursive: true });
    }
    
    fs.writeFileSync(botPath, JSON.stringify(botData, null, 2));
    
    console.log('‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω!');
    console.log(`üìã ID: ${botData.id}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${botData.name}`);
    console.log(`üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${botData.platforms.map(p => p.platform).join(', ')}`);
    console.log(`üìä –£–∑–ª–æ–≤: ${botData.configuration.nodes.length}`);
    console.log(`üîó –°–≤—è–∑–µ–π: ${botData.configuration.edges.length}`);
    console.log(`üíæ –§–∞–π–ª: ${botPath}`);
    
    return botData;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
async function testMultiplatformFunctionality(botId) {
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ ${botId}...\n`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API
    const botRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/bots/${botId}`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (botRequest.statusCode !== 200) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API');
      return false;
    }
    
    const botResponse = JSON.parse(botRequest.data);
    const bot = botResponse.data || botResponse;
    
    console.log('‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\nüìã –¢–µ—Å—Ç 1: –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
    
    const platformChecks = [
      {
        condition: bot.platforms && bot.platforms.length >= 2,
        name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º',
        value: bot.platforms ? bot.platforms.length : 0
      },
      {
        condition: bot.platforms && bot.platforms.some(p => p.platform === 'telegram'),
        name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram',
        value: bot.platforms ? bot.platforms.find(p => p.platform === 'telegram') ? '–î–∞' : '–ù–µ—Ç' : '–ù–µ—Ç'
      },
      {
        condition: bot.platforms && bot.platforms.some(p => p.platform === 'max'),
        name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ MAX',
        value: bot.platforms ? bot.platforms.find(p => p.platform === 'max') ? '–î–∞' : '–ù–µ—Ç' : '–ù–µ—Ç'
      },
      {
        condition: bot.configuration && bot.configuration.settings && bot.configuration.settings.platformIsolation,
        name: '–ò–∑–æ–ª—è—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º',
        value: bot.configuration?.settings?.platformIsolation ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'
      },
      {
        condition: bot.configuration && bot.configuration.settings && bot.configuration.settings.adaptiveMessaging,
        name: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        value: bot.configuration?.settings?.adaptiveMessaging ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'
      }
    ];
    
    let platformTestsPassed = 0;
    platformChecks.forEach(check => {
      if (check.condition) {
        console.log(`  ‚úÖ ${check.name}: ${check.value}`);
        platformTestsPassed++;
      } else {
        console.log(`  ‚ùå ${check.name}: ${check.value}`);
      }
    });
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —É–∑–ª–æ–≤
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É–∑–ª—ã');
    
    if (bot.configuration && bot.configuration.nodes) {
      const universalNodes = bot.configuration.nodes.filter(node => 
        node.data.platforms && node.data.platforms.includes('telegram') && node.data.platforms.includes('max')
      );
      
      const telegramOnlyNodes = bot.configuration.nodes.filter(node => 
        node.data.platforms && node.data.platforms.includes('telegram') && !node.data.platforms.includes('max')
      );
      
      const maxOnlyNodes = bot.configuration.nodes.filter(node => 
        node.data.platforms && node.data.platforms.includes('max') && !node.data.platforms.includes('telegram')
      );
      
      console.log(`  ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É–∑–ª—ã: ${universalNodes.length}`);
      console.log(`  ‚úÖ –¢–æ–ª—å–∫–æ Telegram: ${telegramOnlyNodes.length}`);
      console.log(`  ‚úÖ –¢–æ–ª—å–∫–æ MAX: ${maxOnlyNodes.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      const commands = bot.configuration.nodes
        .filter(node => node.type === 'trigger-command')
        .map(node => ({
          command: node.data.command,
          platforms: node.data.platforms || ['all']
        }));
      
      console.log('\n  üìã –ö–æ–º–∞–Ω–¥—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:');
      commands.forEach(cmd => {
        console.log(`    ‚Ä¢ ${cmd.command}: ${cmd.platforms.join(', ')}`);
      });
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('\nüìã –¢–µ—Å—Ç 3: –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π');
    
    if (bot.configuration && bot.configuration.nodes) {
      const adaptiveNodes = bot.configuration.nodes.filter(node => 
        node.data.adaptiveContent === true
      );
      
      console.log(`  ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —É–∑–ª–æ–≤: ${adaptiveNodes.length}`);
      
      adaptiveNodes.forEach(node => {
        console.log(`    ‚Ä¢ ${node.data.label}: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ${node.data.platforms?.join(', ') || '–≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã'}`);
      });
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫
    console.log('\nüìã –¢–µ—Å—Ç 4: –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫');
    
    const errorTestNodes = bot.configuration?.nodes?.filter(node => 
      node.data.errorTest === true
    ) || [];
    
    console.log(`  ‚úÖ –£–∑–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫: ${errorTestNodes.length}`);
    
    if (bot.stats && bot.stats.platformStats) {
      console.log('  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:');
      Object.entries(bot.stats.platformStats).forEach(([platform, stats]) => {
        console.log(`    ‚Ä¢ ${platform}: ${stats.messagesProcessed} —Å–æ–æ–±—â–µ–Ω–∏–π, ${stats.errors} –æ—à–∏–±–æ–∫`);
      });
    }
    
    // –¢–µ—Å—Ç 5: –≠–∫—Å–ø–æ—Ä—Ç –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    console.log('\nüìã –¢–µ—Å—Ç 5: –≠–∫—Å–ø–æ—Ä—Ç –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞');
    
    const exportRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/export/${botId}/nodejs`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, JSON.stringify({ 
      options: {
        includeComments: true,
        multiplatform: true
      }
    }), true);
    
    if (exportRequest.statusCode === 200) {
      console.log('  ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`  üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: ${Math.round(exportRequest.data.length / 1024)} KB`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const archivePath = path.join(__dirname, '..', 'temp', `multiplatform-bot-${Date.now()}.zip`);
      fs.writeFileSync(archivePath, exportRequest.data);
      console.log(`  üíæ –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${archivePath}`);
    } else {
      console.log('  ‚ùå –≠–∫—Å–ø–æ—Ä—Ç –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalTests = platformChecks.length;
    const successRate = (platformTestsPassed / totalTests) * 100;
    
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${platformTestsPassed}/${totalTests} (${successRate.toFixed(1)}%)`);
    
    const success = successRate >= 80; // 80% —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
    
    if (success) {
      console.log('\nüéâ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:');
      console.log('‚Ä¢ –ï–¥–∏–Ω–∞—è —Å—Ö–µ–º–∞ –ª–æ–≥–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º');
      console.log('‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏');
      console.log('‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ –∫–∞–∂–¥—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É');
      console.log('‚Ä¢ –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏');
      console.log('‚Ä¢ –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      console.log('‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∫–æ–¥');
      
    } else {
      console.log('\n‚ö†Ô∏è –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ');
    }
    
    return success;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
async function testAdapters() {
  console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    const adaptersDir = path.join(__dirname, 'adapters');
    const coreAdaptersDir = path.join(__dirname, 'core', 'adapters');
    
    const adapterFiles = [
      { path: path.join(adaptersDir, 'TelegramAdapter.ts'), name: 'TelegramAdapter' },
      { path: path.join(adaptersDir, 'MaxAdapter.ts'), name: 'MaxAdapter' },
      { path: path.join(coreAdaptersDir, 'MessengerAdapter.ts'), name: 'MessengerAdapter (–±–∞–∑–æ–≤—ã–π)' },
      { path: path.join(coreAdaptersDir, 'AdapterRegistry.ts'), name: 'AdapterRegistry' }
    ];
    
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤:');
    let adaptersFound = 0;
    
    adapterFiles.forEach(adapter => {
      if (fs.existsSync(adapter.path)) {
        console.log(`  ‚úÖ ${adapter.name}`);
        adaptersFound++;
      } else {
        console.log(`  ‚ùå ${adapter.name} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: ${adaptersFound}/${adapterFiles.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    if (fs.existsSync(path.join(adaptersDir, 'TelegramAdapter.ts'))) {
      const telegramContent = fs.readFileSync(path.join(adaptersDir, 'TelegramAdapter.ts'), 'utf8');
      
      const telegramFeatures = [
        { pattern: /class TelegramAdapter/, name: '–ö–ª–∞—Å—Å TelegramAdapter' },
        { pattern: /async sendMessage/, name: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π' },
        { pattern: /async sendMedia/, name: '–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞' },
        { pattern: /async startPolling/, name: 'Polling —Ä–µ–∂–∏–º' },
        { pattern: /async setWebhook/, name: 'Webhook —Ä–µ–∂–∏–º' },
        { pattern: /processUpdate/, name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π' },
        { pattern: /validateCredentials/, name: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤' }
      ];
      
      console.log('\nüìã –§—É–Ω–∫—Ü–∏–∏ Telegram –∞–¥–∞–ø—Ç–µ—Ä–∞:');
      telegramFeatures.forEach(feature => {
        if (feature.pattern.test(telegramContent)) {
          console.log(`  ‚úÖ ${feature.name}`);
        } else {
          console.log(`  ‚ùå ${feature.name}`);
        }
      });
    }
    
    if (fs.existsSync(path.join(adaptersDir, 'MaxAdapter.ts'))) {
      const maxContent = fs.readFileSync(path.join(adaptersDir, 'MaxAdapter.ts'), 'utf8');
      
      const maxFeatures = [
        { pattern: /class MaxAdapter/, name: '–ö–ª–∞—Å—Å MaxAdapter' },
        { pattern: /async sendMessage/, name: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π' },
        { pattern: /async sendMedia/, name: '–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞' },
        { pattern: /async setWebhook/, name: 'Webhook —Ä–µ–∂–∏–º' },
        { pattern: /processWebhook/, name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook' },
        { pattern: /validateCredentials/, name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–π' }
      ];
      
      console.log('\nüìã –§—É–Ω–∫—Ü–∏–∏ MAX –∞–¥–∞–ø—Ç–µ—Ä–∞:');
      maxFeatures.forEach(feature => {
        if (feature.pattern.test(maxContent)) {
          console.log(`  ‚úÖ ${feature.name}`);
        } else {
          console.log(`  ‚ùå ${feature.name}`);
        }
      });
    }
    
    return adaptersFound >= 3; // –ú–∏–Ω–∏–º—É–º 3 –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n');
  console.log('='.repeat(70));
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã
  const adaptersOk = await testAdapters();
  
  // –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
  const createdBot = await createMultiplatformBot();
  
  if (!createdBot) {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞');
    return;
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å
  const multiplatformOk = await testMultiplatformFunctionality(createdBot.id);
  
  console.log('\n' + '='.repeat(70));
  
  if (adaptersOk && multiplatformOk) {
    console.log('‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    console.log('\nüìã –ò—Ç–æ–≥–∏:');
    console.log('‚úÖ –ê–¥–∞–ø—Ç–µ—Ä—ã –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω');
    console.log('‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
  } else {
    console.log('‚ùå –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏');
    
    if (!adaptersOk) {
      console.log('‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤');
    }
    if (!multiplatformOk) {
      console.log('‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  main();
}

module.exports = {
  createMultiplatformBot,
  testMultiplatformFunctionality,
  testAdapters,
  multiplatformBotSchema
};