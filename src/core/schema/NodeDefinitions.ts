/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
 */

import { NodeTypeDefinition } from './NodeTypes';

// –¢—Ä–∏–≥–≥–µ—Ä: –ö–æ–º–∞–Ω–¥–∞
export const TriggerCommandNode: NodeTypeDefinition = {
  type: 'trigger-command',
  name: '–ö–æ–º–∞–Ω–¥–∞',
  metadata: {
    category: 'triggers',
    subcategory: 'user-input',
    icon: '‚ö°',
    color: '#4CAF50',
    description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    supportedPlatforms: 'all',
    version: '1.0.0',
    examples: [
      {
        title: '–ö–æ–º–∞–Ω–¥–∞ /start',
        description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞',
        config: { command: '/start', caseSensitive: false }
      }
    ]
  },
  inputs: [],
  outputs: [
    {
      id: 'trigger',
      name: '–¢—Ä–∏–≥–≥–µ—Ä',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: true,
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã'
    },
    {
      id: 'message',
      name: '–°–æ–æ–±—â–µ–Ω–∏–µ',
      type: 'data',
      direction: 'output',
      dataType: 'object',
      required: false,
      description: '–î–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
    },
    {
      id: 'user',
      name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      type: 'data',
      direction: 'output',
      dataType: 'object',
      required: false,
      description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
    }
  ],
  configFields: {
    command: {
      type: 'text',
      label: '–ö–æ–º–∞–Ω–¥–∞',
      description: '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /start, /help)',
      required: true,
      placeholder: '/start',
      validation: {
        pattern: '^/[a-zA-Z0-9_]+$'
      }
    },
    caseSensitive: {
      type: 'boolean',
      label: '–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä',
      description: '–†–∞–∑–ª–∏—á–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã',
      defaultValue: false
    },
    description: {
      type: 'textarea',
      label: '–û–ø–∏—Å–∞–Ω–∏–µ',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      placeholder: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
    }
  },
  defaultConfig: {
    command: '/start',
    caseSensitive: false,
    description: ''
  }
};

// –¢—Ä–∏–≥–≥–µ—Ä: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
export const TriggerMessageNode: NodeTypeDefinition = {
  type: 'trigger-message',
  name: '–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
  metadata: {
    category: 'triggers',
    subcategory: 'user-input',
    icon: 'üí¨',
    color: '#2196F3',
    description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
    supportedPlatforms: 'all',
    version: '1.0.0'
  },
  inputs: [],
  outputs: [
    {
      id: 'trigger',
      name: '–¢—Ä–∏–≥–≥–µ—Ä',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: true
    },
    {
      id: 'text',
      name: '–¢–µ–∫—Å—Ç',
      type: 'data',
      direction: 'output',
      dataType: 'string',
      required: false
    },
    {
      id: 'message',
      name: '–°–æ–æ–±—â–µ–Ω–∏–µ',
      type: 'data',
      direction: 'output',
      dataType: 'object',
      required: false
    }
  ],
  configFields: {
    pattern: {
      type: 'text',
      label: '–®–∞–±–ª–æ–Ω',
      description: '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç',
      placeholder: '–ø—Ä–∏–≤–µ—Ç|hello|hi'
    },
    matchType: {
      type: 'select',
      label: '–¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è',
      options: [
        { value: 'exact', label: '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ' },
        { value: 'contains', label: '–°–æ–¥–µ—Ä–∂–∏—Ç' },
        { value: 'regex', label: '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ' },
        { value: 'any', label: '–õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' }
      ],
      defaultValue: 'any'
    },
    caseSensitive: {
      type: 'boolean',
      label: '–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä',
      defaultValue: false
    }
  },
  defaultConfig: {
    pattern: '',
    matchType: 'any',
    caseSensitive: false
  }
};

// –î–µ–π—Å—Ç–≤–∏–µ: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
export const ActionSendMessageNode: NodeTypeDefinition = {
  type: 'action-send-message',
  name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
  metadata: {
    category: 'actions',
    subcategory: 'messaging',
    icon: 'üì§',
    color: '#FF9800',
    description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
    supportedPlatforms: 'all',
    version: '1.0.0'
  },
  inputs: [
    {
      id: 'trigger',
      name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å',
      type: 'control',
      direction: 'input',
      dataType: 'any',
      required: true
    },
    {
      id: 'text',
      name: '–¢–µ–∫—Å—Ç',
      type: 'data',
      direction: 'input',
      dataType: 'string',
      required: false,
      description: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'
    },
    {
      id: 'chatId',
      name: 'ID —á–∞—Ç–∞',
      type: 'data',
      direction: 'input',
      dataType: 'string',
      required: false,
      description: 'ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)'
    }
  ],
  outputs: [
    {
      id: 'success',
      name: '–£—Å–ø–µ—Ö',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: false
    },
    {
      id: 'error',
      name: '–û—à–∏–±–∫–∞',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: false
    },
    {
      id: 'messageId',
      name: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è',
      type: 'data',
      direction: 'output',
      dataType: 'string',
      required: false
    }
  ],
  configFields: {
    text: {
      type: 'textarea',
      label: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
      description: '–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{variable}}',
      required: true,
      placeholder: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'
    },
    parseMode: {
      type: 'select',
      label: '–†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏',
      options: [
        { value: 'none', label: '–ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏' },
        { value: 'HTML', label: 'HTML' },
        { value: 'Markdown', label: 'Markdown' }
      ],
      defaultValue: 'HTML'
    },
    disablePreview: {
      type: 'boolean',
      label: '–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫',
      defaultValue: false
    },
    buttons: {
      type: 'json',
      label: '–ö–Ω–æ–ø–∫–∏',
      description: 'JSON –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫',
      placeholder: '[{"text": "–ö–Ω–æ–ø–∫–∞", "callbackData": "button_1"}]'
    }
  },
  defaultConfig: {
    text: '–ü—Ä–∏–≤–µ—Ç!',
    parseMode: 'HTML',
    disablePreview: false,
    buttons: []
  }
};

// –£—Å–ª–æ–≤–∏–µ: –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
export const ConditionTextContainsNode: NodeTypeDefinition = {
  type: 'condition-text-contains',
  name: '–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç',
  metadata: {
    category: 'conditions',
    subcategory: 'text',
    icon: 'üîç',
    color: '#9C27B0',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É',
    supportedPlatforms: 'all',
    version: '1.0.0'
  },
  inputs: [
    {
      id: 'trigger',
      name: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
      type: 'control',
      direction: 'input',
      dataType: 'any',
      required: true
    },
    {
      id: 'text',
      name: '–¢–µ–∫—Å—Ç',
      type: 'data',
      direction: 'input',
      dataType: 'string',
      required: true,
      description: '–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
    }
  ],
  outputs: [
    {
      id: 'true',
      name: '–î–∞',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: false
    },
    {
      id: 'false',
      name: '–ù–µ—Ç',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: false
    },
    {
      id: 'result',
      name: '–†–µ–∑—É–ª—å—Ç–∞—Ç',
      type: 'data',
      direction: 'output',
      dataType: 'boolean',
      required: false
    }
  ],
  configFields: {
    searchText: {
      type: 'text',
      label: '–ò—Å–∫–æ–º—ã–π —Ç–µ–∫—Å—Ç',
      description: '–¢–µ–∫—Å—Ç –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞',
      required: true,
      placeholder: '–ø—Ä–∏–≤–µ—Ç'
    },
    matchType: {
      type: 'select',
      label: '–¢–∏–ø –ø–æ–∏—Å–∫–∞',
      options: [
        { value: 'contains', label: '–°–æ–¥–µ—Ä–∂–∏—Ç' },
        { value: 'exact', label: '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ' },
        { value: 'regex', label: '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ' },
        { value: 'startsWith', label: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å' },
        { value: 'endsWith', label: '–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞' }
      ],
      defaultValue: 'contains'
    },
    caseSensitive: {
      type: 'boolean',
      label: '–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä',
      defaultValue: false
    }
  },
  defaultConfig: {
    searchText: '',
    matchType: 'contains',
    caseSensitive: false
  }
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è
export const DataVariableNode: NodeTypeDefinition = {
  type: 'data-variable',
  name: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è',
  metadata: {
    category: 'data',
    subcategory: 'storage',
    icon: 'üì¶',
    color: '#607D8B',
    description: '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö',
    supportedPlatforms: 'all',
    version: '1.0.0'
  },
  inputs: [
    {
      id: 'get',
      name: '–ü–æ–ª—É—á–∏—Ç—å',
      type: 'control',
      direction: 'input',
      dataType: 'any',
      required: false
    },
    {
      id: 'set',
      name: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
      type: 'control',
      direction: 'input',
      dataType: 'any',
      required: false
    },
    {
      id: 'value',
      name: '–ó–Ω–∞—á–µ–Ω–∏–µ',
      type: 'data',
      direction: 'input',
      dataType: 'any',
      required: false
    }
  ],
  outputs: [
    {
      id: 'output',
      name: '–ó–Ω–∞—á–µ–Ω–∏–µ',
      type: 'data',
      direction: 'output',
      dataType: 'any',
      required: false
    },
    {
      id: 'success',
      name: '–£—Å–ø–µ—Ö',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: false
    }
  ],
  configFields: {
    variableName: {
      type: 'text',
      label: '–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π',
      description: '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π',
      required: true,
      placeholder: 'userName',
      validation: {
        pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$'
      }
    },
    scope: {
      type: 'select',
      label: '–û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏',
      options: [
        { value: 'global', label: '–ì–ª–æ–±–∞–ª—å–Ω–∞—è' },
        { value: 'user', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
        { value: 'chat', label: '–ß–∞—Ç' },
        { value: 'session', label: '–°–µ—Å—Å–∏—è' }
      ],
      defaultValue: 'user'
    },
    dataType: {
      type: 'select',
      label: '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö',
      options: [
        { value: 'string', label: '–°—Ç—Ä–æ–∫–∞' },
        { value: 'number', label: '–ß–∏—Å–ª–æ' },
        { value: 'boolean', label: '–õ–æ–≥–∏—á–µ—Å–∫–∏–π' },
        { value: 'object', label: '–û–±—ä–µ–∫—Ç' },
        { value: 'array', label: '–ú–∞—Å—Å–∏–≤' }
      ],
      defaultValue: 'string'
    },
    defaultValue: {
      type: 'text',
      label: '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      description: '–ó–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
    }
  },
  defaultConfig: {
    variableName: '',
    scope: 'user',
    dataType: 'string',
    defaultValue: ''
  }
};

// HTTP –∑–∞–ø—Ä–æ—Å
export const IntegrationHttpNode: NodeTypeDefinition = {
  type: 'integration-http',
  name: 'HTTP –∑–∞–ø—Ä–æ—Å',
  metadata: {
    category: 'integrations',
    subcategory: 'api',
    icon: 'üåê',
    color: '#795548',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API',
    supportedPlatforms: 'all',
    version: '1.0.0'
  },
  inputs: [
    {
      id: 'trigger',
      name: '–í—ã–ø–æ–ª–Ω–∏—Ç—å',
      type: 'control',
      direction: 'input',
      dataType: 'any',
      required: true
    },
    {
      id: 'url',
      name: 'URL',
      type: 'data',
      direction: 'input',
      dataType: 'string',
      required: false
    },
    {
      id: 'body',
      name: '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞',
      type: 'data',
      direction: 'input',
      dataType: 'object',
      required: false
    }
  ],
  outputs: [
    {
      id: 'success',
      name: '–£—Å–ø–µ—Ö',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: false
    },
    {
      id: 'error',
      name: '–û—à–∏–±–∫–∞',
      type: 'control',
      direction: 'output',
      dataType: 'any',
      required: false
    },
    {
      id: 'response',
      name: '–û—Ç–≤–µ—Ç',
      type: 'data',
      direction: 'output',
      dataType: 'object',
      required: false
    },
    {
      id: 'statusCode',
      name: '–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞',
      type: 'data',
      direction: 'output',
      dataType: 'number',
      required: false
    }
  ],
  configFields: {
    method: {
      type: 'select',
      label: 'HTTP –º–µ—Ç–æ–¥',
      options: [
        { value: 'GET', label: 'GET' },
        { value: 'POST', label: 'POST' },
        { value: 'PUT', label: 'PUT' },
        { value: 'DELETE', label: 'DELETE' },
        { value: 'PATCH', label: 'PATCH' }
      ],
      defaultValue: 'GET'
    },
    url: {
      type: 'text',
      label: 'URL',
      description: 'URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{variable}}',
      required: true,
      placeholder: 'https://api.example.com/data'
    },
    headers: {
      type: 'json',
      label: '–ó–∞–≥–æ–ª–æ–≤–∫–∏',
      description: 'HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON',
      placeholder: '{"Content-Type": "application/json"}'
    },
    timeout: {
      type: 'number',
      label: '–¢–∞–π–º–∞—É—Ç (—Å–µ–∫)',
      defaultValue: 30,
      validation: { min: 1, max: 300 }
    },
    retries: {
      type: 'number',
      label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤',
      defaultValue: 0,
      validation: { min: 0, max: 5 }
    }
  },
  defaultConfig: {
    method: 'GET',
    url: '',
    headers: {},
    timeout: 30,
    retries: 0
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
export const NodeDefinitions: Record<string, NodeTypeDefinition> = {
  'trigger-command': TriggerCommandNode,
  'trigger-message': TriggerMessageNode,
  'action-send-message': ActionSendMessageNode,
  'condition-text-contains': ConditionTextContainsNode,
  'data-variable': DataVariableNode,
  'integration-http': IntegrationHttpNode
};

export default NodeDefinitions;