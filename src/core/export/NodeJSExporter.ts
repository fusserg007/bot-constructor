/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º—ã –±–æ—Ç–∞ –≤ Node.js –∫–æ–¥
 */

export interface ExportOptions {
  includeComments: boolean;
  minify: boolean;
  platform: string;
  outputDir: string;
  multiplatform?: boolean;
  includeIntegrations?: boolean;
  includeAdvancedFeatures?: boolean;
  generateTests?: boolean;
  generateDocumentation?: boolean;
}

export interface ExportResult {
  success: boolean;
  files: ExportedFile[];
  error?: string;
}

export interface ExportedFile {
  path: string;
  content: string;
  type: 'js' | 'json' | 'md' | 'txt';
}

export class NodeJSExporter {
  private botSchema: any;
  private options: ExportOptions;

  constructor(botSchema: any, options: Partial<ExportOptions> = {}) {
    this.botSchema = botSchema;
    this.options = {
      includeComments: true,
      minify: false,
      platform: 'telegram',
      outputDir: './exported-bot',
      multiplatform: false,
      includeIntegrations: true,
      includeAdvancedFeatures: true,
      generateTests: false,
      generateDocumentation: true,
      ...options
    };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –≤ Node.js –ø—Ä–æ–µ–∫—Ç
   */
  export(): ExportResult {
    try {
      const files: ExportedFile[] = [];

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
      files.push(this.generateMainFile());
      files.push(this.generatePackageJson());
      files.push(this.generateReadme());
      files.push(this.generateEnvExample());
      files.push(this.generateConfigFile());

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (this.options.includeIntegrations) {
        files.push(this.generateIntegrationsFile());
      }
      
      if (this.options.includeAdvancedFeatures) {
        files.push(this.generateUtilsFile());
        files.push(this.generateStateManagerFile());
      }
      
      if (this.options.generateTests) {
        files.push(...this.generateTestFiles());
      }
      
      if (this.options.generateDocumentation) {
        files.push(this.generateApiDocumentation());
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∑–ª–æ–≤
      files.push(...this.generateNodeHandlers());

      return {
        success: true,
        files
      };
    } catch (error) {
      return {
        success: false,
        files: [],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private generateMainFile(): ExportedFile {
    const mainCode = `${this.options.includeComments ? this.generateFileHeader() : ''}
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = require('./config.json');

${this.options.includeAdvancedFeatures ? `// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏
const StateManager = require('./state-manager');
const BotUtils = require('./utils');` : ''}
${this.options.includeIntegrations ? `const IntegrationManager = require('./integrations');` : ''}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

${this.options.includeAdvancedFeatures ? `// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
const stateManager = new StateManager();` : '// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nconst userStates = new Map();'}
${this.options.includeIntegrations ? `const integrationManager = new IntegrationManager();` : ''}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
const botVariables = ${JSON.stringify(this.botSchema.configuration?.variables || {}, null, 2)};

${this.options.includeComments ? '// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥' : ''}
${this.generateCommandHandlers()}

${this.options.includeComments ? '// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' : ''}
${this.generateMessageHandlers()}

${this.options.includeComments ? '// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤' : ''}
${this.generateCallbackHandlers()}

${this.options.includeComments ? '// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏' : ''}
${this.generateHelperFunctions()}

${this.options.includeComments ? '// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' : ''}
BotUtils.logWithTimestamp('info', 'ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
BotUtils.logWithTimestamp('info', '–ù–∞–∑–≤–∞–Ω–∏–µ:', config.name);
BotUtils.logWithTimestamp('info', '–û–ø–∏—Å–∞–Ω–∏–µ:', config.description);

bot.on('polling_error', (error) => {
  BotUtils.logWithTimestamp('error', '–û—à–∏–±–∫–∞ polling:', error.message);
});

process.on('SIGINT', () => {
  BotUtils.logWithTimestamp('info', 'üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  ${this.options.includeAdvancedFeatures ? 'stateManager.cleanup();' : ''}
  bot.stopPolling();
  process.exit(0);
});
`;

    return {
      path: 'index.js',
      content: mainCode,
      type: 'js'
    };
  }

  private generateFileHeader(): string {
    return `/**
 * ${this.botSchema.name}
 * ${this.botSchema.description}
 * 
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
 * –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
 */

`;
  }  private g
enerateCommandHandlers(): string {
    const commandNodes = this.botSchema.configuration?.nodes?.filter(
      (node: any) => node.type === 'trigger-command'
    ) || [];

    return commandNodes.map((node: any) => {
      const command = node.data.command;
      const handlerName = this.sanitizeHandlerName(command);
      
      return `
bot.onText(/${command.replace('/', '\\/')}/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  console.log(\`üì® –ö–æ–º–∞–Ω–¥–∞ ${command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}\`);
  
  try {
    await handle${handlerName}(chatId, userId, msg);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${command}:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
  }
});`;
    }).join('\n');
  }

  private generateMessageHandlers(): string {
    const messageNodes = this.botSchema.configuration?.nodes?.filter(
      (node: any) => node.type === 'trigger-message'
    ) || [];

    if (messageNodes.length === 0) return '';

    return `
bot.on('message', async (msg) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  if (msg.text && msg.text.startsWith('/')) return;
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  ${this.options.includeAdvancedFeatures ? 
    `BotUtils.logWithTimestamp('info', \`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}: \${BotUtils.truncateText(msg.text || '–º–µ–¥–∏–∞')}\`);` :
    `console.log(\`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}: \${msg.text}\`);`}
  
  try {
    await handleMessage(chatId, userId, msg);
  } catch (error) {
    ${this.options.includeAdvancedFeatures ? 
      `BotUtils.logWithTimestamp('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);` :
      `console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);`}
  }
});`;
  }

  private generateCallbackHandlers(): string {
    const hasButtons = this.botSchema.configuration?.nodes?.some(
      (node: any) => node.data.buttons && node.data.buttons.length > 0
    );

    if (!hasButtons) return '';

    return `
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  ${this.options.includeAdvancedFeatures ? 
    `BotUtils.logWithTimestamp('info', \`üîò Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}: \${data}\`);` :
    `console.log(\`üîò Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}: \${data}\`);`}
  
  try {
    await handleCallback(chatId, userId, data, callbackQuery);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    ${this.options.includeAdvancedFeatures ? 
      `BotUtils.logWithTimestamp('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error.message);` :
      `console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);`}
    bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});`;
  }

  private generateHelperFunctions(): string {
    const commandNodes = this.botSchema.configuration?.nodes?.filter(
      (node: any) => node.type === 'trigger-command'
    ) || [];

    const commandHandlers = commandNodes.map((node: any) => {
      const command = node.data.command;
      const handlerName = this.sanitizeHandlerName(command);
      const connectedActions = this.getConnectedActions(node.id);
      
      return `
async function handle${handlerName}(chatId, userId, msg) {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ${this.options.includeAdvancedFeatures ? 'stateManager.updateUserActivity(userId);' : 'updateUserState(userId);'}
  
${connectedActions.map(action => this.generateActionCode(action)).join('\n')}
}`;
    }).join('\n');

    const messageHandler = `
async function handleMessage(chatId, userId, msg) {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ${this.options.includeAdvancedFeatures ? 'stateManager.updateUserActivity(userId);' : 'updateUserState(userId);'}
  
  ${this.options.includeAdvancedFeatures ? `// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  stateManager.setUserVariable(userId, 'message_text', msg.text || '');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const conditionNodes = ${JSON.stringify(
    this.botSchema.configuration?.nodes?.filter((node: any) => node.type?.includes('condition')) || []
  )};
  
  for (const condition of conditionNodes) {
    if (await evaluateCondition(condition, msg, userId)) {
      const connectedActions = getConnectedActionsFromCondition(condition.id, true);
      for (const action of connectedActions) {
        await executeAction(action, chatId, userId, msg);
      }
      return;
    }
  }
  
  // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultActions = getConnectedActionsFromCondition('text-handler', false);
  for (const action of defaultActions) {
    await executeAction(action, chatId, userId, msg);
  }` : `// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg.text);`}
}`;

    const callbackHandler = `
async function handleCallback(chatId, userId, data, callbackQuery) {
  ${this.options.includeAdvancedFeatures ? 'stateManager.updateUserActivity(userId);' : 'updateUserState(userId);'}
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö
  if (data.startsWith('quiz_')) {
    await handleQuizAnswer(chatId, userId, data, callbackQuery);
  } else {
    ${this.options.includeAdvancedFeatures ? 
      `BotUtils.logWithTimestamp('warn', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:', data);` :
      `console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:', data);`}
  }
}

async function handleQuizAnswer(chatId, userId, answer, callbackQuery) {
  const correctAnswer = 'quiz_b'; // JavaScript/Node.js
  const isCorrect = answer === correctAnswer;
  
  const responseText = isCorrect 
    ? 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ—Ç –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ JavaScript/Node.js'
    : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: B) JavaScript/Node.js';
    
  await bot.editMessageText(responseText, {
    chat_id: chatId,
    message_id: callbackQuery.message.message_id,
    parse_mode: 'HTML'
  });
}`;

    const utilityFunctions = this.options.includeAdvancedFeatures ? `
async function evaluateCondition(condition, msg, userId) {
  if (condition.type === 'condition-text') {
    const text = (msg.text || '').toLowerCase();
    const conditions = condition.data.conditions || [];
    
    for (const cond of conditions) {
      const value = cond.value.toLowerCase();
      let matches = false;
      
      switch (cond.type) {
        case 'contains':
          matches = text.includes(value);
          break;
        case 'equals':
          matches = text === value;
          break;
        case 'starts_with':
          matches = text.startsWith(value);
          break;
        case 'ends_with':
          matches = text.endsWith(value);
          break;
      }
      
      if (matches) {
        return condition.data.operator === 'OR' ? true : matches;
      }
    }
    
    return condition.data.operator === 'AND';
  }
  
  return false;
}

function getConnectedActionsFromCondition(nodeId, isTrue) {
  const edges = ${JSON.stringify(this.botSchema.configuration?.edges || [])};
  const nodes = ${JSON.stringify(this.botSchema.configuration?.nodes || [])};
  
  return edges
    .filter(edge => edge.source === nodeId && (isTrue ? edge.sourceHandle === 'true' : edge.sourceHandle === 'false'))
    .map(edge => nodes.find(node => node.id === edge.target))
    .filter(Boolean);
}

async function executeAction(action, chatId, userId, msg) {
  switch (action.type) {
    case 'action-send-message':
      const messageText = stateManager.replaceVariables(action.data.text, userId);
      await bot.sendMessage(chatId, messageText, { 
        parse_mode: action.data.parseMode || 'HTML',
        reply_markup: action.data.buttons ? { inline_keyboard: action.data.buttons } : undefined
      });
      break;
      
    case 'action-send-media':
      const caption = stateManager.replaceVariables(action.data.caption || '', userId);
      const mediaUrl = stateManager.replaceVariables(action.data.mediaUrl, userId);
      await bot.sendPhoto(chatId, mediaUrl, { caption, parse_mode: 'HTML' });
      break;
      
    case 'action-integration':
      if (integrationManager) {
        try {
          const variables = {
            user_id: userId,
            username: msg.from?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            current_time: BotUtils.formatTime(new Date())
          };
          
          const result = await integrationManager.executeIntegration(action.id, variables);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          for (const [key, value] of Object.entries(result)) {
            stateManager.setUserVariable(userId, \`\${action.data.label.toLowerCase()}_\${key}\`, value);
          }
          
          BotUtils.logWithTimestamp('success', \`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è \${action.data.label} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\`);
        } catch (error) {
          BotUtils.logWithTimestamp('error', \`–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ \${action.data.label}:\`, error.message);
        }
      }
      break;
  }
}` : `
function updateUserState(userId) {
  if (!userStates.has(userId)) {
    userStates.set(userId, {
      messageCount: 0,
      lastActivity: new Date(),
      variables: new Map()
    });
  }
  
  const state = userStates.get(userId);
  state.messageCount++;
  state.lastActivity = new Date();
}

function replaceVariables(text, userId) {
  let result = text;
  
  // –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  for (const [key, variable] of Object.entries(botVariables)) {
    const placeholder = \`{{\${key}}}\`;
    result = result.replace(new RegExp(placeholder, 'g'), variable.defaultValue);
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const userState = userStates.get(userId);
  if (userState) {
    result = result.replace(/{{message_count}}/g, userState.messageCount);
    result = result.replace(/{{user_count}}/g, userStates.size);
  }
  
  return result;
}`;

    return commandHandlers + messageHandler + callbackHandler + utilityFunctions;
  }  
private getConnectedActions(nodeId: string): any[] {
    const edges = this.botSchema.configuration?.edges || [];
    const nodes = this.botSchema.configuration?.nodes || [];
    
    return edges
      .filter((edge: any) => edge.source === nodeId)
      .map((edge: any) => nodes.find((node: any) => node.id === edge.target))
      .filter(Boolean);
  }

  private generateActionCode(action: any): string {
    const replaceVarsFunction = this.options.includeAdvancedFeatures ? 'stateManager.replaceVariables' : 'replaceVariables';
    const logFunction = this.options.includeAdvancedFeatures ? 'BotUtils.logWithTimestamp' : 'console.log';

    switch (action.type) {
      case 'action-send-message':
        const hasButtons = action.data.buttons && action.data.buttons.length > 0;
        return `  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${action.data.label}
  const message${action.id} = ${replaceVarsFunction}(\`${action.data.text}\`, userId);
  await bot.sendMessage(chatId, message${action.id}, { 
    parse_mode: '${action.data.parseMode || 'HTML'}'${hasButtons ? `,
    reply_markup: {
      inline_keyboard: ${JSON.stringify(action.data.buttons)}
    }` : ''}
  });
  ${this.options.includeAdvancedFeatures ? 
    `BotUtils.logWithTimestamp('success', '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', BotUtils.truncateText(message${action.id}));` :
    `console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message${action.id}.substring(0, 50) + '...');`}`;

      case 'action-send-media':
        return `  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞: ${action.data.label}
  const mediaUrl${action.id} = ${replaceVarsFunction}('${action.data.mediaUrl || 'https://picsum.photos/800/600'}', userId);
  const caption${action.id} = ${replaceVarsFunction}(\`${action.data.caption || ''}\`, userId);
  await bot.sendPhoto(chatId, mediaUrl${action.id}, {
    caption: caption${action.id},
    parse_mode: '${action.data.parseMode || 'HTML'}'
  });
  ${this.options.includeAdvancedFeatures ? 
    `BotUtils.logWithTimestamp('success', '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞:', mediaUrl${action.id});` :
    `console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞');`}`;

      case 'action-integration':
        if (!this.options.includeIntegrations) {
          return `  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${action.data.label}
  ${logFunction}('‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${action.data.label} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞)');`;
        }
        
        return `  // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: ${action.data.label}
  try {
    const integrationVariables = {
      user_id: userId,
      username: msg.from?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      current_time: ${this.options.includeAdvancedFeatures ? 'BotUtils.formatTime(new Date())' : 'new Date().toLocaleString()'}
    };
    
    const integrationResult = await integrationManager.executeIntegration('${action.id}', integrationVariables);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ${this.options.includeAdvancedFeatures ? `for (const [key, value] of Object.entries(integrationResult)) {
      stateManager.setUserVariable(userId, \`${action.data.label.toLowerCase()}_\${key}\`, value);
    }` : '// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã'}
    
    ${this.options.includeAdvancedFeatures ? 
      `BotUtils.logWithTimestamp('success', '‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${action.data.label} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');` :
      `console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${action.data.label} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');`}
  } catch (error) {
    ${this.options.includeAdvancedFeatures ? 
      `BotUtils.logWithTimestamp('error', '‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${action.data.label}:', error.message);` :
      `console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${action.data.label}:', error);`}
  }`;

      default:
        return `  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}
  ${this.options.includeAdvancedFeatures ? 
    `BotUtils.logWithTimestamp('warn', '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', '${action.type}');` :
    `console.warn('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', '${action.type}');`}`;
    }
  }

  private sanitizeHandlerName(command: string): string {
    return command.replace(/[^a-zA-Z0-9]/g, '').replace(/^./, str => str.toUpperCase());
  }

  private generatePackageJson(): ExportedFile {
    const dependencies: Record<string, string> = {
      'node-telegram-bot-api': '^0.61.0'
    };

    if (this.options.includeIntegrations) {
      dependencies['axios'] = '^1.6.0';
    }

    const scripts: Record<string, string> = {
      start: 'node index.js',
      dev: 'nodemon index.js'
    };

    if (this.options.generateTests) {
      scripts.test = 'node test.js';
    } else {
      scripts.test = 'echo "No tests specified" && exit 0';
    }

    const packageJson = {
      name: this.botSchema.id || 'exported-bot',
      version: '1.0.0',
      description: this.botSchema.description || '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞',
      main: 'index.js',
      scripts,
      dependencies,
      devDependencies: {
        nodemon: '^2.0.22'
      },
      keywords: [
        'telegram', 
        'bot', 
        'chatbot', 
        'exported',
        ...(this.options.multiplatform ? ['multiplatform'] : []),
        ...(this.options.includeIntegrations ? ['integrations'] : [])
      ],
      author: 'Bot Constructor',
      license: 'MIT',
      engines: {
        node: '>=14.0.0'
      },
      repository: {
        type: 'git',
        url: 'https://github.com/your-username/your-bot-repo.git'
      },
      bugs: {
        url: 'https://github.com/your-username/your-bot-repo/issues'
      },
      homepage: 'https://github.com/your-username/your-bot-repo#readme'
    };

    return {
      path: 'package.json',
      content: JSON.stringify(packageJson, null, 2),
      type: 'json'
    };
  }  pr
ivate generateReadme(): ExportedFile {
    const commands = this.botSchema.configuration?.nodes
      ?.filter((node: any) => node.type === 'trigger-command')
      ?.map((node: any) => `- \`${node.data.command}\` - ${node.data.description || node.data.label}`)
      ?.join('\n') || '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

    const readme = `# ${this.botSchema.name}

${this.botSchema.description}

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
\`\`\`bash
npm install
\`\`\`

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ \`.env.example\` –≤ \`.env\` –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
\`\`\`bash
cp .env.example .env
\`\`\`

### 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/newbot\`
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª \`.env\`

### 4. –ó–∞–ø—É—Å–∫
\`\`\`bash
npm start
\`\`\`

–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π:
\`\`\`bash
npm run dev
\`\`\`

## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

${commands}

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ \`config.json\`. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
- –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
- –û–ø–∏—Å–∞–Ω–∏–µ
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
.
‚îú‚îÄ‚îÄ index.js          # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
‚îú‚îÄ‚îÄ config.json       # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
‚îú‚îÄ‚îÄ package.json      # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã
‚îú‚îÄ‚îÄ .env.example      # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ .env              # –í–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–µ –≤ git)
‚îî‚îÄ‚îÄ README.md         # –≠—Ç–æ—Ç —Ñ–∞–π–ª
\`\`\`

## üêõ –û—Ç–ª–∞–¥–∫–∞

–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ \`.env\`
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫

## üìù –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License

## ü§ñ –û –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–æ–≤

–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤.
–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}
`;

    return {
      path: 'README.md',
      content: readme,
      type: 'md'
    };
  }

  private generateEnvExample(): ExportedFile {
    const envContent = `# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
TELEGRAM_BOT_TOKEN=your_bot_token_here

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (true/false)
NODE_ENV=production

# –ü–æ—Ä—Ç –¥–ª—è webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
PORT=3000

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_LEVEL=info
`;

    return {
      path: '.env.example',
      content: envContent,
      type: 'txt'
    };
  }  priva
te generateConfigFile(): ExportedFile {
    const config = {
      name: this.botSchema.name,
      description: this.botSchema.description,
      version: '1.0.0',
      created: this.botSchema.createdAt,
      exported: new Date().toISOString(),
      settings: {
        logging: true,
        debug: false,
        polling: true,
        webhook: false
      },
      variables: this.botSchema.configuration?.variables || {},
      platforms: this.botSchema.platforms?.map((p: any) => p.platform) || ['telegram']
    };

    return {
      path: 'config.json',
      content: JSON.stringify(config, null, 2),
      type: 'json'
    };
  }

  private generateIntegrationsFile(): ExportedFile {
    const integrationNodes = this.botSchema.configuration?.nodes?.filter(
      (node: any) => node.type === 'action-integration'
    ) || [];

    const integrationsCode = `/**
 * –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
 */
const axios = require('axios');

class IntegrationManager {
  constructor() {
    this.cache = new Map();
    this.rateLimits = new Map();
  }

  async executeIntegration(integrationId, variables = {}) {
    const integration = this.getIntegrationConfig(integrationId);
    if (!integration) {
      throw new Error(\`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è \${integrationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if (this.isRateLimited(integrationId)) {
      throw new Error('Rate limit exceeded');
    }

    try {
      const response = await this.makeRequest(integration, variables);
      this.updateRateLimit(integrationId);
      return this.processResponse(response, integration);
    } catch (error) {
      console.error(\`–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ \${integrationId}:\`, error.message);
      throw error;
    }
  }

  async makeRequest(integration, variables) {
    const url = this.replaceVariables(integration.url, variables);
    const headers = integration.headers || {};
    
    const config = {
      method: integration.method || 'GET',
      url: url,
      headers: {
        'User-Agent': 'Bot-Constructor-Export/1.0',
        ...headers
      },
      timeout: 10000
    };

    if (integration.method === 'POST' && integration.body) {
      config.data = this.replaceVariables(integration.body, variables);
    }

    return await axios(config);
  }

  processResponse(response, integration) {
    const data = response.data;
    const result = {};

    if (integration.responseMapping) {
      for (const [key, path] of Object.entries(integration.responseMapping)) {
        result[key] = this.getNestedValue(data, path);
      }
    } else {
      return data;
    }

    return result;
  }

  getNestedValue(obj, path) {
    return path.split('.').reduce((current, key) => {
      if (key.includes('[') && key.includes(']')) {
        const arrayKey = key.substring(0, key.indexOf('['));
        const index = parseInt(key.substring(key.indexOf('[') + 1, key.indexOf(']')));
        return current?.[arrayKey]?.[index];
      }
      return current?.[key];
    }, obj);
  }

  replaceVariables(text, variables) {
    let result = text;
    for (const [key, value] of Object.entries(variables)) {
      result = result.replace(new RegExp(\`{{\${key}}}\`, 'g'), value);
    }
    return result;
  }

  getIntegrationConfig(integrationId) {
    const integrations = ${JSON.stringify(integrationNodes.reduce((acc: any, node: any) => {
      acc[node.id] = node.data;
      return acc;
    }, {}), null, 6)};
    
    return integrations[integrationId];
  }

  isRateLimited(integrationId) {
    const lastCall = this.rateLimits.get(integrationId);
    if (!lastCall) return false;
    
    const timeDiff = Date.now() - lastCall;
    return timeDiff < 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  }

  updateRateLimit(integrationId) {
    this.rateLimits.set(integrationId, Date.now());
  }
}

module.exports = IntegrationManager;
`;

    return {
      path: 'integrations.js',
      content: integrationsCode,
      type: 'js'
    };
  }

  private generateUtilsFile(): ExportedFile {
    const utilsCode = `/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
 */

class BotUtils {
  static formatTime(date) {
    return new Intl.DateTimeFormat('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }).format(date);
  }

  static generateRandomSeed() {
    return Math.floor(Math.random() * 10000);
  }

  static sanitizeText(text) {
    return text
      .replace(/[<>&"']/g, (match) => {
        const escapeMap = {
          '<': '&lt;',
          '>': '&gt;',
          '&': '&amp;',
          '"': '&quot;',
          "'": '&#x27;'
        };
        return escapeMap[match];
      });
  }

  static truncateText(text, maxLength = 100) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength - 3) + '...';
  }

  static isValidUrl(string) {
    try {
      new URL(string);
      return true;
    } catch (_) {
      return false;
    }
  }

  static parseCommand(text) {
    const match = text.match(/^\/([a-zA-Z0-9_]+)(?:@[a-zA-Z0-9_]+)?(?:\\s+(.*))?$/);
    if (!match) return null;
    
    return {
      command: match[1],
      args: match[2] ? match[2].split(/\\s+/) : [],
      fullText: text
    };
  }

  static formatUptime(startTime) {
    const uptime = Date.now() - startTime;
    const seconds = Math.floor(uptime / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return \`\${days} –¥–Ω. \${hours % 24} —á.\`;
    if (hours > 0) return \`\${hours} —á. \${minutes % 60} –º–∏–Ω.\`;
    if (minutes > 0) return \`\${minutes} –º–∏–Ω. \${seconds % 60} —Å–µ–∫.\`;
    return \`\${seconds} —Å–µ–∫.\`;
  }

  static logWithTimestamp(level, message, ...args) {
    const timestamp = this.formatTime(new Date());
    const levelEmoji = {
      info: '‚ÑπÔ∏è',
      warn: '‚ö†Ô∏è',
      error: '‚ùå',
      success: '‚úÖ'
    };
    
    console.log(\`[\${timestamp}] \${levelEmoji[level] || 'üìù'} \${message}\`, ...args);
  }
}

module.exports = BotUtils;
`;

    return {
      path: 'utils.js',
      content: utilsCode,
      type: 'js'
    };
  }

  private generateStateManagerFile(): ExportedFile {
    const stateManagerCode = `/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
const fs = require('fs');
const path = require('path');

class StateManager {
  constructor(persistPath = './data/user-states.json') {
    this.states = new Map();
    this.persistPath = persistPath;
    this.startTime = Date.now();
    this.totalMessages = 0;
    
    this.loadStates();
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.saveStates();
    }, 5 * 60 * 1000);
  }

  getUserState(userId) {
    if (!this.states.has(userId)) {
      this.states.set(userId, {
        messageCount: 0,
        firstSeen: new Date().toISOString(),
        lastActivity: new Date().toISOString(),
        variables: new Map(),
        context: {}
      });
    }
    
    return this.states.get(userId);
  }

  updateUserActivity(userId) {
    const state = this.getUserState(userId);
    state.messageCount++;
    state.lastActivity = new Date().toISOString();
    this.totalMessages++;
  }

  setUserVariable(userId, key, value) {
    const state = this.getUserState(userId);
    state.variables.set(key, value);
  }

  getUserVariable(userId, key, defaultValue = null) {
    const state = this.getUserState(userId);
    return state.variables.get(key) || defaultValue;
  }

  setUserContext(userId, context) {
    const state = this.getUserState(userId);
    state.context = { ...state.context, ...context };
  }

  getUserContext(userId) {
    const state = this.getUserState(userId);
    return state.context;
  }

  getGlobalStats() {
    return {
      totalUsers: this.states.size,
      totalMessages: this.totalMessages,
      uptime: Date.now() - this.startTime,
      activeUsers: Array.from(this.states.values())
        .filter(state => {
          const lastActivity = new Date(state.lastActivity);
          const hourAgo = new Date(Date.now() - 60 * 60 * 1000);
          return lastActivity > hourAgo;
        }).length
    };
  }

  replaceVariables(text, userId) {
    let result = text;
    const state = this.getUserState(userId);
    const stats = this.getGlobalStats();
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    result = result.replace(/{{user_id}}/g, userId);
    result = result.replace(/{{message_count}}/g, state.messageCount);
    result = result.replace(/{{first_seen}}/g, new Date(state.firstSeen).toLocaleString('ru-RU'));
    result = result.replace(/{{last_activity}}/g, new Date(state.lastActivity).toLocaleString('ru-RU'));
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    result = result.replace(/{{user_count}}/g, stats.totalUsers);
    result = result.replace(/{{total_messages}}/g, stats.totalMessages);
    result = result.replace(/{{uptime}}/g, this.formatUptime(stats.uptime));
    result = result.replace(/{{current_time}}/g, new Date().toLocaleString('ru-RU'));
    result = result.replace(/{{random_seed}}/g, Math.floor(Math.random() * 10000));
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [key, value] of state.variables) {
      result = result.replace(new RegExp(\`{{\${key}}}\`, 'g'), value);
    }
    
    return result;
  }

  formatUptime(uptime) {
    const seconds = Math.floor(uptime / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return \`\${days} –¥–Ω. \${hours % 24} —á.\`;
    if (hours > 0) return \`\${hours} —á. \${minutes % 60} –º–∏–Ω.\`;
    return \`\${minutes} –º–∏–Ω.\`;
  }

  saveStates() {
    try {
      const dataDir = path.dirname(this.persistPath);
      if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir, { recursive: true });
      }

      const statesData = {
        states: Array.from(this.states.entries()).map(([userId, state]) => ({
          userId,
          ...state,
          variables: Array.from(state.variables.entries())
        })),
        totalMessages: this.totalMessages,
        startTime: this.startTime,
        lastSaved: new Date().toISOString()
      };

      fs.writeFileSync(this.persistPath, JSON.stringify(statesData, null, 2));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error);
    }
  }

  loadStates() {
    try {
      if (fs.existsSync(this.persistPath)) {
        const data = JSON.parse(fs.readFileSync(this.persistPath, 'utf8'));
        
        if (data.states) {
          data.states.forEach(stateData => {
            const { userId, variables, ...state } = stateData;
            state.variables = new Map(variables || []);
            this.states.set(userId, state);
          });
        }
        
        this.totalMessages = data.totalMessages || 0;
        this.startTime = data.startTime || Date.now();
        
        console.log(\`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: \${this.states.size}\`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error);
    }
  }

  cleanup() {
    this.saveStates();
  }
}

module.exports = StateManager;
`;

    return {
      path: 'state-manager.js',
      content: stateManagerCode,
      type: 'js'
    };
  }

  private generateTestFiles(): ExportedFile[] {
    const testFiles: ExportedFile[] = [];

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const mainTestCode = `/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
 */
const assert = require('assert');
const BotUtils = require('./utils');
const StateManager = require('./state-manager');
const IntegrationManager = require('./integrations');

describe('Exported Bot Tests', () => {
  let stateManager;
  let integrationManager;

  beforeEach(() => {
    stateManager = new StateManager('./test-data/states.json');
    integrationManager = new IntegrationManager();
  });

  describe('BotUtils', () => {
    it('should format time correctly', () => {
      const date = new Date('2025-01-01T12:00:00Z');
      const formatted = BotUtils.formatTime(date);
      assert(typeof formatted === 'string');
      assert(formatted.includes('2025'));
    });

    it('should parse commands correctly', () => {
      const result = BotUtils.parseCommand('/start hello world');
      assert.equal(result.command, 'start');
      assert.deepEqual(result.args, ['hello', 'world']);
    });

    it('should validate URLs', () => {
      assert(BotUtils.isValidUrl('https://example.com'));
      assert(!BotUtils.isValidUrl('not-a-url'));
    });
  });

  describe('StateManager', () => {
    it('should create user state', () => {
      const state = stateManager.getUserState('test-user');
      assert(state);
      assert.equal(state.messageCount, 0);
    });

    it('should update user activity', () => {
      stateManager.updateUserActivity('test-user');
      const state = stateManager.getUserState('test-user');
      assert.equal(state.messageCount, 1);
    });

    it('should replace variables', () => {
      stateManager.updateUserActivity('test-user');
      const result = stateManager.replaceVariables('Messages: {{message_count}}', 'test-user');
      assert(result.includes('Messages: 1'));
    });
  });

  describe('IntegrationManager', () => {
    it('should handle rate limiting', () => {
      integrationManager.updateRateLimit('test-integration');
      assert(integrationManager.isRateLimited('test-integration'));
    });

    it('should replace variables in URLs', () => {
      const result = integrationManager.replaceVariables('https://api.example.com/{{userId}}', { userId: '123' });
      assert.equal(result, 'https://api.example.com/123');
    });
  });
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
  
  // –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
  try {
    // –¢–µ—Å—Ç BotUtils
    const date = new Date();
    const formatted = BotUtils.formatTime(date);
    console.log('‚úÖ BotUtils.formatTime —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    const command = BotUtils.parseCommand('/test arg1 arg2');
    console.assert(command.command === 'test', '–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å test');
    console.log('‚úÖ BotUtils.parseCommand —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // –¢–µ—Å—Ç StateManager
    const sm = new StateManager('./test-states.json');
    sm.updateUserActivity('test-user');
    const state = sm.getUserState('test-user');
    console.assert(state.messageCount === 1, '–°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1');
    console.log('‚úÖ StateManager —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', error.message);
    process.exit(1);
  }
}
`;

    testFiles.push({
      path: 'test.js',
      content: mainTestCode,
      type: 'js'
    });

    return testFiles;
  }

  private generateApiDocumentation(): ExportedFile {
    const commands = this.botSchema.configuration?.nodes
      ?.filter((node: any) => node.type === 'trigger-command')
      ?.map((node: any) => ({
        command: node.data.command,
        description: node.data.description || node.data.label,
        id: node.id
      })) || [];

    const integrations = this.botSchema.configuration?.nodes
      ?.filter((node: any) => node.type === 'action-integration')
      ?.map((node: any) => ({
        id: node.id,
        label: node.data.label,
        method: node.data.method,
        url: node.data.url
      })) || [];

    const variables = Object.entries(this.botSchema.configuration?.variables || {})
      .map(([key, variable]: [string, any]) => ({
        name: key,
        type: variable.type,
        defaultValue: variable.defaultValue,
        description: variable.description
      }));

    const apiDoc = `# API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## –û–±–∑–æ—Ä

–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç API –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.

**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${this.botSchema.name}  
**–û–ø–∏—Å–∞–Ω–∏–µ:** ${this.botSchema.description}  
**–í–µ—Ä—Å–∏—è:** 1.0.0  
**–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** ${new Date().toLocaleString('ru-RU')}

## –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

${commands.map(cmd => `### ${cmd.command}

**–û–ø–∏—Å–∞–Ω–∏–µ:** ${cmd.description}  
**ID —É–∑–ª–∞:** \`${cmd.id}\`

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
\`\`\`
${cmd.command}
\`\`\`
`).join('\n')}

## –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:

${variables.map(variable => `### {{${variable.name}}}

**–¢–∏–ø:** ${variable.type}  
**–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:** \`${variable.defaultValue}\`  
**–û–ø–∏—Å–∞–Ω–∏–µ:** ${variable.description}
`).join('\n')}

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

${integrations.length > 0 ? integrations.map(integration => `### ${integration.label}

**ID:** \`${integration.id}\`  
**–ú–µ—Ç–æ–¥:** ${integration.method}  
**URL:** \`${integration.url}\`
`).join('\n') : '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏

- **index.js** - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
- **state-manager.js** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- **integrations.js** - –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
- **utils.js** - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

#### –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
\`\`\`javascript
{
  messageCount: number,
  firstSeen: string,
  lastActivity: string,
  variables: Map<string, any>,
  context: object
}
\`\`\`

#### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
\`\`\`javascript
{
  method: string,
  url: string,
  headers: object,
  responseMapping: object
}
\`\`\`

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

### –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
\`\`\`bash
npm start
\`\`\`

### –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
\`\`\`bash
node test.js
\`\`\`

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
\`\`\`bash
cp .env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª
\`\`\`

## –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
1. –ù–∞–π–¥–∏—Ç–µ —Å–µ–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –≤ \`index.js\`
2. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
3. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
1. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ \`integrations.js\`
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`integrationManager.executeIntegration()\` –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ

### –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
\`\`\`javascript
// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const state = stateManager.getUserState(userId);

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
stateManager.setUserVariable(userId, 'key', 'value');

// –ó–∞–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
const text = stateManager.replaceVariables('Hello {{username}}!', userId);
\`\`\`

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ª–∞–¥–∫–∞

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å. –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
- ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è  
- ‚ùå –û—à–∏–±–∫–∏
- ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑:
\`\`\`javascript
const stats = stateManager.getGlobalStats();
\`\`\`

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ \`.env\` —Ñ–∞–π–ª–µ
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: \`node test.js\`

---

*–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*
`;

    return {
      path: 'API.md',
      content: apiDoc,
      type: 'md'
    };
  }

  private generateNodeHandlers(): ExportedFile[] {
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–∑–ª–æ–≤
    return [];
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export function exportBotToNodeJS(botSchema: any, options?: Partial<ExportOptions>): ExportResult {
  const exporter = new NodeJSExporter(botSchema, options);
  return exporter.export();
}