/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º—ã –±–æ—Ç–∞ –≤ Python –∫–æ–¥
 */

export interface PythonExportOptions {
  includeComments: boolean;
  minify: boolean;
  platform: string;
  outputDir: string;
  multiplatform?: boolean;
  includeIntegrations?: boolean;
  includeAdvancedFeatures?: boolean;
  generateTests?: boolean;
  generateDocumentation?: boolean;
  pythonVersion?: '3.8' | '3.9' | '3.10' | '3.11';
  useAsyncio?: boolean;
  includeTypeHints?: boolean;
}

export interface PythonExportResult {
  success: boolean;
  files: PythonExportedFile[];
  error?: string;
}

export interface PythonExportedFile {
  path: string;
  content: string;
  type: 'py' | 'txt' | 'md' | 'json' | 'yml';
}

export class PythonExporter {
  private botSchema: any;
  private options: PythonExportOptions;

  constructor(botSchema: any, options: Partial<PythonExportOptions> = {}) {
    this.botSchema = botSchema;
    this.options = {
      includeComments: true,
      minify: false,
      platform: 'telegram',
      outputDir: './exported-bot-python',
      multiplatform: false,
      includeIntegrations: true,
      includeAdvancedFeatures: true,
      generateTests: false,
      generateDocumentation: true,
      pythonVersion: '3.9',
      useAsyncio: true,
      includeTypeHints: true,
      ...options
    };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –≤ Python –ø—Ä–æ–µ–∫—Ç
   */
  export(): PythonExportResult {
    try {
      const files: PythonExportedFile[] = [];

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
      files.push(this.generateMainFile());
      files.push(this.generateRequirementsFile());
      files.push(this.generateReadme());
      files.push(this.generateEnvExample());
      files.push(this.generateConfigFile());

      return {
        success: true,
        files
      };
    } catch (error) {
      return {
        success: false,
        files: [],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  } 
 private generateMainFile(): PythonExportedFile {
    const imports = this.generateImports();
    const classDefinition = this.generateBotClass();
    const mainCode = this.generateMainCode();

    const content = `${this.options.includeComments ? this.generateFileHeader() : ''}
${imports}

${classDefinition}

${mainCode}
`;

    return {
      path: 'main.py',
      content,
      type: 'py'
    };
  }

  private generateFileHeader(): string {
    return `"""
${this.botSchema.name}
${this.botSchema.description}

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
Python –≤–µ—Ä—Å–∏—è: ${this.options.pythonVersion}
"""

`;
  }

  private generateImports(): string {
    const baseImports = [
      'import os',
      'import json',
      'import logging',
      'from datetime import datetime',
      'from typing import Dict, List, Optional, Any',
      'from dataclasses import dataclass',
      'import telebot',
      'from telebot import types'
    ];

    if (this.options.useAsyncio) {
      baseImports.push('import asyncio');
    }

    if (this.options.includeIntegrations) {
      baseImports.push('import requests');
    }

    if (this.options.includeAdvancedFeatures) {
      baseImports.push('import sqlite3');
      baseImports.push('from pathlib import Path');
    }

    return baseImports.join('\n');
  }

  private generateBotClass(): string {
    const typeHints = this.options.includeTypeHints;
    const asyncKeyword = this.options.useAsyncio ? 'async ' : '';
    
    return `
@dataclass
class UserState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    message_count: int = 0
    last_activity: datetime = None
    variables: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.last_activity is None:
            self.last_activity = datetime.now()
        if self.variables is None:
            self.variables = {}

class BotConstructor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self, token${typeHints ? ': str' : ''}):
        self.bot = telebot.TeleBot(token)
        self.user_states${typeHints ? ': Dict[int, UserState]' : ''} = {}
        self.bot_variables = ${JSON.stringify(this.botSchema.configuration?.variables || {}, null, 8)}
        
        ${this.options.includeAdvancedFeatures ? 'self.setup_database()' : ''}
        self.setup_handlers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)

    ${this.options.includeAdvancedFeatures ? `def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        self.db_path = Path('data/bot.db')
        self.db_path.parent.mkdir(exist_ok=True)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_states (
                user_id INTEGER PRIMARY KEY,
                message_count INTEGER DEFAULT 0,
                last_activity TEXT,
                variables TEXT
            )
        ''')
        conn.commit()
        conn.close()` : ''}

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        ${this.generateHandlerSetup()}

    ${this.generateCommandHandlers()}

    ${this.generateMessageHandlers()}

    ${this.generateCallbackHandlers()}

    ${this.generateHelperMethods()}

    def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        self.logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {self.get_config_value('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        self.logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.get_config_value('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        try:
            self.bot.polling(none_stop=True)
        except KeyboardInterrupt:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            ${this.options.includeAdvancedFeatures ? 'self.cleanup()' : ''}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")

    ${this.options.includeAdvancedFeatures ? `def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for user_id, state in self.user_states.items():
            cursor.execute('''
                INSERT OR REPLACE INTO user_states 
                (user_id, message_count, last_activity, variables)
                VALUES (?, ?, ?, ?)
            ''', (
                user_id,
                state.message_count,
                state.last_activity.isoformat(),
                json.dumps(state.variables)
            ))
        
        conn.commit()
        conn.close()
        self.logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")` : ''}

    def get_config_value(self, key${typeHints ? ': str' : ''}, default${typeHints ? ': Any = None' : ''})${typeHints ? ' -> Any' : ''}:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = {
            'name': '${this.botSchema.name}',
            'description': '${this.botSchema.description}',
            'version': '1.0.0'
        }
        return config.get(key, default)
`;
  }  private
 generateHandlerSetup(): string {
    const commandNodes = this.botSchema.configuration?.nodes?.filter(
      (node: any) => node.type === 'trigger-command'
    ) || [];

    const handlers = commandNodes.map((node: any) => {
      const command = node.data.command.replace('/', '');
      return `        self.bot.message_handler(commands=['${command}'])(self.handle_${command})`;
    }).join('\n');

    return `${handlers}
        self.bot.message_handler(content_types=['text'])(self.handle_message)
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)`;
  }

  private generateCommandHandlers(): string {
    const commandNodes = this.botSchema.configuration?.nodes?.filter(
      (node: any) => node.type === 'trigger-command'
    ) || [];

    return commandNodes.map((node: any) => {
      const command = node.data.command.replace('/', '');
      const connectedActions = this.getConnectedActions(node.id);
      const typeHints = this.options.includeTypeHints;
      
      return `
    def handle_${command}(self, message${typeHints ? ': types.Message' : ''}):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã ${node.data.command}"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        self.logger.info(f"üì® –ö–æ–º–∞–Ω–¥–∞ ${node.data.command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            self.update_user_state(user_id)
            ${connectedActions.map(action => this.generatePythonActionCode(action)).join('\n            ')}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${node.data.command}: {e}")
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")`;
    }).join('\n');
  }

  private generateMessageHandlers(): string {
    const typeHints = this.options.includeTypeHints;
    
    return `
    def handle_message(self, message${typeHints ? ': types.Message' : ''}):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if message.text and message.text.startswith('/'):
            return
            
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        self.logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.truncate_text(message.text or '–º–µ–¥–∏–∞')}")
        
        try:
            self.update_user_state(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if user_id in self.user_states:
                self.user_states[user_id].variables['message_text'] = message.text or ''
            
            ${this.options.includeAdvancedFeatures ? `# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            condition_nodes = ${JSON.stringify(
              this.botSchema.configuration?.nodes?.filter((node: any) => node.type?.includes('condition')) || [],
              null,
              12
            )}
            
            for condition in condition_nodes:
                if self.evaluate_condition(condition, message, user_id):
                    connected_actions = self.get_connected_actions_from_condition(condition['id'], True)
                    for action in connected_actions:
                        self.execute_action(action, chat_id, user_id, message)
                    return
            
            # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_actions = self.get_connected_actions_from_condition('text-handler', False)
            for action in default_actions:
                self.execute_action(action, chat_id, user_id, message)` : `# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")`}
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")`;
  }

  private generateCallbackHandlers(): string {
    const typeHints = this.options.includeTypeHints;
    
    return `
    def handle_callback(self, call${typeHints ? ': types.CallbackQuery' : ''}):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        data = call.data
        
        self.logger.info(f"üîò Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")
        
        try:
            self.update_user_state(user_id)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö
            if data.startswith('quiz_'):
                self.handle_quiz_answer(chat_id, user_id, data, call)
            else:
                self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
                
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            self.bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def handle_quiz_answer(self, chat_id${this.options.includeTypeHints ? ': int' : ''}, user_id${this.options.includeTypeHints ? ': int' : ''}, answer${this.options.includeTypeHints ? ': str' : ''}, call${this.options.includeTypeHints ? ': types.CallbackQuery' : ''}):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
        correct_answer = 'quiz_b'  # Python
        is_correct = answer == correct_answer
        
        response_text = (
            "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ—Ç –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ Python" 
            if is_correct 
            else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: B) Python"
        )
        
        self.bot.edit_message_text(
            response_text,
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode='HTML'
        )`;
  }  private
 generateHelperMethods(): string {
    const typeHints = this.options.includeTypeHints;
    
    return `
    def update_user_state(self, user_id${typeHints ? ': int' : ''}):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_states:
            self.user_states[user_id] = UserState(user_id=user_id)
        
        state = self.user_states[user_id]
        state.message_count += 1
        state.last_activity = datetime.now()

    def replace_variables(self, text${typeHints ? ': str' : ''}, user_id${typeHints ? ': int' : ''})${typeHints ? ' -> str' : ''}:
        """–ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ"""
        result = text
        
        # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        for key, variable in self.bot_variables.items():
            placeholder = f"{{{{{key}}}}}"
            default_value = variable.get('defaultValue', '')
            result = result.replace(placeholder, str(default_value))
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if user_id in self.user_states:
            state = self.user_states[user_id]
            result = result.replace('{{message_count}}', str(state.message_count))
            result = result.replace('{{user_count}}', str(len(self.user_states)))
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            for key, value in state.variables.items():
                placeholder = f"{{{{{key}}}}}"
                result = result.replace(placeholder, str(value))
        
        return result

    def truncate_text(self, text${typeHints ? ': str' : ''}, max_length${typeHints ? ': int' : ''} = 100)${typeHints ? ' -> str' : ''}:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if len(text) <= max_length:
            return text
        return text[:max_length - 3] + '...'

    ${this.options.includeAdvancedFeatures ? `def evaluate_condition(self, condition${typeHints ? ': Dict[str, Any]' : ''}, message${typeHints ? ': types.Message' : ''}, user_id${typeHints ? ': int' : ''})${typeHints ? ' -> bool' : ''}:
        """–û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if condition['type'] == 'condition-text':
            text = (message.text or '').lower()
            conditions = condition['data'].get('conditions', [])
            
            for cond in conditions:
                value = cond['value'].lower()
                matches = False
                
                if cond['type'] == 'contains':
                    matches = value in text
                elif cond['type'] == 'equals':
                    matches = text == value
                elif cond['type'] == 'starts_with':
                    matches = text.startswith(value)
                elif cond['type'] == 'ends_with':
                    matches = text.endswith(value)
                
                if matches:
                    return condition['data'].get('operator') == 'OR' or matches
            
            return condition['data'].get('operator') == 'AND'
        
        return False

    def get_connected_actions_from_condition(self, node_id${typeHints ? ': str' : ''}, is_true${typeHints ? ': bool' : ''})${typeHints ? ' -> List[Dict[str, Any]]' : ''}:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —É—Å–ª–æ–≤–∏—è"""
        edges = ${JSON.stringify(this.botSchema.configuration?.edges || [])}
        nodes = ${JSON.stringify(this.botSchema.configuration?.nodes || [])}
        
        connected_edges = [
            edge for edge in edges 
            if edge['source'] == node_id and 
            (edge.get('sourceHandle') == ('true' if is_true else 'false'))
        ]
        
        return [
            node for node in nodes 
            for edge in connected_edges 
            if node['id'] == edge['target']
        ]

    def execute_action(self, action${typeHints ? ': Dict[str, Any]' : ''}, chat_id${typeHints ? ': int' : ''}, user_id${typeHints ? ': int' : ''}, message${typeHints ? ': types.Message' : ''}):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        action_type = action['type']
        
        if action_type == 'action-send-message':
            message_text = self.replace_variables(action['data']['text'], user_id)
            parse_mode = action['data'].get('parseMode', 'HTML')
            
            markup = None
            if action['data'].get('buttons'):
                markup = types.InlineKeyboardMarkup()
                for row in action['data']['buttons']:
                    button_row = []
                    for button in row:
                        if isinstance(button, dict):
                            btn = types.InlineKeyboardButton(
                                text=button['text'],
                                callback_data=button.get('callback_data'),
                                url=button.get('url')
                            )
                            button_row.append(btn)
                    if button_row:
                        markup.row(*button_row)
            
            self.bot.send_message(chat_id, message_text, parse_mode=parse_mode, reply_markup=markup)
            self.logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.truncate_text(message_text)}")
            
        elif action_type == 'action-send-media':
            media_url = self.replace_variables(action['data'].get('mediaUrl', 'https://picsum.photos/800/600'), user_id)
            caption = self.replace_variables(action['data'].get('caption', ''), user_id)
            parse_mode = action['data'].get('parseMode', 'HTML')
            
            self.bot.send_photo(chat_id, media_url, caption=caption, parse_mode=parse_mode)
            self.logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞: {media_url}")
            
        elif action_type == 'action-integration':
            if self.options.includeIntegrations:
                try:
                    integration_variables = {
                        'user_id': user_id,
                        'username': message.from_user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        'current_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }
                    
                    result = self.execute_integration(action['id'], integration_variables)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user_id in self.user_states:
                        label = action['data']['label'].lower()
                        for key, value in result.items():
                            self.user_states[user_id].variables[f"{label}_{key}"] = value
                    
                    self.logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è {action['data']['label']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ {action['data']['label']}: {e}")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è {action['data']['label']} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞)")
        else:
            self.logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}")` : ''}`;
  } 
 private generatePythonActionCode(action: any): string {
    const typeHints = this.options.includeTypeHints;
    
    switch (action.type) {
      case 'action-send-message':
        const hasButtons = action.data.buttons && action.data.buttons.length > 0;
        return `# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${action.data.label}
            message_text = self.replace_variables("${action.data.text}", user_id)
            ${hasButtons ? `
            markup = types.InlineKeyboardMarkup()
            buttons_data = ${JSON.stringify(action.data.buttons)}
            for row in buttons_data:
                button_row = []
                for button in row:
                    btn = types.InlineKeyboardButton(
                        text=button['text'],
                        callback_data=button.get('callback_data'),
                        url=button.get('url')
                    )
                    button_row.append(btn)
                if button_row:
                    markup.row(*button_row)
            
            self.bot.send_message(chat_id, message_text, parse_mode='${action.data.parseMode || 'HTML'}', reply_markup=markup)` : `
            self.bot.send_message(chat_id, message_text, parse_mode='${action.data.parseMode || 'HTML'}')`}
            self.logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.truncate_text(message_text)}")`;

      case 'action-send-media':
        return `# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞: ${action.data.label}
            media_url = self.replace_variables("${action.data.mediaUrl || 'https://picsum.photos/800/600'}", user_id)
            caption = self.replace_variables("${action.data.caption || ''}", user_id)
            self.bot.send_photo(chat_id, media_url, caption=caption, parse_mode='${action.data.parseMode || 'HTML'}')
            self.logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞: {media_url}")`;

      case 'action-integration':
        if (!this.options.includeIntegrations) {
          return `# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${action.data.label}
            self.logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${action.data.label} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞)")`;
        }
        
        return `# –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: ${action.data.label}
            try:
                integration_variables = {
                    'user_id': user_id,
                    'username': message.from_user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'current_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                
                result = self.execute_integration('${action.id}', integration_variables)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id in self.user_states:
                    label = "${action.data.label.toLowerCase()}"
                    for key, value in result.items():
                        self.user_states[user_id].variables[f"{label}_{key}"] = value
                
                self.logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${action.data.label} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${action.data.label}: {e}")`;

      default:
        return `# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}
            self.logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}")`;
    }
  }

  private generateMainCode(): string {
    return `
if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: TELEGRAM_BOT_TOKEN=your_token_here")
        exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = BotConstructor(token)
    bot.start_polling()
`;
  }

  private generateRequirementsFile(): PythonExportedFile {
    const requirements = [
      'pyTelegramBotAPI==4.14.0',
      'python-dotenv==1.0.0'
    ];

    if (this.options.includeIntegrations) {
      requirements.push('requests==2.31.0');
    }

    if (this.options.includeAdvancedFeatures) {
      requirements.push('sqlite3'); // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ Python
    }

    const content = requirements.join('\n') + '\n';

    return {
      path: 'requirements.txt',
      content,
      type: 'txt'
    };
  }

  private generateReadme(): PythonExportedFile {
    const commands = this.botSchema.configuration?.nodes
      ?.filter((node: any) => node.type === 'trigger-command')
      ?.map((node: any) => `- \`${node.data.command}\` - ${node.data.description || node.data.label}`)
      ?.join('\n') || '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

    const readme = `# ${this.botSchema.name}

${this.botSchema.description}

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Python ${this.options.pythonVersion} –∏–ª–∏ –≤—ã—à–µ:
\`\`\`bash
python --version
\`\`\`

### 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
\`\`\`bash
pip install -r requirements.txt
\`\`\`

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ \`.env.example\` –≤ \`.env\` –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
\`\`\`bash
cp .env.example .env
\`\`\`

### 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/newbot\`
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª \`.env\`

### 5. –ó–∞–ø—É—Å–∫
\`\`\`bash
python main.py
\`\`\`

## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

${commands}

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ \`config.json\`. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
- –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
- –û–ø–∏—Å–∞–Ω–∏–µ
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
.
‚îú‚îÄ‚îÄ main.py              # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
‚îú‚îÄ‚îÄ config.json          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
‚îú‚îÄ‚îÄ requirements.txt     # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
‚îú‚îÄ‚îÄ .env.example         # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ .env                 # –í–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–µ –≤ git)
‚îú‚îÄ‚îÄ data/                # –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
‚îÇ   ‚îî‚îÄ‚îÄ bot.db          # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
‚îî‚îÄ‚îÄ README.md           # –≠—Ç–æ—Ç —Ñ–∞–π–ª
\`\`\`

## üêõ –û—Ç–ª–∞–¥–∫–∞

–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ \`.env\`
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫

## üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

${this.options.includeAdvancedFeatures ? `### –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ \`data/\`.

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.` : ''}

${this.options.includeIntegrations ? `### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã.` : ''}

## üìù –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License

## ü§ñ –û –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–æ–≤

–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤.
- –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}
- Python –≤–µ—Ä—Å–∏—è: ${this.options.pythonVersion}
- Async/await: ${this.options.useAsyncio ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
- Type hints: ${this.options.includeTypeHints ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
`;

    return {
      path: 'README.md',
      content: readme,
      type: 'md'
    };
  } 
 private generateEnvExample(): PythonExportedFile {
    const envContent = `# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
TELEGRAM_BOT_TOKEN=your_bot_token_here

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (true/false)
DEBUG=false

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
POLLING_TIMEOUT=10
`;

    return {
      path: '.env.example',
      content: envContent,
      type: 'txt'
    };
  }

  private generateConfigFile(): PythonExportedFile {
    const config = {
      name: this.botSchema.name,
      description: this.botSchema.description,
      version: '1.0.0',
      created: this.botSchema.createdAt,
      exported: new Date().toISOString(),
      python_version: this.options.pythonVersion,
      settings: {
        logging: true,
        debug: false,
        polling: true,
        webhook: false,
        use_asyncio: this.options.useAsyncio,
        include_type_hints: this.options.includeTypeHints
      },
      variables: this.botSchema.configuration?.variables || {},
      platforms: this.botSchema.platforms?.map((p: any) => p.platform) || ['telegram'],
      features: {
        integrations: this.options.includeIntegrations,
        advanced_features: this.options.includeAdvancedFeatures,
        tests: this.options.generateTests,
        documentation: this.options.generateDocumentation
      }
    };

    return {
      path: 'config.json',
      content: JSON.stringify(config, null, 2),
      type: 'json'
    };
  }

  private getConnectedActions(nodeId: string): any[] {
    const edges = this.botSchema.configuration?.edges || [];
    const nodes = this.botSchema.configuration?.nodes || [];
    
    return edges
      .filter((edge: any) => edge.source === nodeId)
      .map((edge: any) => nodes.find((node: any) => node.id === edge.target))
      .filter(Boolean);
  }
}