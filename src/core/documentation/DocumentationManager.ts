/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–º–æ—â–∏
 */

export interface NodeDocumentation {
  nodeType: string;
  name: string;
  description: string;
  category: 'trigger' | 'action' | 'condition' | 'data' | 'integration';
  icon: string;
  inputs: NodeInput[];
  outputs: NodeOutput[];
  properties: NodeProperty[];
  examples: NodeExample[];
  bestPractices: string[];
  commonIssues: CommonIssue[];
  relatedNodes: string[];
  tags: string[];
  version: string;
  lastUpdated: string;
}

export interface NodeInput {
  name: string;
  type: string;
  required: boolean;
  description: string;
  defaultValue?: any;
}

export interface NodeOutput {
  name: string;
  type: string;
  description: string;
}

export interface NodeProperty {
  name: string;
  type: 'string' | 'number' | 'boolean' | 'select' | 'textarea' | 'json';
  required: boolean;
  description: string;
  defaultValue?: any;
  options?: string[];
  validation?: {
    min?: number;
    max?: number;
    pattern?: string;
  };
}

export interface NodeExample {
  title: string;
  description: string;
  schema: any;
  explanation: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
}

export interface CommonIssue {
  problem: string;
  solution: string;
  category: 'configuration' | 'connection' | 'data' | 'performance';
}

export class DocumentationManager {
  private static instance: DocumentationManager;
  private nodeDocumentation: Map<string, NodeDocumentation> = new Map();
  private searchIndex: Map<string, Set<string>> = new Map();

  private constructor() {
    this.initializeNodeDocumentation();
    this.buildSearchIndex();
  }

  static getInstance(): DocumentationManager {
    if (!DocumentationManager.instance) {
      DocumentationManager.instance = new DocumentationManager();
    }
    return DocumentationManager.instance;
  }  /**

   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —É–∑–ª–∞
   */
  getNodeDocumentation(nodeType: string): NodeDocumentation | undefined {
    return this.nodeDocumentation.get(nodeType);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
   */
  getAllDocumentation(): NodeDocumentation[] {
    return Array.from(this.nodeDocumentation.values());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getDocumentationByCategory(category: string): NodeDocumentation[] {
    return Array.from(this.nodeDocumentation.values())
      .filter(doc => doc.category === category);
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  searchDocumentation(query: string): NodeDocumentation[] {
    const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 2);
    const results = new Set<string>();

    searchTerms.forEach(term => {
      const matchingNodes = this.searchIndex.get(term);
      if (matchingNodes) {
        matchingNodes.forEach(nodeType => results.add(nodeType));
      }
    });

    return Array.from(results)
      .map(nodeType => this.nodeDocumentation.get(nodeType))
      .filter((doc): doc is NodeDocumentation => doc !== undefined)
      .sort((a, b) => a.name.localeCompare(b.name));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É–∑–ª—ã
   */
  getRelatedNodes(nodeType: string): NodeDocumentation[] {
    const doc = this.nodeDocumentation.get(nodeType);
    if (!doc) return [];

    return doc.relatedNodes
      .map(relatedType => this.nodeDocumentation.get(relatedType))
      .filter((doc): doc is NodeDocumentation => doc !== undefined);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —É–∑–ª–∞
   */
  getNodeExamples(nodeType: string, difficulty?: string): NodeExample[] {
    const doc = this.nodeDocumentation.get(nodeType);
    if (!doc) return [];

    if (difficulty) {
      return doc.examples.filter(example => example.difficulty === difficulty);
    }

    return doc.examples;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
   */
  getBestPractices(nodeType: string): string[] {
    const doc = this.nodeDocumentation.get(nodeType);
    return doc?.bestPractices || [];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
   */
  getCommonIssues(nodeType: string, category?: string): CommonIssue[] {
    const doc = this.nodeDocumentation.get(nodeType);
    if (!doc) return [];

    if (category) {
      return doc.commonIssues.filter(issue => issue.category === category);
    }

    return doc.commonIssues;
  }  /**
   
* –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
   */
  private buildSearchIndex(): void {
    this.searchIndex.clear();

    this.nodeDocumentation.forEach((doc, nodeType) => {
      const searchableText = [
        doc.name,
        doc.description,
        ...doc.tags,
        ...doc.bestPractices,
        ...doc.examples.map(ex => ex.title + ' ' + ex.description)
      ].join(' ').toLowerCase();

      const words = searchableText.split(/\s+/).filter(word => word.length > 2);
      
      words.forEach(word => {
        if (!this.searchIndex.has(word)) {
          this.searchIndex.set(word, new Set());
        }
        this.searchIndex.get(word)!.add(nodeType);
      });
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É–∑–ª–æ–≤
   */
  private initializeNodeDocumentation(): void {
    // –¢—Ä–∏–≥–≥–µ—Ä—ã
    this.addTriggerDocumentation();
    
    // –î–µ–π—Å—Ç–≤–∏—è
    this.addActionDocumentation();
    
    // –£—Å–ª–æ–≤–∏—è
    this.addConditionDocumentation();
    
    // –î–∞–Ω–Ω—ã–µ
    this.addDataDocumentation();
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    this.addIntegrationDocumentation();
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
   */
  private addTriggerDocumentation(): void {
    // –¢—Ä–∏–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    this.nodeDocumentation.set('trigger-command', {
      nodeType: 'trigger-command',
      name: '–¢—Ä–∏–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥—ã',
      description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      category: 'trigger',
      icon: '‚ö°',
      inputs: [],
      outputs: [
        {
          name: 'output',
          type: 'flow',
          description: '–í—ã—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã'
        }
      ],
      properties: [
        {
          name: 'command',
          type: 'string',
          required: true,
          description: '–ö–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: /start, /help)',
          defaultValue: '/start'
        },
        {
          name: 'description',
          type: 'string',
          required: false,
          description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        }
      ],
      examples: [
        {
          title: '–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞',
          description: '–ë–∞–∑–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start',
          schema: {
            command: '/start',
            description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'
          },
          explanation: '–≠—Ç–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /start',
          difficulty: 'beginner'
        }
      ],
      bestPractices: [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥',
        '–î–æ–±–∞–≤–ª—è–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥',
        '–ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ /',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥'
      ],
      commonIssues: [
        {
          problem: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç',
          solution: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ / –∏ –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
          category: 'configuration'
        }
      ],
      relatedNodes: ['action-send-message', 'condition-text-contains'],
      tags: ['–∫–æ–º–∞–Ω–¥–∞', '—Ç—Ä–∏–≥–≥–µ—Ä', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞–ª–æ'],
      version: '1.0.0',
      lastUpdated: new Date().toISOString()
    });

    // –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    this.nodeDocumentation.set('trigger-message', {
      nodeType: 'trigger-message',
      name: '–¢—Ä–∏–≥–≥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è',
      description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      category: 'trigger',
      icon: 'üí¨',
      inputs: [],
      outputs: [
        {
          name: 'output',
          type: 'flow',
          description: '–í—ã—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        }
      ],
      properties: [
        {
          name: 'patterns',
          type: 'textarea',
          required: false,
          description: '–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)'
        },
        {
          name: 'caseSensitive',
          type: 'boolean',
          required: false,
          description: '–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏',
          defaultValue: false
        }
      ],
      examples: [
        {
          title: '–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
          description: '–¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
          schema: {
            patterns: ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi'],
            caseSensitive: false
          },
          explanation: '–ë–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
          difficulty: 'beginner'
        }
      ],
      bestPractices: [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
        '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è',
        '–ù–µ –¥–µ–ª–∞–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–º–∏'
      ],
      commonIssues: [
        {
          problem: '–¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ',
          solution: '–°–¥–µ–ª–∞–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏',
          category: 'configuration'
        }
      ],
      relatedNodes: ['condition-text-contains', 'action-send-message'],
      tags: ['—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Ç–µ–∫—Å—Ç', '–ø–∞—Ç—Ç–µ—Ä–Ω', '—Ñ–∏–ª—å—Ç—Ä'],
      version: '1.0.0',
      lastUpdated: new Date().toISOString()
    });
  }  /**

   * –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏–π
   */
  private addActionDocumentation(): void {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.nodeDocumentation.set('action-send-message', {
      nodeType: 'action-send-message',
      name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      category: 'action',
      icon: 'üì§',
      inputs: [
        {
          name: 'input',
          type: 'flow',
          required: true,
          description: '–í—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        }
      ],
      outputs: [
        {
          name: 'output',
          type: 'flow',
          description: '–í—ã—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
        }
      ],
      properties: [
        {
          name: 'message',
          type: 'textarea',
          required: true,
          description: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {{variable}}'
        },
        {
          name: 'parseMode',
          type: 'select',
          required: false,
          description: '–†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞',
          defaultValue: 'text',
          options: ['text', 'markdown', 'html']
        }
      ],
      examples: [
        {
          title: '–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
          description: '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
          schema: {
            message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {{userName}}!'
          },
          explanation: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é userName',
          difficulty: 'beginner'
        },
        {
          title: '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          description: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
          schema: {
            message: '*–í–∞–∂–Ω–æ!* –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{{orderNumber}} –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ.',
            parseMode: 'markdown'
          },
          explanation: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç markdown –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
          difficulty: 'intermediate'
        }
      ],
      bestPractices: [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
        '–î–µ–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏',
        '–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å markdown/html —Ä–∞–∑–º–µ—Ç–∫–∏',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
      ],
      commonIssues: [
        {
          problem: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç—Å—è',
          solution: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ {{variableName}}',
          category: 'configuration'
        },
        {
          problem: 'Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
          solution: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ parseMode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ "markdown"',
          category: 'configuration'
        }
      ],
      relatedNodes: ['action-send-media', 'action-send-keyboard', 'action-set-variable'],
      tags: ['—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Ç–µ–∫—Å—Ç', '–æ—Ç–ø—Ä–∞–≤–∫–∞', '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', '—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      version: '1.0.0',
      lastUpdated: new Date().toISOString()
    });

    // –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞
    this.nodeDocumentation.set('action-request-input', {
      nodeType: 'action-request-input',
      name: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥',
      description: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é',
      category: 'action',
      icon: 'üìù',
      inputs: [
        {
          name: 'input',
          type: 'flow',
          required: true,
          description: '–í—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        }
      ],
      outputs: [],
      properties: [
        {
          name: 'message',
          type: 'textarea',
          required: true,
          description: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ'
        },
        {
          name: 'variable',
          type: 'string',
          required: true,
          description: '–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
        },
        {
          name: 'inputType',
          type: 'select',
          required: false,
          description: '–¢–∏–ø –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
          defaultValue: 'text',
          options: ['text', 'number', 'email', 'phone']
        }
      ],
      examples: [
        {
          title: '–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏',
          description: '–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          schema: {
            message: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
            variable: 'userName',
            inputType: 'text'
          },
          explanation: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é userName',
          difficulty: 'beginner'
        }
      ],
      bestPractices: [
        '–ß–µ—Ç–∫–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö',
        '–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö',
        '–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'
      ],
      commonIssues: [
        {
          problem: '–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è',
          solution: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π',
          category: 'configuration'
        }
      ],
      relatedNodes: ['action-set-variable', 'condition-variable-compare'],
      tags: ['–≤–≤–æ–¥', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–¥–∞–Ω–Ω—ã–µ', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'],
      version: '1.0.0',
      lastUpdated: new Date().toISOString()
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —É—Å–ª–æ–≤–∏–π
   */
  private addConditionDocumentation(): void {
    // –£—Å–ª–æ–≤–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É
    this.nodeDocumentation.set('condition-text-contains', {
      nodeType: 'condition-text-contains',
      name: '–£—Å–ª–æ–≤–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω',
      category: 'condition',
      icon: 'üîç',
      inputs: [
        {
          name: 'input',
          type: 'flow',
          required: true,
          description: '–í—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        }
      ],
      outputs: [
        {
          name: 'true',
          type: 'flow',
          description: '–í—ã—Ö–æ–¥ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
        },
        {
          name: 'false',
          type: 'flow',
          description: '–í—ã—Ö–æ–¥ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
        }
      ],
      properties: [
        {
          name: 'pattern',
          type: 'string',
          required: true,
          description: '–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ'
        },
        {
          name: 'caseSensitive',
          type: 'boolean',
          required: false,
          description: '–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä',
          defaultValue: false
        },
        {
          name: 'matchType',
          type: 'select',
          required: false,
          description: '–¢–∏–ø —Å—Ä–∞–≤–Ω–µ–Ω–∏—è',
          defaultValue: 'contains',
          options: ['contains', 'equals', 'startsWith', 'endsWith', 'regex']
        }
      ],
      examples: [
        {
          title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
          description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
          schema: {
            pattern: '–ø—Ä–∏–≤–µ—Ç',
            caseSensitive: false,
            matchType: 'contains'
          },
          explanation: '–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "–ø—Ä–∏–≤–µ—Ç", –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–π–¥–µ—Ç –ø–æ –≤–µ—Ç–∫–µ true',
          difficulty: 'beginner'
        }
      ],
      bestPractices: [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
        '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º',
        '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è'
      ],
      commonIssues: [
        {
          problem: '–£—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç',
          solution: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞',
          category: 'configuration'
        }
      ],
      relatedNodes: ['trigger-message', 'condition-variable-compare'],
      tags: ['—É—Å–ª–æ–≤–∏–µ', '—Ç–µ–∫—Å—Ç', '–ø–∞—Ç—Ç–µ—Ä–Ω', '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'],
      version: '1.0.0',
      lastUpdated: new Date().toISOString()
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —É–∑–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
   */
  private addDataDocumentation(): void {
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    this.nodeDocumentation.set('data-math', {
      nodeType: 'data-math',
      name: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏',
      category: 'data',
      icon: 'üßÆ',
      inputs: [
        {
          name: 'input',
          type: 'flow',
          required: true,
          description: '–í—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        }
      ],
      outputs: [
        {
          name: 'output',
          type: 'flow',
          description: '–í—ã—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è'
        }
      ],
      properties: [
        {
          name: 'operation',
          type: 'select',
          required: true,
          description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
          options: ['add', 'subtract', 'multiply', 'divide', 'power', 'sqrt', 'abs']
        },
        {
          name: 'operand1',
          type: 'string',
          required: true,
          description: '–ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ (—á–∏—Å–ª–æ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)'
        },
        {
          name: 'operand2',
          type: 'string',
          required: false,
          description: '–í—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥ (–¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)'
        },
        {
          name: 'resultVariable',
          type: 'string',
          required: true,
          description: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
        }
      ],
      examples: [
        {
          title: '–°–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª',
          description: '–°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞',
          schema: {
            operation: 'add',
            operand1: '10',
            operand2: '5',
            resultVariable: 'sum'
          },
          explanation: '–°–∫–ª–∞–¥—ã–≤–∞–µ—Ç 10 –∏ 5, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sum',
          difficulty: 'beginner'
        }
      ],
      bestPractices: [
        '–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —á—Ç–æ –æ–ø–µ—Ä–∞–Ω–¥—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å'
      ],
      commonIssues: [
        {
          problem: '–û—à–∏–±–∫–∞ "–Ω–µ —á–∏—Å–ª–æ"',
          solution: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–ø–µ—Ä–∞–Ω–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
          category: 'data'
        }
      ],
      relatedNodes: ['action-set-variable', 'condition-variable-compare'],
      tags: ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–≤—ã—á–∏—Å–ª–µ–Ω–∏—è', '—á–∏—Å–ª–∞', '–æ–ø–µ—Ä–∞—Ü–∏–∏'],
      version: '1.0.0',
      lastUpdated: new Date().toISOString()
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
   */
  private addIntegrationDocumentation(): void {
    // REST API
    this.nodeDocumentation.set('integration-rest-api', {
      nodeType: 'integration-rest-api',
      name: 'REST API –∑–∞–ø—Ä–æ—Å',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API',
      category: 'integration',
      icon: 'üåê',
      inputs: [
        {
          name: 'input',
          type: 'flow',
          required: true,
          description: '–í—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        }
      ],
      outputs: [
        {
          name: 'output',
          type: 'flow',
          description: '–í—ã—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞'
        }
      ],
      properties: [
        {
          name: 'url',
          type: 'string',
          required: true,
          description: 'URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞'
        },
        {
          name: 'method',
          type: 'select',
          required: false,
          description: 'HTTP –º–µ—Ç–æ–¥',
          defaultValue: 'GET',
          options: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH']
        },
        {
          name: 'responseVariable',
          type: 'string',
          required: false,
          description: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞',
          defaultValue: 'apiResponse'
        }
      ],
      examples: [
        {
          title: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
          description: '–ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å',
          schema: {
            url: 'https://api.example.com/users',
            method: 'GET',
            responseVariable: 'users'
          },
          explanation: '–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é users',
          difficulty: 'intermediate'
        }
      ],
      bestPractices: [
        '–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        '–î–æ–±–∞–≤–ª—è–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫',
        '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã'
      ],
      commonIssues: [
        {
          problem: '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞',
          solution: '–£–≤–µ–ª–∏—á—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ timeout –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API',
          category: 'connection'
        }
      ],
      relatedNodes: ['data-json', 'condition-variable-compare'],
      tags: ['api', 'http', '–∑–∞–ø—Ä–æ—Å', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–≤–Ω–µ—à–Ω–∏–π'],
      version: '1.0.0',
      lastUpdated: new Date().toISOString()
    });
  }
}