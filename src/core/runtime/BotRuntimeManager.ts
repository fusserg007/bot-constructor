/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–æ–≤ - –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Schema Engine —Å —Å–∏—Å—Ç–µ–º–æ–π –±–æ—Ç–æ–≤
 */

import { SchemaEngine, SchemaExecutionContext } from '../engine/SchemaEngine';
import { AdapterRegistry } from '../adapters/AdapterRegistry';
import { MessengerPlatform, PlatformCredentials, Bot, BotSchema } from '../types';
import { IncomingMessage, CallbackQuery } from '../types';

export interface BotRuntimeConfig {
  botId: string;
  schema: BotSchema;
  platforms: Array<{
    platform: MessengerPlatform;
    credentials: PlatformCredentials;
    mode: 'polling' | 'webhook';
  }>;
}

export class BotRuntimeManager {
  private static instance: BotRuntimeManager;
  private schemaEngine: SchemaEngine;
  private adapterRegistry: AdapterRegistry;
  private activeBots: Map<string, BotRuntimeConfig> = new Map();
  private userSessions: Map<string, Record<string, any>> = new Map();

  private constructor() {
    this.schemaEngine = new SchemaEngine();
    this.adapterRegistry = AdapterRegistry.getInstance();
  }

  static getInstance(): BotRuntimeManager {
    if (!BotRuntimeManager.instance) {
      BotRuntimeManager.instance = new BotRuntimeManager();
    }
    return BotRuntimeManager.instance;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
   */
  async startBot(config: BotRuntimeConfig): Promise<void> {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${config.botId}...`);

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      this.activeBots.set(config.botId, config);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      for (const platformConfig of config.platforms) {
        await this.initializePlatform(config.botId, platformConfig);
      }

      console.log(`‚úÖ –ë–æ—Ç ${config.botId} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö:`, 
        config.platforms.map(p => p.platform).join(', '));

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${config.botId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
   */
  async stopBot(botId: string): Promise<void> {
    console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${botId}...`);

    try {
      // –£–¥–∞–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã
      await this.adapterRegistry.removeAdaptersForBot(botId);

      // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      this.activeBots.delete(botId);

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
      const sessionsToDelete: string[] = [];
      for (const [sessionKey] of this.userSessions) {
        if (sessionKey.startsWith(`${botId}-`)) {
          sessionsToDelete.push(sessionKey);
        }
      }
      sessionsToDelete.forEach(key => this.userSessions.delete(key));

      console.log(`‚úÖ –ë–æ—Ç ${botId} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ${botId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É)
   */
  async restartBot(botId: string, newSchema: BotSchema): Promise<void> {
    console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${botId} —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π...`);

    const config = this.activeBots.get(botId);
    if (!config) {
      throw new Error(`Bot ${botId} is not running`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É
    const newConfig = {
      ...config,
      schema: newSchema
    };

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    await this.stopBot(botId);
    await this.startBot(newConfig);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –±–æ—Ç–∞
   */
  private async initializePlatform(
    botId: string, 
    platformConfig: { platform: MessengerPlatform; credentials: PlatformCredentials; mode: 'polling' | 'webhook' }
  ): Promise<void> {
    const { platform, credentials, mode } = platformConfig;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
      const adapter = await this.adapterRegistry.getAdapter(botId, platform, credentials);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      adapter.onMessage((message) => {
        this.handleIncomingMessage(botId, platform, message);
      });

      adapter.onCallback((callback) => {
        this.handleCallbackQuery(botId, platform, callback);
      });

      adapter.onError((error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ ${botId}-${platform}:`, error);
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
      if (mode === 'polling' && adapter.startPolling) {
        adapter.startPolling();
        console.log(`üì° Polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${botId} –Ω–∞ ${platform}`);
      } else if (mode === 'webhook' && adapter.setWebhook) {
        const webhookUrl = `${process.env.WEBHOOK_BASE_URL || 'http://localhost:3002'}/webhook/${platform}/${botId}`;
        await adapter.setWebhook(webhookUrl);
        console.log(`üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${botId} –Ω–∞ ${platform}: ${webhookUrl}`);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${platform} –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private async handleIncomingMessage(
    botId: string, 
    platform: MessengerPlatform, 
    message: IncomingMessage
  ): Promise<void> {
    console.log(`üì® –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ ${botId} –Ω–∞ ${platform}:`, message.text);

    try {
      const config = this.activeBots.get(botId);
      if (!config) {
        console.error(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
      const adapter = await this.adapterRegistry.getAdapter(
        botId, 
        platform, 
        config.platforms.find(p => p.platform === platform)?.credentials || {}
      );

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sessionKey = `${botId}-${message.userId}`;
      const sessionData = this.userSessions.get(sessionKey) || {};

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const context: SchemaExecutionContext = {
        userId: message.userId,
        chatId: message.chatId,
        platform,
        message: {
          text: message.text,
          messageId: message.id,
          timestamp: Date.now(),
          user: {
            id: message.userId
          }
        },
        variables: {
          messageText: message.text || '',
          userId: message.userId,
          chatId: message.chatId,
          platform,
          messageType: message.type
        },
        sessionData,
        adapter
      };

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ö–µ–º—É
      const result = await this.schemaEngine.executeSchema(
        config.schema.nodes,
        config.schema.edges,
        context
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      if (Object.keys(result.finalSessionData).length > 0) {
        this.userSessions.set(sessionKey, result.finalSessionData);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (result.success) {
        console.log(`‚úÖ –°—Ö–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è ${botId}. –£–∑–ª—ã: ${result.executedNodes.join(' -> ')}`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –¥–ª—è ${botId}:`, result.errors);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –∑–∞–ø—Ä–æ—Å
   */
  private async handleCallbackQuery(
    botId: string, 
    platform: MessengerPlatform, 
    callback: CallbackQuery
  ): Promise<void> {
    console.log(`üîò Callback –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ—Ç–∞ ${botId} –Ω–∞ ${platform}:`, callback.data);

    try {
      const config = this.activeBots.get(botId);
      if (!config) {
        console.error(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
      const adapter = await this.adapterRegistry.getAdapter(
        botId, 
        platform, 
        config.platforms.find(p => p.platform === platform)?.credentials || {}
      );

      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sessionKey = `${botId}-${callback.userId}`;
      const sessionData = this.userSessions.get(sessionKey) || {};

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const context: SchemaExecutionContext = {
        userId: callback.userId,
        chatId: callback.chatId,
        platform,
        message: {
          callbackData: callback.data,
          messageId: callback.messageId,
          timestamp: Date.now(),
          user: {
            id: callback.userId
          }
        },
        variables: {
          callbackData: callback.data,
          userId: callback.userId,
          chatId: callback.chatId,
          platform,
          messageId: callback.messageId
        },
        sessionData,
        adapter
      };

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ö–µ–º—É
      const result = await this.schemaEngine.executeSchema(
        config.schema.nodes,
        config.schema.edges,
        context
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      if (Object.keys(result.finalSessionData).length > 0) {
        this.userSessions.set(sessionKey, result.finalSessionData);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (result.success) {
        console.log(`‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è ${botId}. –£–∑–ª—ã: ${result.executedNodes.join(' -> ')}`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–ª—è ${botId}:`, result.errors);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  getActiveBotsStatus(): Array<{
    botId: string;
    platforms: MessengerPlatform[];
    status: 'running' | 'error';
    uptime: number;
  }> {
    const status: Array<{
      botId: string;
      platforms: MessengerPlatform[];
      status: 'running' | 'error';
      uptime: number;
    }> = [];

    for (const [botId, config] of this.activeBots) {
      status.push({
        botId,
        platforms: config.platforms.map(p => p.platform),
        status: 'running', // TODO: —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        uptime: Date.now() // TODO: —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
      });
    }

    return status;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º
   */
  getExecutionStats() {
    return this.schemaEngine.getExecutionStats();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  getExecutionHistory(executionId?: string) {
    return this.schemaEngine.getExecutionHistory(executionId);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  clearUserSessions(botId?: string): void {
    if (botId) {
      const sessionsToDelete: string[] = [];
      for (const [sessionKey] of this.userSessions) {
        if (sessionKey.startsWith(`${botId}-`)) {
          sessionsToDelete.push(sessionKey);
        }
      }
      sessionsToDelete.forEach(key => this.userSessions.delete(key));
    } else {
      this.userSessions.clear();
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –±–æ—Ç—ã
   */
  async dispose(): Promise<void> {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...');

    const stopPromises = Array.from(this.activeBots.keys())
      .map(botId => this.stopBot(botId));

    await Promise.all(stopPromises);
    
    await this.adapterRegistry.dispose();
    this.userSessions.clear();

    console.log('‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }
}