/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
 */
const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SimpleNodeJSExporter {
  constructor(botSchema, options = {}) {
    this.botSchema = botSchema;
    this.options = {
      includeComments: true,
      includeAdvancedFeatures: false,
      includeIntegrations: false,
      generateTests: false,
      generateDocumentation: false,
      ...options
    };
  }

  export() {
    try {
      const files = [];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
      files.push(this.generateMainFile());
      files.push(this.generatePackageJson());
      files.push(this.generateReadme());
      files.push(this.generateEnvExample());
      files.push(this.generateConfigFile());
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (this.options.includeAdvancedFeatures) {
        files.push(this.generateUtilsFile());
        files.push(this.generateStateManagerFile());
      }
      
      if (this.options.includeIntegrations) {
        files.push(this.generateIntegrationsFile());
      }
      
      if (this.options.generateTests) {
        files.push(this.generateTestFile());
      }
      
      if (this.options.generateDocumentation) {
        files.push(this.generateApiDocumentation());
      }
      
      return {
        success: true,
        files
      };
    } catch (error) {
      return {
        success: false,
        files: [],
        error: error.message
      };
    }
  }

  generateMainFile() {
    const commandNodes = this.botSchema.configuration?.nodes?.filter(
      node => node.type === 'trigger-command'
    ) || [];

    const commandHandlers = commandNodes.map(node => {
      const command = node.data.command;
      const connectedActions = this.getConnectedActions(node.id);
      
      return `
bot.onText(/${command.replace('/', '\\/')}/,  async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  console.log(\`üì® –ö–æ–º–∞–Ω–¥–∞ ${command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}\`);
  
  try {
    ${this.options.includeAdvancedFeatures ? 'stateManager.updateUserActivity(userId);' : 'updateUserState(userId);'}
${connectedActions.map(action => this.generateActionCode(action)).join('\n')}
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${command}:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
  }
});`;
    }).join('\n');

    const mainCode = `${this.options.includeComments ? this.generateFileHeader() : ''}
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = require('./config.json');

${this.options.includeAdvancedFeatures ? `// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏
const StateManager = require('./state-manager');
const BotUtils = require('./utils');` : ''}
${this.options.includeIntegrations ? `const IntegrationManager = require('./integrations');` : ''}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

${this.options.includeAdvancedFeatures ? `// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
const stateManager = new StateManager();` : '// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nconst userStates = new Map();'}
${this.options.includeIntegrations ? `const integrationManager = new IntegrationManager();` : ''}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
const botVariables = ${JSON.stringify(this.botSchema.configuration?.variables || {}, null, 2)};

${this.options.includeComments ? '// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥' : ''}
${commandHandlers}

${this.options.includeComments ? '// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' : ''}
${this.generateMessageHandlers()}

${this.options.includeComments ? '// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏' : ''}
${this.generateHelperFunctions()}

${this.options.includeComments ? '// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' : ''}
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('–ù–∞–∑–≤–∞–Ω–∏–µ:', config.name);
console.log('–û–ø–∏—Å–∞–Ω–∏–µ:', config.description);

bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

process.on('SIGINT', () => {
  console.log('\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  ${this.options.includeAdvancedFeatures ? 'stateManager.cleanup();' : ''}
  bot.stopPolling();
  process.exit(0);
});
`;

    return {
      path: 'index.js',
      content: mainCode,
      type: 'js'
    };
  }

  generateFileHeader() {
    return `/**
 * ${this.botSchema.name}
 * ${this.botSchema.description}
 * 
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
 * –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
 */

`;
  }

  generateMessageHandlers() {
    const hasTextHandlers = this.botSchema.configuration?.nodes?.some(
      node => node.type === 'trigger-message'
    );

    if (!hasTextHandlers) return '';

    return `
bot.on('message', async (msg) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  if (msg.text && msg.text.startsWith('/')) return;
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  console.log(\`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}: \${msg.text}\`);
  
  try {
    ${this.options.includeAdvancedFeatures ? 'stateManager.updateUserActivity(userId);' : 'updateUserState(userId);'}
    ${this.options.includeAdvancedFeatures ? 'stateManager.setUserVariable(userId, "message_text", msg.text || "");' : ''}
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const responseText = replaceVariables('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{{message_text}}"\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.', userId);
    await bot.sendMessage(chatId, responseText);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});`;
  }

  generateHelperFunctions() {
    if (this.options.includeAdvancedFeatures) {
      return `
function updateUserState(userId) {
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  console.log(\`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}\`);
}

function replaceVariables(text, userId) {
  let result = text;
  
  // –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  for (const [key, variable] of Object.entries(botVariables)) {
    const placeholder = \`{{\${key}}}\`;
    result = result.replace(new RegExp(placeholder, 'g'), variable.defaultValue);
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  result = result.replace(/{{current_time}}/g, new Date().toLocaleString('ru-RU'));
  result = result.replace(/{{random_number}}/g, Math.floor(Math.random() * 1000));
  
  return result;
}`;
    } else {
      return `
function updateUserState(userId) {
  if (!userStates.has(userId)) {
    userStates.set(userId, {
      messageCount: 0,
      lastActivity: new Date(),
      variables: new Map()
    });
  }
  
  const state = userStates.get(userId);
  state.messageCount++;
  state.lastActivity = new Date();
}

function replaceVariables(text, userId) {
  let result = text;
  
  // –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  for (const [key, variable] of Object.entries(botVariables)) {
    const placeholder = \`{{\${key}}}\`;
    result = result.replace(new RegExp(placeholder, 'g'), variable.defaultValue);
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const userState = userStates.get(userId);
  if (userState) {
    result = result.replace(/{{message_count}}/g, userState.messageCount);
    result = result.replace(/{{user_count}}/g, userStates.size);
  }
  
  return result;
}`;
    }
  }

  getConnectedActions(nodeId) {
    const edges = this.botSchema.configuration?.edges || [];
    const nodes = this.botSchema.configuration?.nodes || [];
    
    return edges
      .filter(edge => edge.source === nodeId)
      .map(edge => nodes.find(node => node.id === edge.target))
      .filter(Boolean);
  }

  generateActionCode(action) {
    switch (action.type) {
      case 'action-send-message':
        const hasButtons = action.data.buttons && action.data.buttons.length > 0;
        return `    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${action.data.label}
    const message = replaceVariables(\`${action.data.text}\`, userId);
    await bot.sendMessage(chatId, message, { 
      parse_mode: '${action.data.parseMode || 'HTML'}'${hasButtons ? `,
      reply_markup: {
        inline_keyboard: ${JSON.stringify(action.data.buttons)}
      }` : ''}
    });
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');`;

      case 'action-send-media':
        return `    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞: ${action.data.label}
    const mediaUrl = replaceVariables('${action.data.mediaUrl || 'https://picsum.photos/800/600'}', userId);
    const caption = replaceVariables(\`${action.data.caption || ''}\`, userId);
    await bot.sendPhoto(chatId, mediaUrl, {
      caption: caption,
      parse_mode: '${action.data.parseMode || 'HTML'}'
    });
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞');`;

      case 'action-integration':
        if (!this.options.includeIntegrations) {
          return `    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${action.data.label}
    console.log('‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${action.data.label} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞)');`;
        }
        
        return `    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: ${action.data.label}
    try {
      const integrationResult = await integrationManager.executeIntegration('${action.id}', {
        user_id: userId,
        username: msg.from?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      });
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ${action.data.label} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ${action.data.label}:', error);
    }`;

      default:
        return `    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}
    console.warn('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', '${action.type}');`;
    }
  }

  generatePackageJson() {
    const dependencies = {
      'node-telegram-bot-api': '^0.61.0'
    };

    if (this.options.includeIntegrations) {
      dependencies['axios'] = '^1.6.0';
    }

    const packageJson = {
      name: this.botSchema.id || 'exported-bot',
      version: '1.0.0',
      description: this.botSchema.description || '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞',
      main: 'index.js',
      scripts: {
        start: 'node index.js',
        dev: 'nodemon index.js',
        test: this.options.generateTests ? 'node test.js' : 'echo "No tests specified" && exit 0'
      },
      dependencies,
      devDependencies: {
        nodemon: '^2.0.22'
      },
      keywords: ['telegram', 'bot', 'chatbot', 'exported'],
      author: 'Bot Constructor',
      license: 'MIT'
    };

    return {
      path: 'package.json',
      content: JSON.stringify(packageJson, null, 2),
      type: 'json'
    };
  }

  generateReadme() {
    const commands = this.botSchema.configuration?.nodes
      ?.filter(node => node.type === 'trigger-command')
      ?.map(node => `- \`${node.data.command}\` - ${node.data.description || node.data.label}`)
      ?.join('\n') || '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

    const readme = `# ${this.botSchema.name}

${this.botSchema.description}

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
\`\`\`bash
npm install
\`\`\`

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
\`\`\`bash
cp .env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
\`\`\`

### 3. –ó–∞–ø—É—Å–∫
\`\`\`bash
npm start
\`\`\`

## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

${commands}

## üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

${this.options.includeAdvancedFeatures ? '‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã' : '‚ùå –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'}
${this.options.includeIntegrations ? '‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API' : '‚ùå –ë–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π'}
${this.options.generateTests ? '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã' : '‚ùå –ë–µ–∑ —Ç–µ—Å—Ç–æ–≤'}
${this.options.generateDocumentation ? '‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API' : '‚ùå –ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏'}

–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}
`;

    return {
      path: 'README.md',
      content: readme,
      type: 'md'
    };
  }

  generateEnvExample() {
    return {
      path: '.env.example',
      content: `TELEGRAM_BOT_TOKEN=your_bot_token_here
NODE_ENV=production
LOG_LEVEL=info
`,
      type: 'txt'
    };
  }

  generateConfigFile() {
    return {
      path: 'config.json',
      content: JSON.stringify({
        name: this.botSchema.name,
        description: this.botSchema.description,
        version: '1.0.0',
        exported: new Date().toISOString(),
        variables: this.botSchema.configuration?.variables || {}
      }, null, 2),
      type: 'json'
    };
  }

  generateUtilsFile() {
    return {
      path: 'utils.js',
      content: `/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
 */

class BotUtils {
  static formatTime(date) {
    return new Intl.DateTimeFormat('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }).format(date);
  }

  static truncateText(text, maxLength = 100) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength - 3) + '...';
  }

  static logWithTimestamp(level, message, ...args) {
    const timestamp = this.formatTime(new Date());
    const levelEmoji = {
      info: '‚ÑπÔ∏è',
      warn: '‚ö†Ô∏è',
      error: '‚ùå',
      success: '‚úÖ'
    };
    
    console.log(\`[\${timestamp}] \${levelEmoji[level] || 'üìù'} \${message}\`, ...args);
  }
}

module.exports = BotUtils;
`,
      type: 'js'
    };
  }

  generateStateManagerFile() {
    return {
      path: 'state-manager.js',
      content: `/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

class StateManager {
  constructor() {
    this.states = new Map();
    this.startTime = Date.now();
  }

  updateUserActivity(userId) {
    if (!this.states.has(userId)) {
      this.states.set(userId, {
        messageCount: 0,
        lastActivity: new Date(),
        variables: new Map()
      });
    }
    
    const state = this.states.get(userId);
    state.messageCount++;
    state.lastActivity = new Date();
  }

  setUserVariable(userId, key, value) {
    const state = this.states.get(userId);
    if (state) {
      state.variables.set(key, value);
    }
  }

  getUserVariable(userId, key) {
    const state = this.states.get(userId);
    return state ? state.variables.get(key) : undefined;
  }

  replaceVariables(text, userId) {
    let result = text;
    
    const state = this.states.get(userId);
    if (state) {
      result = result.replace(/{{message_count}}/g, state.messageCount);
      result = result.replace(/{{user_count}}/g, this.states.size);
      
      // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      for (const [key, value] of state.variables) {
        result = result.replace(new RegExp(\`{{\${key}}}\`, 'g'), value);
      }
    }
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    result = result.replace(/{{current_time}}/g, new Date().toLocaleString('ru-RU'));
    result = result.replace(/{{uptime}}/g, this.formatUptime());
    result = result.replace(/{{random_number}}/g, Math.floor(Math.random() * 1000));
    
    return result;
  }

  formatUptime() {
    const uptime = Date.now() - this.startTime;
    const seconds = Math.floor(uptime / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);

    if (hours > 0) return \`\${hours} —á. \${minutes % 60} –º–∏–Ω.\`;
    if (minutes > 0) return \`\${minutes} –º–∏–Ω. \${seconds % 60} —Å–µ–∫.\`;
    return \`\${seconds} —Å–µ–∫.\`;
  }

  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    this.states.clear();
  }
}

module.exports = StateManager;
`,
      type: 'js'
    };
  }

  generateIntegrationsFile() {
    return {
      path: 'integrations.js',
      content: `/**
 * –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
 */
const axios = require('axios');

class IntegrationManager {
  constructor() {
    this.cache = new Map();
    this.rateLimits = new Map();
  }

  async executeIntegration(integrationId, variables = {}) {
    console.log(\`üîó –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: \${integrationId}\`);
    
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockData = {
      fact: "This is a mock integration response",
      source: "https://example.com",
      timestamp: new Date().toISOString()
    };
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    await new Promise(resolve => setTimeout(resolve, 100));
    
    return mockData;
  }
}

module.exports = IntegrationManager;
`,
      type: 'js'
    };
  }

  generateTestFile() {
    return {
      path: 'test.js',
      content: `/**
 * –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞
 */

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try {
  const config = require('./config.json');
  console.log('‚úÖ –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  console.log(\`   –ù–∞–∑–≤–∞–Ω–∏–µ: \${config.name}\`);
} catch (error) {
  console.log('‚ùå –¢–µ—Å—Ç 1: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try {
  const TelegramBot = require('node-telegram-bot-api');
  console.log('‚úÖ –¢–µ—Å—Ç 2: Telegram Bot API –¥–æ—Å—Ç—É–ø–µ–Ω');
} catch (error) {
  console.log('‚ùå –¢–µ—Å—Ç 2: Telegram Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

${this.options.includeAdvancedFeatures ? `
// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–∏–ª–∏—Ç
try {
  const BotUtils = require('./utils');
  const time = BotUtils.formatTime(new Date());
  console.log('‚úÖ –¢–µ—Å—Ç 3: –£—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
  console.log(\`   –í—Ä–µ–º—è: \${time}\`);
} catch (error) {
  console.log('‚ùå –¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ —É—Ç–∏–ª–∏—Ç');
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
try {
  const StateManager = require('./state-manager');
  const stateManager = new StateManager();
  stateManager.updateUserActivity(12345);
  console.log('‚úÖ –¢–µ—Å—Ç 4: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
} catch (error) {
  console.log('‚ùå –¢–µ—Å—Ç 4: –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π');
}` : ''}

${this.options.includeIntegrations ? `
// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
try {
  const IntegrationManager = require('./integrations');
  const integrationManager = new IntegrationManager();
  console.log('‚úÖ –¢–µ—Å—Ç 5: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (error) {
  console.log('‚ùå –¢–µ—Å—Ç 5: –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π');
}` : ''}

console.log('\\nüéâ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
`,
      type: 'js'
    };
  }

  generateApiDocumentation() {
    return {
      path: 'API.md',
      content: `# API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## –û–±–∑–æ—Ä

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

### –ö–æ–º–∞–Ω–¥—ã

${this.botSchema.configuration?.nodes
  ?.filter(node => node.type === 'trigger-command')
  ?.map(node => `#### ${node.data.command}
- **–û–ø–∏—Å–∞–Ω–∏–µ**: ${node.data.description || node.data.label}
- **–¢–∏–ø**: –ö–æ–º–∞–Ω–¥–∞
- **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: –û—Ç–ø—Ä–∞–≤—å—Ç–µ ${node.data.command} –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º`)
  ?.join('\n\n') || '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

${Object.entries(this.botSchema.configuration?.variables || {})
  .map(([key, variable]) => `#### {{${key}}}
- **–¢–∏–ø**: ${variable.type}
- **–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é**: ${variable.defaultValue}
- **–û–ø–∏—Å–∞–Ω–∏–µ**: ${variable.description}`)
  .join('\n\n')}

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

–ë–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö:

- **index.js** - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –ª–æ–≥–∏–∫–æ–π –±–æ—Ç–∞
- **config.json** - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
${this.options.includeAdvancedFeatures ? '- **utils.js** - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n- **state-manager.js** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' : ''}
${this.options.includeIntegrations ? '- **integrations.js** - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API' : ''}

### –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: \`npm install\`
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ \`.env\`
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: \`npm start\`

–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toLocaleString('ru-RU')}
`,
      type: 'md'
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
async function testTypeScriptExporter() {
  console.log('üî∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞\n');
  console.log('='.repeat(60));
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ö–µ–º—É –±–æ—Ç–∞
    const testBotSchema = {
      id: "typescript-test-bot",
      name: "TypeScript Test Bot",
      description: "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞",
      configuration: {
        nodes: [
          {
            id: "start-cmd",
            type: "trigger-command",
            data: {
              label: "Start Command",
              command: "/start",
              description: "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
            }
          },
          {
            id: "welcome-msg",
            type: "action-send-message",
            data: {
              label: "Welcome Message",
              text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ TypeScript —ç–∫—Å–ø–æ—Ä—Ç.",
              parseMode: "HTML"
            }
          },
          {
            id: "stats-cmd",
            type: "trigger-command",
            data: {
              label: "Stats Command",
              command: "/stats",
              description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
            }
          },
          {
            id: "stats-msg",
            type: "action-send-message",
            data: {
              label: "Stats Message",
              text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\\n–°–æ–æ–±—â–µ–Ω–∏–π: {{message_count}}\\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {{user_count}}",
              parseMode: "HTML"
            }
          }
        ],
        edges: [
          { id: "start-to-welcome", source: "start-cmd", target: "welcome-msg" },
          { id: "stats-to-msg", source: "stats-cmd", target: "stats-msg" }
        ],
        variables: {
          message_count: {
            type: "number",
            defaultValue: 0,
            description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"
          },
          user_count: {
            type: "number",
            defaultValue: 1,
            description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
          }
        }
      }
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportConfigs = [
      {
        name: "–ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
        options: {
          includeComments: true,
          includeAdvancedFeatures: false,
          includeIntegrations: false,
          generateTests: false,
          generateDocumentation: false
        }
      },
      {
        name: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
        options: {
          includeComments: true,
          includeAdvancedFeatures: true,
          includeIntegrations: false,
          generateTests: false,
          generateDocumentation: true
        }
      },
      {
        name: "–ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç",
        options: {
          includeComments: true,
          includeAdvancedFeatures: true,
          includeIntegrations: true,
          generateTests: true,
          generateDocumentation: true
        }
      }
    ];
    
    const results = [];
    
    for (const config of exportConfigs) {
      console.log(`üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${config.name}`);
      
      try {
        const exporter = new SimpleNodeJSExporter(testBotSchema, config.options);
        const result = exporter.export();
        
        if (result.success) {
          console.log(`‚úÖ ${config.name} - —É—Å–ø–µ—à–Ω–æ`);
          console.log(`üìÅ –§–∞–π–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${result.files.length}`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
          const fileTypes = result.files.reduce((acc, file) => {
            acc[file.type] = (acc[file.type] || 0) + 1;
            return acc;
          }, {});
          
          console.log(`üìä –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:`, fileTypes);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const outputDir = path.join(__dirname, '..', 'temp', `ts-export-${config.name.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}`);
          fs.mkdirSync(outputDir, { recursive: true });
          
          result.files.forEach(file => {
            fs.writeFileSync(path.join(outputDir, file.path), file.content);
          });
          
          console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputDir}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
          const mainFile = result.files.find(f => f.path === 'index.js');
          if (mainFile) {
            const codeQuality = analyzeCodeQuality(mainFile.content);
            console.log(`üéØ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: ${codeQuality.score}%`);
          }
          
          results.push({
            name: config.name,
            success: true,
            filesCount: result.files.length,
            fileTypes: fileTypes,
            outputDir: outputDir
          });
        } else {
          console.log(`‚ùå ${config.name} - –æ—à–∏–±–∫–∞: ${result.error}`);
          results.push({
            name: config.name,
            success: false,
            error: result.error
          });
        }
      } catch (error) {
        console.log(`üí• ${config.name} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
        results.push({
          name: config.name,
          success: false,
          error: error.message
        });
      }
      
      console.log('');
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    console.log('‚îÄ'.repeat(50));
    
    const successful = results.filter(r => r.success);
    const failed = results.filter(r => !r.success);
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${successful.length}/${results.length}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${failed.length}/${results.length}`);
    
    if (successful.length > 0) {
      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤:');
      successful.forEach(result => {
        console.log(`  ‚Ä¢ ${result.name}: ${result.filesCount} —Ñ–∞–π–ª–æ–≤`);
        console.log(`    –¢–∏–ø—ã: ${Object.entries(result.fileTypes).map(([type, count]) => `${count} ${type}`).join(', ')}`);
      });
    }
    
    if (failed.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      failed.forEach(result => {
        console.log(`  ‚Ä¢ ${result.name}: ${result.error}`);
      });
    }
    
    const successRate = (successful.length / results.length) * 100;
    console.log(`\nüéØ –û–±—â–∏–π —É—Å–ø–µ—Ö: ${Math.round(successRate)}%`);
    
    if (successRate >= 90) {
      console.log('üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞!');
    } else if (successRate >= 70) {
      console.log('üëç –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞');
    } else {
      console.log('‚ö†Ô∏è TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π');
    }
    
    return successRate >= 70;
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
function analyzeCodeQuality(code) {
  const checks = [
    { name: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', pattern: /\/\*\*[\s\S]*?\*\/|\/\/.*$/gm, weight: 10 },
    { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', pattern: /try\s*{[\s\S]*?}\s*catch/g, weight: 20 },
    { name: 'Async/await', pattern: /async\s+function|await\s+/g, weight: 15 },
    { name: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã', pattern: /const\s+\w+/g, weight: 10 },
    { name: '–§—É–Ω–∫—Ü–∏–∏', pattern: /function\s+\w+|=>\s*{/g, weight: 15 },
    { name: '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', pattern: /console\.(log|error|warn|info)/g, weight: 10 },
    { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è', pattern: /if\s*\(.*\)\s*{/g, weight: 10 },
    { name: '–ú–æ–¥—É–ª–∏', pattern: /require\(|module\.exports/g, weight: 10 }
  ];
  
  let totalScore = 0;
  let maxScore = 0;
  const details = [];
  
  checks.forEach(check => {
    const matches = code.match(check.pattern) || [];
    const score = Math.min(check.weight, matches.length * 2);
    totalScore += score;
    maxScore += check.weight;
    
    details.push({
      name: check.name,
      matches: matches.length,
      score: score,
      maxScore: check.weight
    });
  });
  
  return {
    score: Math.round((totalScore / maxScore) * 100),
    totalScore,
    maxScore,
    details
  };
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testTypeScriptExporter().then(success => {
    console.log('\n' + '='.repeat(60));
    if (success) {
      console.log('üéâ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('‚ùå TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
    }
    console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  });
}

module.exports = {
  SimpleNodeJSExporter,
  testTypeScriptExporter,
  analyzeCodeQuality
};