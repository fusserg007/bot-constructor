/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const fs = require('fs');
const path = require('path');
const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    req.on('error', (err) => {
      reject(err);
    });
    if (postData) {
      req.write(postData);
    }
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function createTestBotWithLogging() {
  console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...\n');
  
  try {
    const botId = `logging-test-bot-${Date.now()}`;
    const botData = {
      id: botId,
      name: "Logging Test Bot",
      description: "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
      token: "LOGGING_TEST_TOKEN_123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      status: "draft",
      platforms: [
        {
          platform: "telegram",
          enabled: true,
          credentials: {
            token: "LOGGING_TEST_TOKEN_123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          },
          mode: "polling",
          status: "disconnected"
        }
      ],
      configuration: {
        nodes: [
          {
            id: "start-command",
            type: "trigger-command",
            position: { x: 100, y: 100 },
            data: {
              label: "Start Command",
              command: "/start",
              description: "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
              color: "#3b82f6"
            }
          },
          {
            id: "welcome-message",
            type: "action-send-message",
            position: { x: 400, y: 100 },
            data: {
              label: "Welcome Message",
              text: "üîç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º!\\n\\n–í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏.\\n\\n–í–∞—à ID: {{user_id}}",
              parseMode: "HTML",
              color: "#10b981"
            }
          },
          {
            id: "logs-command",
            type: "trigger-command",
            position: { x: 100, y: 250 },
            data: {
              label: "Logs Command",
              command: "/logs",
              description: "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤",
              color: "#3b82f6"
            }
          },
          {
            id: "logs-message",
            type: "action-send-message",
            position: { x: 400, y: 250 },
            data: {
              label: "Logs Info",
              text: "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏:</b>\\n\\n‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è\\n‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è\\n‚Ä¢ –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è\\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è\\n\\n<i>–õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ</i>",
              parseMode: "HTML",
              color: "#10b981"
            }
          },
          {
            id: "error-command",
            type: "trigger-command",
            position: { x: 100, y: 400 },
            data: {
              label: "Error Command",
              command: "/error",
              description: "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
              color: "#ef4444"
            }
          },
          {
            id: "error-message",
            type: "action-send-message",
            position: { x: 400, y: 400 },
            data: {
              label: "Error Test",
              text: "‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è!\\n\\n–û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.",
              parseMode: "HTML",
              color: "#ef4444"
            }
          }
        ],
        edges: [
          {
            id: "start-to-welcome",
            source: "start-command",
            target: "welcome-message"
          },
          {
            id: "logs-to-info",
            source: "logs-command",
            target: "logs-message"
          },
          {
            id: "error-to-test",
            source: "error-command",
            target: "error-message"
          }
        ],
        variables: {
          user_id: {
            type: "string",
            defaultValue: "0",
            description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          }
        }
      },
      stats: {
        messagesProcessed: 0,
        activeUsers: 0,
        uptime: 1,
        lastActivity: new Date().toISOString()
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞
    const botsDir = path.join(__dirname, '..', 'data', 'bots');
    if (!fs.existsSync(botsDir)) {
      fs.mkdirSync(botsDir, { recursive: true });
    }
    
    const botPath = path.join(botsDir, `bot_${botId}.json`);
    fs.writeFileSync(botPath, JSON.stringify(botData, null, 2));
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω!');
    console.log(`üìã ID: ${botData.id}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${botData.name}`);
    console.log(`üìä –£–∑–ª–æ–≤: ${botData.configuration.nodes.length}`);
    console.log(`üíæ –§–∞–π–ª: ${botPath}`);
    
    return botData;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Logger –∫–ª–∞—Å—Å–∞
async function testLoggerClass() {
  console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Logger –∫–ª–∞—Å—Å–∞...\n');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Logger
    const Logger = require('../utils/Logger');
    const logger = new Logger();
    
    console.log('‚úÖ Logger –∫–ª–∞—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const testBotId = 'test-logging-bot';
    const testUserId = 12345;
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await logger.logMessage(testBotId, testUserId, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', 'text');
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    await logger.logCommand(testBotId, testUserId, '/start', []);
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await logger.logAction(testBotId, 'send_message', {
      userId: testUserId,
      messageText: '–û—Ç–≤–µ—Ç –±–æ—Ç–∞',
      nodeId: 'welcome-message'
    });
    console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    const testError = new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
    await logger.logError(testBotId, testError, {
      userId: testUserId,
      command: '/error',
      nodeId: 'error-handler'
    });
    console.log('‚úÖ –û—à–∏–±–∫–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await logger.logSystemEvent('bot_started', {
      botId: testBotId,
      timestamp: new Date().toISOString()
    });
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const endDate = new Date();
    const startDate = new Date(endDate.getTime() - 60 * 60 * 1000); // 1 —á–∞—Å –Ω–∞–∑–∞–¥
    
    const logs = await logger.getBotLogs(testBotId, startDate, endDate);
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –ª–æ–≥–æ–≤: ${logs.length}`);
    
    if (logs.length > 0) {
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤:');
      logs.slice(0, 3).forEach((log, index) => {
        console.log(`  ${index + 1}. [${log.timestamp}] ${log.eventType}: ${JSON.stringify(log.data).substring(0, 100)}...`);
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await logger.getBotStats(testBotId, startDate, endDate);
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:');
    console.log(`  ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${stats.totalEvents}`);
    console.log(`  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.messagesProcessed}`);
    console.log(`  ‚Ä¢ –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.commandsExecuted}`);
    console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${stats.errorsCount}`);
    console.log(`  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.activeUsers}`);
    
    console.log('\nüìä –°–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º:');
    Object.entries(stats.eventsByType).forEach(([type, count]) => {
      console.log(`  ‚Ä¢ ${type}: ${count}`);
    });
    
    return true;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Logger:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ª–æ–≥–æ–≤
async function createLogsWebInterface() {
  console.log('\nüåê –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ª–æ–≥–æ–≤...\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    const logsHtml = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - Bot Constructor</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            color: #333;
        }
        
        .header {
            background: #2563eb;
            color: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .controls {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .controls h2 {
            margin-bottom: 1rem;
            color: #1f2937;
        }
        
        .form-group {
            display: flex;
            gap: 1rem;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .form-group label {
            min-width: 120px;
            font-weight: 500;
        }
        
        .form-group input, .form-group select {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        
        .btn {
            background: #2563eb;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background 0.2s;
        }
        
        .btn:hover {
            background: #1d4ed8;
        }
        
        .btn-secondary {
            background: #6b7280;
        }
        
        .btn-secondary:hover {
            background: #4b5563;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .stat-card h3 {
            font-size: 2rem;
            font-weight: 700;
            color: #2563eb;
            margin-bottom: 0.5rem;
        }
        
        .stat-card p {
            color: #6b7280;
            font-size: 0.9rem;
        }
        
        .logs-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .logs-header {
            background: #f9fafb;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e5e7eb;
        }
        
        .logs-header h2 {
            color: #1f2937;
        }
        
        .logs-list {
            max-height: 600px;
            overflow-y: auto;
        }
        
        .log-entry {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #f3f4f6;
            transition: background 0.2s;
        }
        
        .log-entry:hover {
            background: #f9fafb;
        }
        
        .log-entry:last-child {
            border-bottom: none;
        }
        
        .log-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .log-type {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
        }
        
        .log-type.message {
            background: #dbeafe;
            color: #1e40af;
        }
        
        .log-type.command {
            background: #d1fae5;
            color: #065f46;
        }
        
        .log-type.action {
            background: #fef3c7;
            color: #92400e;
        }
        
        .log-type.error {
            background: #fee2e2;
            color: #991b1b;
        }
        
        .log-timestamp {
            color: #6b7280;
            font-size: 0.8rem;
        }
        
        .log-data {
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.8rem;
            background: #f9fafb;
            padding: 0.5rem;
            border-radius: 4px;
            color: #374151;
            white-space: pre-wrap;
            word-break: break-all;
        }
        
        .loading {
            text-align: center;
            padding: 2rem;
            color: #6b7280;
        }
        
        .error {
            background: #fee2e2;
            color: #991b1b;
            padding: 1rem;
            border-radius: 4px;
            margin: 1rem 0;
        }
        
        .auto-refresh {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .auto-refresh input[type="checkbox"] {
            margin: 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
    </div>
    
    <div class="container">
        <div class="controls">
            <h2>–§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
            
            <div class="form-group">
                <label for="botId">ID –±–æ—Ç–∞:</label>
                <input type="text" id="botId" placeholder="–í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞">
                <button class="btn" onclick="loadLogs()">–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏</button>
                <button class="btn btn-secondary" onclick="clearLogs()">–û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
            
            <div class="form-group">
                <label for="eventType">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:</label>
                <select id="eventType">
                    <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
                    <option value="message">–°–æ–æ–±—â–µ–Ω–∏—è</option>
                    <option value="command">–ö–æ–º–∞–Ω–¥—ã</option>
                    <option value="action">–î–µ–π—Å—Ç–≤–∏—è</option>
                    <option value="error">–û—à–∏–±–∫–∏</option>
                </select>
                
                <label for="timeRange">–ü–µ—Ä–∏–æ–¥:</label>
                <select id="timeRange">
                    <option value="1">–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</option>
                    <option value="24">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</option>
                    <option value="168">–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è</option>
                    <option value="720">–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</option>
                </select>
            </div>
            
            <div class="form-group">
                <div class="auto-refresh">
                    <input type="checkbox" id="autoRefresh">
                    <label for="autoRefresh">–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫)</label>
                </div>
            </div>
        </div>
        
        <div class="stats" id="stats" style="display: none;">
            <div class="stat-card">
                <h3 id="totalEvents">0</h3>
                <p>–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π</p>
            </div>
            <div class="stat-card">
                <h3 id="messagesCount">0</h3>
                <p>–°–æ–æ–±—â–µ–Ω–∏–π</p>
            </div>
            <div class="stat-card">
                <h3 id="commandsCount">0</h3>
                <p>–ö–æ–º–∞–Ω–¥</p>
            </div>
            <div class="stat-card">
                <h3 id="errorsCount">0</h3>
                <p>–û—à–∏–±–æ–∫</p>
            </div>
            <div class="stat-card">
                <h3 id="activeUsers">0</h3>
                <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
        </div>
        
        <div class="logs-container">
            <div class="logs-header">
                <h2>–õ–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π</h2>
            </div>
            <div class="logs-list" id="logsList">
                <div class="loading">
                    –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let autoRefreshInterval = null;
        
        async function loadLogs() {
            const botId = document.getElementById('botId').value.trim();
            if (!botId) {
                alert('–í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞');
                return;
            }
            
            const eventType = document.getElementById('eventType').value;
            const timeRange = parseInt(document.getElementById('timeRange').value);
            
            const logsList = document.getElementById('logsList');
            logsList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>';
            
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏
                const logsResponse = await fetch(\`/api/logs/\${botId}?eventType=\${eventType}&hours=\${timeRange}\`);
                
                if (!logsResponse.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤');
                }
                
                const data = await logsResponse.json();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                updateStats(data.stats);
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏
                displayLogs(data.logs);
                
            } catch (error) {
                logsList.innerHTML = \`<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: \${error.message}</div>\`;
            }
        }
        
        function updateStats(stats) {
            document.getElementById('totalEvents').textContent = stats.totalEvents || 0;
            document.getElementById('messagesCount').textContent = stats.messagesProcessed || 0;
            document.getElementById('commandsCount').textContent = stats.commandsExecuted || 0;
            document.getElementById('errorsCount').textContent = stats.errorsCount || 0;
            document.getElementById('activeUsers').textContent = stats.activeUsers || 0;
            
            document.getElementById('stats').style.display = 'grid';
        }
        
        function displayLogs(logs) {
            const logsList = document.getElementById('logsList');
            
            if (logs.length === 0) {
                logsList.innerHTML = '<div class="loading">–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }
            
            const logsHtml = logs.map(log => {
                const timestamp = new Date(log.timestamp).toLocaleString('ru-RU');
                const dataStr = JSON.stringify(log.data, null, 2);
                
                return \`
                    <div class="log-entry">
                        <div class="log-meta">
                            <span class="log-type \${log.eventType}">\${log.eventType}</span>
                            <span class="log-timestamp">\${timestamp}</span>
                        </div>
                        <div class="log-data">\${dataStr}</div>
                    </div>
                \`;
            }).join('');
            
            logsList.innerHTML = logsHtml;
        }
        
        function clearLogs() {
            document.getElementById('logsList').innerHTML = '<div class="loading">–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π</div>';
            document.getElementById('stats').style.display = 'none';
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        document.getElementById('autoRefresh').addEventListener('change', function() {
            if (this.checked) {
                autoRefreshInterval = setInterval(() => {
                    const botId = document.getElementById('botId').value.trim();
                    if (botId) {
                        loadLogs();
                    }
                }, 5000);
            } else {
                if (autoRefreshInterval) {
                    clearInterval(autoRefreshInterval);
                    autoRefreshInterval = null;
                }
            }
        });
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –ø–æ Enter
        document.getElementById('botId').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                loadLogs();
            }
        });
    </script>
</body>
</html>`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
    const logsHtmlPath = path.join(__dirname, '..', 'public', 'logs.html');
    fs.writeFileSync(logsHtmlPath, logsHtml);
    
    console.log('‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω');
    console.log(`üìÑ –§–∞–π–ª: ${logsHtmlPath}`);
    console.log('üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3002/logs.html');
    
    return true;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è API —Ä–æ—É—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
async function createLogsAPI() {
  console.log('\nüîå –°–æ–∑–¥–∞–Ω–∏–µ API –¥–ª—è –ª–æ–≥–æ–≤...\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç –¥–ª—è API –ª–æ–≥–æ–≤
    const logsApiCode = `const express = require('express');
const Logger = require('../utils/Logger');
const router = express.Router();

const logger = new Logger();

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –±–æ—Ç–∞
 * GET /api/logs/:botId?eventType=&hours=24
 */
router.get('/:botId', async (req, res) => {
  try {
    const { botId } = req.params;
    const { eventType, hours = 24 } = req.query;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    const endDate = new Date();
    const startDate = new Date(endDate.getTime() - (parseInt(hours) * 60 * 60 * 1000));
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    const logs = await logger.getBotLogs(botId, startDate, endDate, eventType || null);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await logger.getBotStats(botId, startDate, endDate);
    
    res.json({
      success: true,
      logs: logs.reverse(), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ª–æ–≥–∏ —Å–≤–µ—Ä—Ö—É
      stats,
      period: {
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString(),
        hours: parseInt(hours)
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
 * GET /api/logs/system/stats
 */
router.get('/system/stats', async (req, res) => {
  try {
    const { hours = 24 } = req.query;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    const fs = require('fs');
    const path = require('path');
    const botsDir = path.join(__dirname, '..', 'data', 'bots');
    
    if (!fs.existsSync(botsDir)) {
      return res.json({
        success: true,
        stats: {
          totalBots: 0,
          activeBots: 0,
          totalEvents: 0,
          totalUsers: 0
        }
      });
    }
    
    const botFiles = fs.readdirSync(botsDir).filter(file => file.startsWith('bot_') && file.endsWith('.json'));
    
    let totalEvents = 0;
    let totalUsers = new Set();
    let activeBots = 0;
    
    const endDate = new Date();
    const startDate = new Date(endDate.getTime() - (parseInt(hours) * 60 * 60 * 1000));
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –±–æ—Ç–∞–º
    for (const botFile of botFiles) {
      const botId = botFile.replace('bot_', '').replace('.json', '');
      
      try {
        const stats = await logger.getBotStats(botId, startDate, endDate);
        
        if (stats.totalEvents > 0) {
          activeBots++;
          totalEvents += stats.totalEvents;
          
          // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
          for (let i = 0; i < stats.activeUsers; i++) {
            totalUsers.add(\`\${botId}_user_\${i}\`);
          }
        }
      } catch (error) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –±–µ–∑ –ª–æ–≥–æ–≤
        continue;
      }
    }
    
    res.json({
      success: true,
      stats: {
        totalBots: botFiles.length,
        activeBots,
        totalEvents,
        totalUsers: totalUsers.size
      },
      period: {
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString(),
        hours: parseInt(hours)
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
 * DELETE /api/logs/cleanup?months=12
 */
router.delete('/cleanup', async (req, res) => {
  try {
    const { months = 12 } = req.query;
    
    await logger.cleanupOldLogs(parseInt(months));
    
    res.json({
      success: true,
      message: \`–°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ \${months} –º–µ—Å—è—Ü–µ–≤) —É–¥–∞–ª–µ–Ω—ã\`
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ CSV
 * GET /api/logs/:botId/export?format=csv&hours=24
 */
router.get('/:botId/export', async (req, res) => {
  try {
    const { botId } = req.params;
    const { format = 'csv', hours = 24, eventType } = req.query;
    
    const endDate = new Date();
    const startDate = new Date(endDate.getTime() - (parseInt(hours) * 60 * 60 * 1000));
    
    const logs = await logger.getBotLogs(botId, startDate, endDate, eventType || null);
    
    if (format === 'csv') {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
      const csvHeader = 'Timestamp,Event Type,User ID,Data\\n';
      const csvRows = logs.map(log => {
        const timestamp = log.timestamp;
        const eventType = log.eventType;
        const userId = log.data.userId || '';
        const data = JSON.stringify(log.data).replace(/"/g, '""'); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
        
        return \`"\${timestamp}","\${eventType}","\${userId}","\${data}"\`;
      }).join('\\n');
      
      const csv = csvHeader + csvRows;
      
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', \`attachment; filename="logs_\${botId}_\${Date.now()}.csv"\`);
      res.send(csv);
      
    } else if (format === 'json') {
      res.setHeader('Content-Type', 'application/json');
      res.setHeader('Content-Disposition', \`attachment; filename="logs_\${botId}_\${Date.now()}.json"\`);
      res.json({
        botId,
        period: { startDate, endDate },
        logs
      });
      
    } else {
      res.status(400).json({
        success: false,
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ csv –∏–ª–∏ json'
      });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—É—Ç
    const logsApiPath = path.join(__dirname, '..', 'routes', 'logs.js');
    fs.writeFileSync(logsApiPath, logsApiCode);
    
    console.log('‚úÖ API —Ä–æ—É—Ç —Å–æ–∑–¥–∞–Ω');
    console.log(`üìÑ –§–∞–π–ª: ${logsApiPath}`);
    console.log('üîå –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
    console.log('  ‚Ä¢ GET /api/logs/:botId - –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –±–æ—Ç–∞');
    console.log('  ‚Ä¢ GET /api/logs/system/stats - —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    console.log('  ‚Ä¢ DELETE /api/logs/cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤');
    console.log('  ‚Ä¢ GET /api/logs/:botId/export - —ç–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤');
    
    return true;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ª–æ–≥–æ–≤
async function testLogsAPI() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ª–æ–≥–æ–≤...\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    const Logger = require('../utils/Logger');
    const logger = new Logger();
    
    const testBotId = 'api-test-bot';
    const testUserId = 54321;
    
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    await logger.logMessage(testBotId, testUserId, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è API', 'text');
    await logger.logCommand(testBotId, testUserId, '/start', []);
    await logger.logAction(testBotId, 'send_message', { userId: testUserId, nodeId: 'welcome' });
    await logger.logError(testBotId, new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ API'), { userId: testUserId });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤...');
    
    const logsResponse = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/logs/${testBotId}?hours=1`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (logsResponse.statusCode === 200) {
      const data = JSON.parse(logsResponse.data);
      console.log('‚úÖ API –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –ª–æ–≥–æ–≤: ${data.logs.length}`);
      console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${data.stats.totalEvents} —Å–æ–±—ã—Ç–∏–π, ${data.stats.activeUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –ª–æ–≥–æ–≤:', logsResponse.statusCode);
      console.error('–û—Ç–≤–µ—Ç:', logsResponse.data);
      return false;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    const statsResponse = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: '/api/logs/system/stats?hours=24',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (statsResponse.statusCode === 200) {
      const data = JSON.parse(statsResponse.data);
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`ü§ñ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: ${data.stats.totalBots}`);
      console.log(`‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: ${data.stats.activeBots}`);
      console.log(`üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${data.stats.totalEvents}`);
      console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.stats.totalUsers}`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsResponse.statusCode);
      return false;
    }
    
    return true;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
async function integrateLoggingSystem() {
  console.log('\nüîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —Ä–æ—É—Ç –ª–æ–≥–æ–≤ –≤ server.js
    const serverPath = path.join(__dirname, '..', 'server.js');
    const serverContent = fs.readFileSync(serverPath, 'utf8');
    
    if (!serverContent.includes('routes/logs')) {
      console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–∞ –ª–æ–≥–æ–≤ –≤ server.js...');
      
      // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–∞
      const routePattern = /app\.use\('\/api\/[^']+',\s*require\('[^']+routes\/[^']+\.js'\)\);/g;
      const matches = [...serverContent.matchAll(routePattern)];
      
      if (matches.length > 0) {
        const lastMatch = matches[matches.length - 1];
        const insertPosition = lastMatch.index + lastMatch[0].length;
        
        const newRoute = "\napp.use('/api/logs', require('./routes/logs.js'));";
        const updatedContent = serverContent.slice(0, insertPosition) + newRoute + serverContent.slice(insertPosition);
        
        fs.writeFileSync(serverPath, updatedContent);
        console.log('‚úÖ –†–æ—É—Ç –ª–æ–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω –≤ server.js');
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–∞');
      }
    } else {
      console.log('‚úÖ –†–æ—É—Ç –ª–æ–≥–æ–≤ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å BotRuntime
    const runtimePath = path.join(__dirname, '..', 'utils', 'BotRuntime.js');
    
    if (fs.existsSync(runtimePath)) {
      const runtimeContent = fs.readFileSync(runtimePath, 'utf8');
      
      if (!runtimeContent.includes('Logger')) {
        console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ BotRuntime...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Logger
        const importPattern = /const\s+\w+\s*=\s*require\([^)]+\);/g;
        const imports = [...runtimeContent.matchAll(importPattern)];
        
        if (imports.length > 0) {
          const lastImport = imports[imports.length - 1];
          const insertPosition = lastImport.index + lastImport[0].length;
          
          const loggerImport = "\nconst Logger = require('./Logger');";
          const updatedContent = runtimeContent.slice(0, insertPosition) + loggerImport + runtimeContent.slice(insertPosition);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ª–æ–≥–≥–µ—Ä–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
          const constructorPattern = /constructor\s*\([^)]*\)\s*\{/;
          const constructorMatch = updatedContent.match(constructorPattern);
          
          if (constructorMatch) {
            const constructorEnd = constructorMatch.index + constructorMatch[0].length;
            const loggerInit = "\n    this.logger = new Logger();";
            const finalContent = updatedContent.slice(0, constructorEnd) + loggerInit + updatedContent.slice(constructorEnd);
            
            fs.writeFileSync(runtimePath, finalContent);
            console.log('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ BotRuntime');
          }
        }
      } else {
        console.log('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ BotRuntime');
      }
    }
    
    return true;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n');
  console.log('='.repeat(60));
  
  let allTestsPassed = true;
  
  // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
  const testBot = await createTestBotWithLogging();
  if (!testBot) {
    allTestsPassed = false;
  }
  
  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Logger –∫–ª–∞—Å—Å
  const loggerTest = await testLoggerClass();
  if (!loggerTest) {
    allTestsPassed = false;
  }
  
  // 3. –°–æ–∑–¥–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  const webInterface = await createLogsWebInterface();
  if (!webInterface) {
    allTestsPassed = false;
  }
  
  // 4. –°–æ–∑–¥–∞–µ–º API
  const apiCreation = await createLogsAPI();
  if (!apiCreation) {
    allTestsPassed = false;
  }
  
  // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º API
  const apiTest = await testLogsAPI();
  if (!apiTest) {
    allTestsPassed = false;
  }
  
  // 6. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º—É
  const integration = await integrateLoggingSystem();
  if (!integration) {
    allTestsPassed = false;
  }
  
  console.log('\n' + '='.repeat(60));
  if (allTestsPassed) {
    console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ Logger –∫–ª–∞—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω');
    console.log('‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π');
    console.log('‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('‚Ä¢ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    console.log('‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤');
    console.log('‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ CSV –∏ JSON —Ñ–æ—Ä–º–∞—Ç—ã');
    console.log('‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º');
    console.log('\nüåê –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: http://localhost:3002/logs.html');
  } else {
    console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∏');
    console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
  }
  
  console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  main();
}

module.exports = {
  createTestBotWithLogging,
  testLoggerClass,
  createLogsWebInterface,
  createLogsAPI,
  testLogsAPI,
  integrateLoggingSystem
};