/**
 * –¢–µ—Å—Ç –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤
 */
import { SchemaExecutionEngine } from './core/engine/SchemaExecutionEngine';
import { BotSchema } from './core/types';

// –ú–æ–∫ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockMessengerAdapter {
  public sentMessages: any[] = [];
  public sentMedia: any[] = [];

  async sendMessage(chatId: string, message: string, options?: any): Promise<void> {
    this.sentMessages.push({ chatId, message, options });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${chatId}: ${message}`);
  }

  async sendMedia(chatId: string, type: string, media: string, options?: any): Promise<void> {
    this.sentMedia.push({ chatId, type, media, options });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ –≤ ${chatId}: ${type} - ${media}`);
  }

  clearHistory(): void {
    this.sentMessages = [];
    this.sentMedia = [];
  }
}

async function testNodeTypes() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤...\n');

  try {
    const engine = new SchemaExecutionEngine();
    const mockAdapter = new MockMessengerAdapter();

    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:');
    await testTriggerNodes(engine, mockAdapter);

    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:');
    await testActionNodes(engine, mockAdapter);

    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π:');
    await testConditionNodes(engine, mockAdapter);

    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö:');
    await testDataNodes(engine, mockAdapter);

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤:', error);
    throw error;
  }
}

async function testTriggerNodes(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  // –¢–µ—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
  const commandSchema: BotSchema = {
    id: 'command-test',
    name: '–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã',
    nodes: [
      {
        id: 'cmd-trigger',
        type: 'trigger-command',
        data: { command: '/test', description: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'response',
        type: 'action-send-message',
        data: { message: '–ö–æ–º–∞–Ω–¥–∞ {{triggeredCommand}} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!' },
        position: { x: 300, y: 100 }
      }
    ],
    edges: [{ id: 'edge-1', source: 'cmd-trigger', target: 'response' }],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  const context = engine.createExecutionContext('user1', 'chat1', 'telegram');
  const result = await engine.executeSchema(commandSchema, 'command', { command: '/test' }, context, mockAdapter as any);
  console.log(`   ‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${result.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);

  // –¢–µ—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
  const messageSchema: BotSchema = {
    id: 'message-test',
    name: '–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
    nodes: [
      {
        id: 'msg-trigger',
        type: 'trigger-message',
        data: { patterns: ['–ø—Ä–∏–≤–µ—Ç', 'hello'], caseSensitive: false },
        position: { x: 100, y: 100 }
      },
      {
        id: 'greeting',
        type: 'action-send-message',
        data: { message: '–ü—Ä–∏–≤–µ—Ç! –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {{triggeredByMessage}}' },
        position: { x: 300, y: 100 }
      }
    ],
    edges: [{ id: 'edge-1', source: 'msg-trigger', target: 'greeting' }],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const msgContext = engine.createExecutionContext('user2', 'chat2', 'telegram', { messageText: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!' });
  const msgResult = await engine.executeSchema(messageSchema, 'message', { text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!' }, msgContext, mockAdapter as any);
  console.log(`   ‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: ${msgResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);

  // –¢–µ—Å—Ç —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
  const conditionalSchema: BotSchema = {
    id: 'conditional-test',
    name: '–¢–µ—Å—Ç —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞',
    nodes: [
      {
        id: 'cond-trigger',
        type: 'trigger-condition',
        data: { condition: 'currentHour >= 9 && currentHour <= 17' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'work-hours',
        type: 'action-send-message',
        data: { message: '–°–µ–π—á–∞—Å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!' },
        position: { x: 300, y: 100 }
      }
    ],
    edges: [{ id: 'edge-1', source: 'cond-trigger', target: 'work-hours' }],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const condContext = engine.createExecutionContext('user3', 'chat3', 'telegram');
  const condResult = await engine.executeSchema(conditionalSchema, 'condition', {}, condContext, mockAdapter as any);
  console.log(`   ‚úÖ –£—Å–ª–æ–≤–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: ${condResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
}

async function testActionNodes(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  const keyboardSchema: BotSchema = {
    id: 'keyboard-test',
    name: '–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/menu' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'keyboard',
        type: 'action-send-keyboard',
        data: {
          message: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
          keyboardType: 'inline',
          buttons: [
            [{ text: '–û–ø—Ü–∏—è 1', callbackData: 'opt1' }, { text: '–û–ø—Ü–∏—è 2', callbackData: 'opt2' }],
            [{ text: '–ü–æ–º–æ—â—å', url: 'https://example.com/help' }]
          ]
        },
        position: { x: 300, y: 100 }
      }
    ],
    edges: [{ id: 'edge-1', source: 'start', target: 'keyboard' }],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const kbContext = engine.createExecutionContext('user4', 'chat4', 'telegram');
  const kbResult = await engine.executeSchema(keyboardSchema, 'command', { command: '/menu' }, kbContext, mockAdapter as any);
  console.log(`   ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: ${kbResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);

  // –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å —Ç–∏–ø–æ–º
  const varSchema: BotSchema = {
    id: 'variable-test',
    name: '–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/calc' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'set-number',
        type: 'action-set-variable',
        data: { variable: 'myNumber', value: '42.5', valueType: 'number' },
        position: { x: 300, y: 100 }
      },
      {
        id: 'set-boolean',
        type: 'action-set-variable',
        data: { variable: 'isActive', value: 'true', valueType: 'boolean' },
        position: { x: 500, y: 100 }
      },
      {
        id: 'show-vars',
        type: 'action-send-message',
        data: { message: '–ß–∏—Å–ª–æ: {{myNumber}}, –ê–∫—Ç–∏–≤–Ω–æ: {{isActive}}' },
        position: { x: 700, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'set-number' },
      { id: 'edge-2', source: 'set-number', target: 'set-boolean' },
      { id: 'edge-3', source: 'set-boolean', target: 'show-vars' }
    ],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const varContext = engine.createExecutionContext('user5', 'chat5', 'telegram');
  const varResult = await engine.executeSchema(varSchema, 'command', { command: '/calc' }, varContext, mockAdapter as any);
  console.log(`   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${varResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);

  // –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const logSchema: BotSchema = {
    id: 'log-test',
    name: '–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/log' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'log-info',
        type: 'action-log',
        data: { 
          logLevel: 'info', 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {{userId}} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É –≤ {{current_time}}',
          includeContext: false
        },
        position: { x: 300, y: 100 }
      },
      {
        id: 'response',
        type: 'action-send-message',
        data: { message: '–°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥' },
        position: { x: 500, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'log-info' },
      { id: 'edge-2', source: 'log-info', target: 'response' }
    ],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const logContext = engine.createExecutionContext('user6', 'chat6', 'telegram');
  const logResult = await engine.executeSchema(logSchema, 'command', { command: '/log' }, logContext, mockAdapter as any);
  console.log(`   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${logResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
}

async function testConditionNodes(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  // –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const compareSchema: BotSchema = {
    id: 'compare-test',
    name: '–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/compare' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'set-age',
        type: 'action-set-variable',
        data: { variable: 'age', value: '25', valueType: 'number' },
        position: { x: 300, y: 100 }
      },
      {
        id: 'check-adult',
        type: 'condition-variable-compare',
        data: { variable1: '{{age}}', operator: '>=', variable2: '18' },
        position: { x: 500, y: 100 }
      },
      {
        id: 'adult-msg',
        type: 'action-send-message',
        data: { message: '–í—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π (–≤–æ–∑—Ä–∞—Å—Ç: {{age}})' },
        position: { x: 700, y: 50 }
      },
      {
        id: 'minor-msg',
        type: 'action-send-message',
        data: { message: '–í—ã –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π (–≤–æ–∑—Ä–∞—Å—Ç: {{age}})' },
        position: { x: 700, y: 150 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'set-age' },
      { id: 'edge-2', source: 'set-age', target: 'check-adult' },
      { id: 'edge-3', source: 'check-adult', target: 'adult-msg', sourceHandle: 'true' },
      { id: 'edge-4', source: 'check-adult', target: 'minor-msg', sourceHandle: 'false' }
    ],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const compareContext = engine.createExecutionContext('user7', 'chat7', 'telegram');
  const compareResult = await engine.executeSchema(compareSchema, 'command', { command: '/compare' }, compareContext, mockAdapter as any);
  console.log(`   ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${compareResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);

  // –¢–µ—Å—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
  const randomSchema: BotSchema = {
    id: 'random-test',
    name: '–¢–µ—Å—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/random' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'random-check',
        type: 'condition-random',
        data: { probability: '0.7' }, // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        position: { x: 300, y: 100 }
      },
      {
        id: 'lucky-msg',
        type: 'action-send-message',
        data: { message: 'üçÄ –í–∞–º –ø–æ–≤–µ–∑–ª–æ!' },
        position: { x: 500, y: 50 }
      },
      {
        id: 'unlucky-msg',
        type: 'action-send-message',
        data: { message: 'üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ...' },
        position: { x: 500, y: 150 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'random-check' },
      { id: 'edge-2', source: 'random-check', target: 'lucky-msg', sourceHandle: 'true' },
      { id: 'edge-3', source: 'random-check', target: 'unlucky-msg', sourceHandle: 'false' }
    ],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const randomContext = engine.createExecutionContext('user8', 'chat8', 'telegram');
  const randomResult = await engine.executeSchema(randomSchema, 'command', { command: '/random' }, randomContext, mockAdapter as any);
  console.log(`   ‚úÖ –°–ª—É—á–∞–π–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: ${randomResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);

  // –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è (switch)
  const switchSchema: BotSchema = {
    id: 'switch-test',
    name: '–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/color' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'set-color',
        type: 'action-set-variable',
        data: { variable: 'color', value: 'red' },
        position: { x: 300, y: 100 }
      },
      {
        id: 'color-switch',
        type: 'condition-switch',
        data: {
          variable: '{{color}}',
          cases: [
            { value: 'red', output: 'red-case' },
            { value: 'blue', output: 'blue-case' },
            { value: 'green', output: 'green-case' }
          ],
          defaultCase: 'default-case'
        },
        position: { x: 500, y: 100 }
      },
      {
        id: 'red-msg',
        type: 'action-send-message',
        data: { message: 'üî¥ –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç!' },
        position: { x: 700, y: 50 }
      },
      {
        id: 'blue-msg',
        type: 'action-send-message',
        data: { message: 'üîµ –°–∏–Ω–∏–π —Ü–≤–µ—Ç!' },
        position: { x: 700, y: 100 }
      },
      {
        id: 'default-msg',
        type: 'action-send-message',
        data: { message: '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç: {{color}}' },
        position: { x: 700, y: 150 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'set-color' },
      { id: 'edge-2', source: 'set-color', target: 'color-switch' },
      { id: 'edge-3', source: 'color-switch', target: 'red-msg', sourceHandle: 'red-case' },
      { id: 'edge-4', source: 'color-switch', target: 'blue-msg', sourceHandle: 'blue-case' },
      { id: 'edge-5', source: 'color-switch', target: 'default-msg', sourceHandle: 'default-case' }
    ],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const switchContext = engine.createExecutionContext('user9', 'chat9', 'telegram');
  const switchResult = await engine.executeSchema(switchSchema, 'command', { command: '/color' }, switchContext, mockAdapter as any);
  console.log(`   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: ${switchResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
}

async function testDataNodes(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  // –¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const mathSchema: BotSchema = {
    id: 'math-test',
    name: '–¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/math' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'math-add',
        type: 'data-math',
        data: { operation: 'add', operand1: '15', operand2: '27', resultVariable: 'sum' },
        position: { x: 300, y: 100 }
      },
      {
        id: 'math-multiply',
        type: 'data-math',
        data: { operation: 'multiply', operand1: '{{sum}}', operand2: '2', resultVariable: 'result' },
        position: { x: 500, y: 100 }
      },
      {
        id: 'show-result',
        type: 'action-send-message',
        data: { message: 'üßÆ (15 + 27) √ó 2 = {{result}}' },
        position: { x: 700, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'math-add' },
      { id: 'edge-2', source: 'math-add', target: 'math-multiply' },
      { id: 'edge-3', source: 'math-multiply', target: 'show-result' }
    ],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const mathContext = engine.createExecutionContext('user10', 'chat10', 'telegram');
  const mathResult = await engine.executeSchema(mathSchema, 'command', { command: '/math' }, mathContext, mockAdapter as any);
  console.log(`   ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${mathResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);

  // –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
  const stringSchema: BotSchema = {
    id: 'string-test',
    name: '–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/string' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'set-name',
        type: 'action-set-variable',
        data: { variable: 'firstName', value: 'john' },
        position: { x: 300, y: 100 }
      },
      {
        id: 'capitalize',
        type: 'data-string',
        data: { operation: 'toUpperCase', string1: '{{firstName}}', resultVariable: 'upperName' },
        position: { x: 500, y: 100 }
      },
      {
        id: 'concat',
        type: 'data-string',
        data: { operation: 'concat', string1: '–ü—Ä–∏–≤–µ—Ç, ', string2: '{{upperName}}!', resultVariable: 'greeting' },
        position: { x: 700, y: 100 }
      },
      {
        id: 'show-greeting',
        type: 'action-send-message',
        data: { message: '{{greeting}}' },
        position: { x: 900, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'set-name' },
      { id: 'edge-2', source: 'set-name', target: 'capitalize' },
      { id: 'edge-3', source: 'capitalize', target: 'concat' },
      { id: 'edge-4', source: 'concat', target: 'show-greeting' }
    ],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const stringContext = engine.createExecutionContext('user11', 'chat11', 'telegram');
  const stringResult = await engine.executeSchema(stringSchema, 'command', { command: '/string' }, stringContext, mockAdapter as any);
  console.log(`   ‚úÖ –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${stringResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);

  // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const randomDataSchema: BotSchema = {
    id: 'random-data-test',
    name: '–¢–µ—Å—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/random-data' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'random-number',
        type: 'data-random',
        data: { dataType: 'number', min: '1', max: '100', integer: true, resultVariable: 'randomNum' },
        position: { x: 300, y: 100 }
      },
      {
        id: 'random-string',
        type: 'data-random',
        data: { dataType: 'string', length: '8', resultVariable: 'randomStr' },
        position: { x: 500, y: 100 }
      },
      {
        id: 'random-choice',
        type: 'data-random',
        data: { dataType: 'choice', choices: ['üçé', 'üçå', 'üçä', 'üçá'], resultVariable: 'randomFruit' },
        position: { x: 700, y: 100 }
      },
      {
        id: 'show-random',
        type: 'action-send-message',
        data: { message: 'üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–ß–∏—Å–ª–æ: {{randomNum}}\n–°—Ç—Ä–æ–∫–∞: {{randomStr}}\n–§—Ä—É–∫—Ç: {{randomFruit}}' },
        position: { x: 900, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'random-number' },
      { id: 'edge-2', source: 'random-number', target: 'random-string' },
      { id: 'edge-3', source: 'random-string', target: 'random-choice' },
      { id: 'edge-4', source: 'random-choice', target: 'show-random' }
    ],
    variables: {},
    settings: { name: '–¢–µ—Å—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', description: '', platforms: ['telegram'], mode: 'polling', variables: {} },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const randomDataContext = engine.createExecutionContext('user12', 'chat12', 'telegram');
  const randomDataResult = await engine.executeSchema(randomDataSchema, 'command', { command: '/random-data' }, randomDataContext, mockAdapter as any);
  console.log(`   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${randomDataResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testNodeTypes()
    .then(() => {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testNodeTypes };