/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
 */

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const yauzl = require('yauzl');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
function extractArchive(archivePath, extractDir) {
  return new Promise((resolve, reject) => {
    console.log(`üì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤ –≤: ${extractDir}`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    if (!fs.existsSync(extractDir)) {
      fs.mkdirSync(extractDir, { recursive: true });
    }
    
    yauzl.open(archivePath, { lazyEntries: true }, (err, zipfile) => {
      if (err) {
        reject(err);
        return;
      }
      
      let filesExtracted = 0;
      
      zipfile.readEntry();
      
      zipfile.on('entry', (entry) => {
        if (/\/$/.test(entry.fileName)) {
          // –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
          const dirPath = path.join(extractDir, entry.fileName);
          if (!fs.existsSync(dirPath)) {
            fs.mkdirSync(dirPath, { recursive: true });
          }
          zipfile.readEntry();
        } else {
          // –≠—Ç–æ —Ñ–∞–π–ª
          zipfile.openReadStream(entry, (err, readStream) => {
            if (err) {
              reject(err);
              return;
            }
            
            const filePath = path.join(extractDir, entry.fileName);
            const writeStream = fs.createWriteStream(filePath);
            
            readStream.pipe(writeStream);
            
            writeStream.on('close', () => {
              filesExtracted++;
              console.log(`  ‚úÖ ${entry.fileName}`);
              zipfile.readEntry();
            });
          });
        }
      });
      
      zipfile.on('end', () => {
        resolve(filesExtracted);
      });
      
      zipfile.on('error', (err) => {
        reject(err);
      });
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function installDependencies(projectDir) {
  return new Promise((resolve, reject) => {
    console.log('üìö –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    
    const npmInstall = spawn('cmd', ['/c', 'npm', 'install'], {
      cwd: projectDir,
      stdio: 'pipe',
      shell: true
    });
    
    let output = '';
    let errorOutput = '';
    
    npmInstall.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    npmInstall.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });
    
    npmInstall.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        resolve(output);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', errorOutput);
        reject(new Error(`npm install –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
      }
    });
    
    npmInstall.on('error', (err) => {
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript
function checkSyntax(filePath) {
  return new Promise((resolve, reject) => {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: ${path.basename(filePath)}`);
    
    const nodeCheck = spawn('cmd', ['/c', 'node', '--check', filePath], {
      stdio: 'pipe',
      shell: true
    });
    
    let errorOutput = '';
    
    nodeCheck.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });
    
    nodeCheck.on('close', (code) => {
      if (code === 0) {
        console.log('  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        resolve(true);
      } else {
        console.error('  ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:', errorOutput);
        resolve(false);
      }
    });
    
    nodeCheck.on('error', (err) => {
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
function createTestEnvFile(projectDir) {
  const envPath = path.join(projectDir, '.env');
  const envContent = `# –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–Ω–µ —Ä–∞–±–æ—á–∏–π)
TELEGRAM_BOT_TOKEN=123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789
NODE_ENV=development
LOG_LEVEL=info
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
function testModuleLoading(projectDir) {
  return new Promise((resolve, reject) => {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª–µ–π...');
    
    const testScript = `
const fs = require('fs');
const path = require('path');

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏...');
  
  const TelegramBot = require('node-telegram-bot-api');
  console.log('‚úÖ node-telegram-bot-api –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  const config = require('./config.json');
  console.log('‚úÖ config.json –∑–∞–≥—Ä—É–∂–µ–Ω:', config.name);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ index.js (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)
  const indexContent = fs.readFileSync('./index.js', 'utf8');
  
  if (indexContent.includes('updateUserState')) {
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è updateUserState –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  if (indexContent.includes('replaceVariables')) {
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è replaceVariables –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  if (indexContent.includes('bot.onText')) {
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('üéâ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  process.exit(0);
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:', error.message);
  process.exit(1);
}
`;
    
    const testFilePath = path.join(projectDir, 'test-modules.js');
    fs.writeFileSync(testFilePath, testScript);
    
    const nodeTest = spawn('cmd', ['/c', 'node', 'test-modules.js'], {
      cwd: projectDir,
      stdio: 'pipe',
      shell: true
    });
    
    let output = '';
    let errorOutput = '';
    
    nodeTest.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    nodeTest.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });
    
    nodeTest.on('close', (code) => {
      console.log(output);
      
      if (code === 0) {
        console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
        resolve(true);
      } else {
        console.error('‚ùå –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π –Ω–µ –ø—Ä–æ—à–µ–ª:', errorOutput);
        resolve(false);
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      try {
        fs.unlinkSync(testFilePath);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    });
    
    nodeTest.on('error', (err) => {
      reject(err);
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testExportedBotFunctionality() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞\n');
  console.log('=' .repeat(60));
  
  try {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    const tempDir = path.join(__dirname, '..', 'temp');
    
    if (!fs.existsSync(tempDir)) {
      console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    const archives = fs.readdirSync(tempDir)
      .filter(file => file.startsWith('exported-') && file.endsWith('.zip'))
      .map(file => ({
        name: file,
        path: path.join(tempDir, file),
        mtime: fs.statSync(path.join(tempDir, file)).mtime
      }))
      .sort((a, b) => b.mtime - a.mtime);
    
    if (archives.length === 0) {
      console.error('‚ùå –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node src/test-nodejs-export-api.js');
      return;
    }
    
    const latestArchive = archives[0];
    console.log(`üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤: ${latestArchive.name}`);
    console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${latestArchive.mtime.toLocaleString('ru-RU')}\n`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testDir = path.join(tempDir, `test-bot-${Date.now()}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
    const filesExtracted = await extractArchive(latestArchive.path, testDir);
    console.log(`\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filesExtracted}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const indexPath = path.join(testDir, 'index.js');
    const syntaxOk = await checkSyntax(indexPath);
    
    if (!syntaxOk) {
      console.error('‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª
    createTestEnvFile(testDir);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    await installDependencies(testDir);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª–µ–π
    const moduleTestPassed = await testModuleLoading(testDir);
    
    if (moduleTestPassed) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
      console.log('  ‚úÖ –ê—Ä—Ö–∏–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω');
      console.log('  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
      console.log('  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      console.log('  ‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');
      console.log('  ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      
      console.log('\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:');
      console.log(`1. cd ${testDir}`);
      console.log('2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
      console.log('3. npm start');
      
    } else {
      console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏');
    }
    
    console.log(`\nüìÇ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${testDir}`);
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testExportedBotFunctionality();
}

module.exports = {
  extractArchive,
  installDependencies,
  checkSyntax,
  testModuleLoading,
  testExportedBotFunctionality
};