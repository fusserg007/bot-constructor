/**
 * –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ Schema Engine
 */

import { SchemaEngine, SchemaExecutionContext } from './core/engine/SchemaEngine';
import { MessengerPlatform } from './core/types';

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤...\n');

// –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface TestNode {
  id: string;
  type: string;
  data: any;
  position: { x: number; y: number };
}

interface TestEdge {
  id: string;
  source: string;
  target: string;
  sourceHandle?: string;
  targetHandle?: string;
}

async function createTestContext(): Promise<SchemaExecutionContext> {
  const mockAdapter = {
    sendMessage: async (chatId: string, message: any) => {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${chatId}:`, message.text);
      return { messageId: 'test-message-id' };
    },
    sendMedia: async (chatId: string, media: any) => {
      console.log(`üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤ ${chatId}:`, media.type, media.url);
      return { messageId: 'test-media-id' };
    }
  } as any;

  return {
    userId: 'test-user-123',
    chatId: 'test-chat-456',
    platform: 'telegram' as MessengerPlatform,
    message: {
      text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      messageId: 'msg-123',
      timestamp: Date.now(),
      user: {
        id: 'test-user-123',
        username: 'testuser',
        firstName: 'Test',
        lastName: 'User'
      }
    },
    variables: {
      userName: 'Test User',
      userRole: 'admin'
    },
    sessionData: {
      counter_default: 5,
      array_items: ['item1', 'item2']
    },
    adapter: mockAdapter
  };
}

async function testNewTriggers() {
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...');

  const engine = new SchemaEngine();
  const context = await createTestContext();

  try {
    // –¢–µ—Å—Ç trigger-schedule
    const scheduleNodes: TestNode[] = [
      {
        id: 'trigger-schedule',
        type: 'trigger-schedule',
        data: {
          scheduleTime: new Date(Date.now() - 1000).toISOString() // 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞–∑–∞–¥
        },
        position: { x: 0, y: 0 }
      },
      {
        id: 'action-scheduled',
        type: 'action-send-message',
        data: {
          message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'
        },
        position: { x: 200, y: 0 }
      }
    ];

    const scheduleEdges: TestEdge[] = [
      { id: 'edge-1', source: 'trigger-schedule', target: 'action-scheduled' }
    ];

    const result = await engine.executeSchema(scheduleNodes, scheduleEdges, context);
    console.log('‚úÖ –¢–µ—Å—Ç trigger-schedule:', result.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');

    return result.success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:', error);
    return false;
  }
}

async function testNewActions() {
  console.log('üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π...');

  const engine = new SchemaEngine();
  const context = await createTestContext();

  try {
    // –¢–µ—Å—Ç action-delay –∏ action-send-audio
    const actionNodes: TestNode[] = [
      {
        id: 'trigger-start',
        type: 'trigger-command',
        data: { command: '/test' },
        position: { x: 0, y: 0 }
      },
      {
        id: 'action-delay',
        type: 'action-delay',
        data: { delay: '100' }, // 100ms
        position: { x: 200, y: 0 }
      },
      {
        id: 'action-audio',
        type: 'action-send-audio',
        data: {
          audioUrl: 'https://example.com/audio.mp3',
          caption: '–¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ'
        },
        position: { x: 400, y: 0 }
      }
    ];

    const actionEdges: TestEdge[] = [
      { id: 'edge-1', source: 'trigger-start', target: 'action-delay' },
      { id: 'edge-2', source: 'action-delay', target: 'action-audio' }
    ];

    const testContext = {
      ...context,
      message: { ...context.message!, text: '/test' }
    };

    const result = await engine.executeSchema(actionNodes, actionEdges, testContext);
    console.log('‚úÖ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:', result.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');

    return result.success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥–µ–π—Å—Ç–≤–∏–π:', error);
    return false;
  }
}

async function testNewConditions() {
  console.log('üîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π...');

  const engine = new SchemaEngine();
  const context = await createTestContext();

  try {
    // –¢–µ—Å—Ç condition-counter –∏ condition-random
    const conditionNodes: TestNode[] = [
      {
        id: 'trigger-msg',
        type: 'trigger-message',
        data: {},
        position: { x: 0, y: 0 }
      },
      {
        id: 'condition-counter',
        type: 'condition-counter',
        data: {
          counterName: 'default',
          operator: 'greater',
          value: '3'
        },
        position: { x: 200, y: 0 }
      },
      {
        id: 'action-counter-high',
        type: 'action-send-message',
        data: { message: '–°—á–µ—Ç—á–∏–∫ –±–æ–ª—å—à–µ 3!' },
        position: { x: 400, y: -50 }
      },
      {
        id: 'action-counter-low',
        type: 'action-send-message',
        data: { message: '–°—á–µ—Ç—á–∏–∫ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 3' },
        position: { x: 400, y: 50 }
      }
    ];

    const conditionEdges: TestEdge[] = [
      { id: 'edge-1', source: 'trigger-msg', target: 'condition-counter' },
      { id: 'edge-true', source: 'condition-counter', target: 'action-counter-high', sourceHandle: 'true' },
      { id: 'edge-false', source: 'condition-counter', target: 'action-counter-low', sourceHandle: 'false' }
    ];

    const result = await engine.executeSchema(conditionNodes, conditionEdges, context);
    console.log('‚úÖ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π:', result.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');

    return result.success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É—Å–ª–æ–≤–∏–π:', error);
    return false;
  }
}

async function testNewDataNodes() {
  console.log('üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...');

  const engine = new SchemaEngine();
  const context = await createTestContext();

  try {
    // –¢–µ—Å—Ç data-counter-increment –∏ data-array-add
    const dataNodes: TestNode[] = [
      {
        id: 'trigger-start',
        type: 'trigger-command',
        data: { command: '/count' },
        position: { x: 0, y: 0 }
      },
      {
        id: 'data-increment',
        type: 'data-counter-increment',
        data: {
          counterName: 'test_counter',
          amount: '2'
        },
        position: { x: 200, y: 0 }
      },
      {
        id: 'data-array',
        type: 'data-array-add',
        data: {
          arrayName: 'test_array',
          item: '–Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç'
        },
        position: { x: 400, y: 0 }
      },
      {
        id: 'data-timestamp',
        type: 'data-timestamp',
        data: { format: 'readable' },
        position: { x: 600, y: 0 }
      },
      {
        id: 'action-result',
        type: 'action-send-message',
        data: { message: '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!' },
        position: { x: 800, y: 0 }
      }
    ];

    const dataEdges: TestEdge[] = [
      { id: 'edge-1', source: 'trigger-start', target: 'data-increment' },
      { id: 'edge-2', source: 'data-increment', target: 'data-array' },
      { id: 'edge-3', source: 'data-array', target: 'data-timestamp' },
      { id: 'edge-4', source: 'data-timestamp', target: 'action-result' }
    ];

    const testContext = {
      ...context,
      message: { ...context.message!, text: '/count' }
    };

    const result = await engine.executeSchema(dataNodes, dataEdges, testContext);
    console.log('‚úÖ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö:', result.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', result.finalSessionData);

    return result.success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É–∑–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

async function testNewIntegrations() {
  console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...');

  const engine = new SchemaEngine();
  const context = await createTestContext();

  try {
    // –¢–µ—Å—Ç integration-json-parse
    const integrationNodes: TestNode[] = [
      {
        id: 'trigger-start',
        type: 'trigger-command',
        data: { command: '/parse' },
        position: { x: 0, y: 0 }
      },
      {
        id: 'integration-json',
        type: 'integration-json-parse',
        data: {
          jsonString: '{"name": "Test", "age": 25, "active": true}'
        },
        position: { x: 200, y: 0 }
      },
      {
        id: 'integration-csv',
        type: 'integration-csv-parse',
        data: {
          csvString: 'name,age,city\\n–ò–≤–∞–Ω,30,–ú–æ—Å–∫–≤–∞\\n–ú–∞—Ä–∏—è,25,–°–ü–±',
          delimiter: ','
        },
        position: { x: 400, y: 0 }
      },
      {
        id: 'action-result',
        type: 'action-send-message',
        data: { message: '–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!' },
        position: { x: 600, y: 0 }
      }
    ];

    const integrationEdges: TestEdge[] = [
      { id: 'edge-1', source: 'trigger-start', target: 'integration-json' },
      { id: 'edge-2', source: 'integration-json', target: 'integration-csv' },
      { id: 'edge-3', source: 'integration-csv', target: 'action-result' }
    ];

    const testContext = {
      ...context,
      message: { ...context.message!, text: '/parse' }
    };

    const result = await engine.executeSchema(integrationNodes, integrationEdges, testContext);
    console.log('‚úÖ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', result.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');

    return result.success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', error);
    return false;
  }
}

async function testNewScenarios() {
  console.log('üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');

  const engine = new SchemaEngine();
  const context = await createTestContext();

  try {
    // –¢–µ—Å—Ç scenario-faq
    const scenarioNodes: TestNode[] = [
      {
        id: 'trigger-start',
        type: 'trigger-message',
        data: {},
        position: { x: 0, y: 0 }
      },
      {
        id: 'scenario-faq',
        type: 'scenario-faq',
        data: {
          faqAnswers: {
            '–∫–∞–∫ –¥–µ–ª–∞': '–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!',
            '—á—Ç–æ —É–º–µ–µ—à—å': '–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.',
            '–ø–æ–º–æ—â—å': '–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!'
          }
        },
        position: { x: 200, y: 0 }
      }
    ];

    const scenarioEdges: TestEdge[] = [
      { id: 'edge-1', source: 'trigger-start', target: 'scenario-faq' }
    ];

    const testContext = {
      ...context,
      message: { ...context.message!, text: '–∫–∞–∫ –¥–µ–ª–∞?' }
    };

    const result = await engine.executeSchema(scenarioNodes, scenarioEdges, testContext);
    console.log('‚úÖ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:', result.success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');

    return result.success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllExtendedTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤...\n');

  const results = {
    triggers: await testNewTriggers(),
    actions: await testNewActions(),
    conditions: await testNewConditions(),
    data: await testNewDataNodes(),
    integrations: await testNewIntegrations(),
    scenarios: await testNewScenarios()
  };

  console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤:');
  console.log('‚úÖ –ù–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:', results.triggers ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', results.actions ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:', results.conditions ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –ù–æ–≤—ã–µ —É–∑–ª—ã –¥–∞–Ω–Ω—ã—Ö:', results.data ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –ù–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', results.integrations ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –ù–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:', results.scenarios ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');

  const allPassed = Object.values(results).every(result => result);
  
  if (allPassed) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    console.log('\nüìã –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Schema Engine:');
    
    console.log('\nüéØ –ù–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:');
    console.log('  ‚Ä¢ trigger-inline-query - –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('  ‚Ä¢ trigger-join-group - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ');
    console.log('  ‚Ä¢ trigger-leave-group - –ø–æ–∫–∏–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã');
    console.log('  ‚Ä¢ trigger-schedule - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è');
    
    console.log('\nüé¨ –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
    console.log('  ‚Ä¢ action-send-audio - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ');
    console.log('  ‚Ä¢ action-send-document - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    console.log('  ‚Ä¢ action-send-keyboard - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä');
    console.log('  ‚Ä¢ action-delay - –∑–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    console.log('  ‚Ä¢ action-forward-message - –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('  ‚Ä¢ action-ban-user / action-mute-user - –º–æ–¥–µ—Ä–∞—Ü–∏—è');
    
    console.log('\nüîÄ –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:');
    console.log('  ‚Ä¢ condition-time-range - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏');
    console.log('  ‚Ä¢ condition-user-in-list - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ');
    console.log('  ‚Ä¢ condition-message-length - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è');
    console.log('  ‚Ä¢ condition-regex-match - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏');
    console.log('  ‚Ä¢ condition-counter - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤');
    console.log('  ‚Ä¢ condition-random - —Å–ª—É—á–∞–π–Ω—ã–µ —É—Å–ª–æ–≤–∏—è');
    
    console.log('\nüíæ –ù–æ–≤—ã–µ —É–∑–ª—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log('  ‚Ä¢ data-counter-* - —Ä–∞–±–æ—Ç–∞ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏');
    console.log('  ‚Ä¢ data-array-* - —Ä–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏');
    console.log('  ‚Ä¢ data-random-choice - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä');
    console.log('  ‚Ä¢ data-timestamp - —Ä–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏');
    
    console.log('\nüîó –ù–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:');
    console.log('  ‚Ä¢ integration-webhook - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è webhook\'–æ–≤');
    console.log('  ‚Ä¢ integration-database - —Ä–∞–±–æ—Ç–∞ —Å –ë–î');
    console.log('  ‚Ä¢ integration-email - –æ—Ç–ø—Ä–∞–≤–∫–∞ email');
    console.log('  ‚Ä¢ integration-json-parse - –ø–∞—Ä—Å–∏–Ω–≥ JSON');
    console.log('  ‚Ä¢ integration-csv-parse - –ø–∞—Ä—Å–∏–Ω–≥ CSV');
    
    console.log('\nüé≠ –ù–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:');
    console.log('  ‚Ä¢ scenario-faq - —Å–∏—Å—Ç–µ–º–∞ FAQ');
    console.log('  ‚Ä¢ scenario-survey - –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤');
    console.log('  ‚Ä¢ scenario-quiz - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∏–∑–æ–≤');
    console.log('  ‚Ä¢ scenario-booking - —Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('  ‚Ä¢ scenario-moderation - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è');
    
  } else {
    console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
  }

  return allPassed;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllExtendedTests().then(success => {
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
  process.exit(1);
});