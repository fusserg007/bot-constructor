/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /start
 */

const fs = require('fs');
const path = require('path');

console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...\n');

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /start
const simpleBotSchema = {
  id: 'simple-test-bot',
  name: '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç',
  description: '–ë–∞–∑–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start',
  status: 'draft',
  platforms: [
    {
      platform: 'telegram',
      enabled: true,
      credentials: {
        token: process.env.TELEGRAM_BOT_TOKEN || 'TEST_TOKEN'
      },
      mode: 'polling',
      status: 'disconnected'
    }
  ],
  configuration: {
    nodes: [
      {
        id: 'start-trigger',
        type: 'trigger-command',
        position: { x: 100, y: 100 },
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /start',
          command: '/start',
          description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          icon: '‚ö°',
          color: '#3b82f6'
        }
      },
      {
        id: 'welcome-message',
        type: 'action-send-message',
        position: { x: 400, y: 100 },
        data: {
          label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          text: 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç.\n\n‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞',
          parseMode: 'HTML',
          icon: 'üí¨',
          color: '#10b981'
        }
      },
      {
        id: 'help-trigger',
        type: 'trigger-command',
        position: { x: 100, y: 250 },
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /help',
          command: '/help',
          description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É',
          icon: '‚ùì',
          color: '#3b82f6'
        }
      },
      {
        id: 'help-message',
        type: 'action-send-message',
        position: { x: 400, y: 250 },
        data: {
          label: '–°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          text: 'üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥\n‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úÖ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n<i>–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–æ–≤</i>',
          parseMode: 'HTML',
          icon: 'üìö',
          color: '#10b981'
        }
      },
      {
        id: 'status-trigger',
        type: 'trigger-command',
        position: { x: 100, y: 400 },
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /status',
          command: '/status',
          description: '–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞',
          icon: 'üìä',
          color: '#3b82f6'
        }
      },
      {
        id: 'status-message',
        type: 'action-send-message',
        position: { x: 400, y: 400 },
        data: {
          label: '–°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          text: 'üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\nüü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {{uptime}}\nüí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {{message_count}}\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {{user_count}}\n\nüîß –í–µ—Ä—Å–∏—è: 1.0.0\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {{last_update}}',
          parseMode: 'HTML',
          icon: 'üìà',
          color: '#10b981'
        }
      }
    ],
    edges: [
      {
        id: 'start-to-welcome',
        source: 'start-trigger',
        target: 'welcome-message',
        sourceHandle: 'output',
        targetHandle: 'input'
      },
      {
        id: 'help-to-help-msg',
        source: 'help-trigger',
        target: 'help-message',
        sourceHandle: 'output',
        targetHandle: 'input'
      },
      {
        id: 'status-to-status-msg',
        source: 'status-trigger',
        target: 'status-message',
        sourceHandle: 'output',
        targetHandle: 'input'
      }
    ],
    variables: {
      uptime: { type: 'string', defaultValue: '0 –º–∏–Ω—É—Ç' },
      message_count: { type: 'number', defaultValue: 0 },
      user_count: { type: 'number', defaultValue: 0 },
      last_update: { type: 'string', defaultValue: new Date().toLocaleString('ru-RU') }
    },
    settings: {
      logging: true,
      debug: true,
      errorHandling: 'graceful'
    }
  },
  stats: {
    messagesProcessed: 0,
    activeUsers: 0,
    uptime: 1.0,
    lastActivity: new Date().toISOString()
  },
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const botsDir = path.join(__dirname, '..', 'data', 'bots');
if (!fs.existsSync(botsDir)) {
  fs.mkdirSync(botsDir, { recursive: true });
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞
const botPath = path.join(botsDir, `bot_${simpleBotSchema.id}.json`);
fs.writeFileSync(botPath, JSON.stringify(simpleBotSchema, null, 2));

console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω:');
console.log(`   ID: ${simpleBotSchema.id}`);
console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${simpleBotSchema.name}`);
console.log(`   –£–∑–ª–æ–≤ –≤ —Å—Ö–µ–º–µ: ${simpleBotSchema.configuration.nodes.length}`);
console.log(`   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${simpleBotSchema.configuration.edges.length}`);
console.log(`   –§–∞–π–ª: ${botPath}`);

// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ö–µ–º—É
console.log('\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–æ—Ç–∞:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤
const nodes = simpleBotSchema.configuration.nodes;
const edges = simpleBotSchema.configuration.edges;

const triggerNodes = nodes.filter(n => n.type.startsWith('trigger-'));
const actionNodes = nodes.filter(n => n.type.startsWith('action-'));

console.log(`   –¢—Ä–∏–≥–≥–µ—Ä–æ–≤: ${triggerNodes.length}`);
console.log(`   –î–µ–π—Å—Ç–≤–∏–π: ${actionNodes.length}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let validConnections = 0;
edges.forEach(edge => {
  const sourceNode = nodes.find(n => n.id === edge.source);
  const targetNode = nodes.find(n => n.id === edge.target);
  
  if (sourceNode && targetNode) {
    validConnections++;
    console.log(`   ‚úÖ ${sourceNode.data.label} ‚Üí ${targetNode.data.label}`);
  } else {
    console.log(`   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${edge.source} ‚Üí ${edge.target}`);
  }
});

console.log(`   –í–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${validConnections}/${edges.length}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
const commands = triggerNodes
  .filter(n => n.type === 'trigger-command')
  .map(n => n.data.command);

console.log(`   –ö–æ–º–∞–Ω–¥—ã: ${commands.join(', ')}`);

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
console.log('\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:');

const testScenario = {
  name: '–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞',
  description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
  tests: [
    {
      name: '–ö–æ–º–∞–Ω–¥–∞ /start',
      input: { type: 'command', command: '/start', userId: 'test-user-1' },
      expectedOutput: {
        type: 'message',
        text: expect => expect.includes('–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç')
      }
    },
    {
      name: '–ö–æ–º–∞–Ω–¥–∞ /help',
      input: { type: 'command', command: '/help', userId: 'test-user-1' },
      expectedOutput: {
        type: 'message',
        text: expect => expect.includes('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É')
      }
    },
    {
      name: '–ö–æ–º–∞–Ω–¥–∞ /status',
      input: { type: 'command', command: '/status', userId: 'test-user-1' },
      expectedOutput: {
        type: 'message',
        text: expect => expect.includes('–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞')
      }
    },
    {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
      input: { type: 'command', command: '/unknown', userId: 'test-user-1' },
      expectedOutput: {
        type: 'no_response'
      }
    }
  ]
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
const testPath = path.join(__dirname, 'simple-bot-test-scenario.json');
fs.writeFileSync(testPath, JSON.stringify(testScenario, null, 2));

console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${testPath}`);

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞
console.log('\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:');

const logDir = path.join(__dirname, '..', 'logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

const botLogger = {
  logFile: path.join(logDir, `bot_${simpleBotSchema.id}.log`),
  
  log: function(level, message, context = {}) {
    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      level,
      botId: simpleBotSchema.id,
      message,
      context
    };
    
    const logLine = JSON.stringify(logEntry) + '\n';
    fs.appendFileSync(this.logFile, logLine);
    
    console.log(`[${timestamp}] ${level.toUpperCase()}: ${message}`);
  },
  
  info: function(message, context) { this.log('info', message, context); },
  warn: function(message, context) { this.log('warn', message, context); },
  error: function(message, context) { this.log('error', message, context); },
  debug: function(message, context) { this.log('debug', message, context); }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥
botLogger.info('–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω', {
  botId: simpleBotSchema.id,
  nodesCount: nodes.length,
  edgesCount: edges.length,
  commands: commands
});

console.log(`‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: ${botLogger.logFile}`);

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–º—É–ª—è—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
console.log('\nüéÆ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:');

function simulateCommand(command, userId = 'test-user') {
  botLogger.info(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${command}`, { userId, command });
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∏–≥–≥–µ—Ä
  const triggerNode = nodes.find(n => 
    n.type === 'trigger-command' && n.data.command === command
  );
  
  if (!triggerNode) {
    botLogger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`, { userId, command });
    return { success: false, error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
  }
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
  const edge = edges.find(e => e.source === triggerNode.id);
  if (!edge) {
    botLogger.error(`–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: ${triggerNode.id}`, { userId, command });
    return { success: false, error: '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è' };
  }
  
  const actionNode = nodes.find(n => n.id === edge.target);
  if (!actionNode) {
    botLogger.error(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ${edge.target}`, { userId, command });
    return { success: false, error: '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' };
  }
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  let responseText = actionNode.data.text;
  
  // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const variables = simpleBotSchema.configuration.variables;
  for (const [key, variable] of Object.entries(variables)) {
    const placeholder = `{{${key}}}`;
    if (responseText.includes(placeholder)) {
      responseText = responseText.replace(new RegExp(placeholder, 'g'), variable.defaultValue);
    }
  }
  
  botLogger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`, {
    userId,
    command,
    triggerId: triggerNode.id,
    actionId: actionNode.id,
    messageLength: responseText.length
  });
  
  return {
    success: true,
    trigger: triggerNode.data.label,
    action: actionNode.data.label,
    response: responseText
  };
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
const testCommands = ['/start', '/help', '/status', '/unknown'];

testCommands.forEach(command => {
  console.log(`\nüî∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${command}`);
  const result = simulateCommand(command);
  
  if (result.success) {
    console.log(`   ‚úÖ ${result.trigger} ‚Üí ${result.action}`);
    console.log(`   üìù –û—Ç–≤–µ—Ç: ${result.response.substring(0, 100)}...`);
  } else {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
simpleBotSchema.stats.messagesProcessed = testCommands.length;
simpleBotSchema.stats.activeUsers = 1;
simpleBotSchema.stats.lastActivity = new Date().toISOString();
simpleBotSchema.updatedAt = new Date().toISOString();

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
fs.writeFileSync(botPath, JSON.stringify(simpleBotSchema, null, 2));

console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
console.log(`   –ö–æ–º–∞–Ω–¥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${testCommands.length}`);
console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${testCommands.filter(cmd => simulateCommand(cmd).success).length}`);
console.log(`   –õ–æ–≥–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ: ${fs.readFileSync(botLogger.logFile, 'utf8').split('\n').length - 1}`);

console.log('\nüéâ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('   1. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π Telegram —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN');
console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram');
console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ logs/');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
module.exports = {
  botSchema: simpleBotSchema,
  testScenario,
  simulateCommand,
  botLogger
};