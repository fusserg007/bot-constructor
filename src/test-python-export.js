/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞ –≤ Python –∫–æ–¥
 */

const fs = require('fs');
const path = require('path');

console.log('üêç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Python...\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
const botPath = path.join(__dirname, '..', 'data', 'bots', 'bot_simple-test-bot.json');

if (!fs.existsSync(botPath)) {
  console.error('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node src/test-simple-bot.js');
  process.exit(1);
}

const botData = JSON.parse(fs.readFileSync(botPath, 'utf8'));
console.log(`ü§ñ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞: ${botData.name}`);

// –≠–∫—Å–ø–æ—Ä—Ç –≤ Python
function exportBotToPython(botSchema, options = {}) {
  const defaultOptions = {
    includeComments: true,
    useAsyncio: true,
    framework: 'pyTelegramBotAPI'
  };
  
  const opts = { ...defaultOptions, ...options };
  
  try {
    const files = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    files.push(generateMainPythonFile(botSchema, opts));
    files.push(generateRequirementsTxt(botSchema));
    files.push(generatePythonReadme(botSchema));
    files.push(generateEnvFile());
    files.push(generateConfigPy(botSchema));
    files.push(generateRunScript());
    
    return {
      success: true,
      files
    };
  } catch (error) {
    return {
      success: false,
      files: [],
      error: error.message
    };
  }
}

function generateMainPythonFile(botSchema, options) {
  const commandNodes = botSchema.configuration?.nodes?.filter(
    node => node.type === 'trigger-command'
  ) || [];
  
  const commandHandlers = commandNodes.map(node => {
    const command = node.data.command.replace('/', '');
    const connectedActions = getConnectedActions(botSchema, node.id);
    
    return `
@bot.message_handler(commands=['${command}'])
def handle_${command}(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /${command}"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    logger.info(f"üì® –ö–æ–º–∞–Ω–¥–∞ /${command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_state(user_id)
        
${connectedActions.map(action => generatePythonActionCode(action)).join('\n')}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /${command}: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")`;
  }).join('\n');
  
  const mainCode = `#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
${botSchema.name}
${botSchema.description}

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
"""

import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional
from collections import defaultdict

import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
if not bot_token:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = telebot.TeleBot(bot_token)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, Dict[str, Any]] = defaultdict(lambda: {
    'message_count': 0,
    'last_activity': datetime.now(),
    'variables': {}
})

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
bot_variables = ${JSON.stringify(botSchema.configuration?.variables || {}, null, 4).replace(/"/g, "'")}

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
start_time = datetime.now()

${options.includeComments ? '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥' : ''}
${commandHandlers}

${options.includeComments ? '# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏' : ''}
def update_user_state(user_id: int) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state = user_states[user_id]
    state['message_count'] += 1
    state['last_activity'] = datetime.now()

def replace_variables(text: str, user_id: int) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ"""
    result = text
    
    # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for key, variable in bot_variables.items():
        placeholder = f"{{{{{key}}}}}"
        result = result.replace(placeholder, str(variable.get('defaultValue', '')))
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    state = user_states[user_id]
    result = result.replace('{{message_count}}', str(state['message_count']))
    result = result.replace('{{user_count}}', str(len(user_states)))
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    uptime = datetime.now() - start_time
    uptime_str = f"{uptime.days} –¥–Ω–µ–π {uptime.seconds // 3600} —á–∞—Å–æ–≤"
    result = result.replace('{{uptime}}', uptime_str)
    
    return result

def get_bot_stats() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    uptime = datetime.now() - start_time
    return {
        'total_users': len(user_states),
        'total_messages': sum(state['message_count'] for state in user_states.values()),
        'uptime_seconds': uptime.total_seconds(),
        'uptime_str': f"{uptime.days} –¥–Ω–µ–π {uptime.seconds // 3600} —á–∞—Å–æ–≤"
    }

${options.includeComments ? '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫' : ''}
@bot.message_handler(func=lambda message: True)
def handle_unknown_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"üí¨ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

${options.includeComments ? '# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' : ''}
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {config['name']}")
    logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {config['description']}")
    
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except KeyboardInterrupt:
        logger.info("\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        bot.stop_polling()

if __name__ == '__main__':
    main()
`;

  return {
    path: 'main.py',
    content: mainCode,
    type: 'py'
  };
}

function getConnectedActions(botSchema, nodeId) {
  const edges = botSchema.configuration?.edges || [];
  const nodes = botSchema.configuration?.nodes || [];
  
  return edges
    .filter(edge => edge.source === nodeId)
    .map(edge => nodes.find(node => node.id === edge.target))
    .filter(Boolean);
}

function generatePythonActionCode(action) {
  switch (action.type) {
    case 'action-send-message':
      return `        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${action.data.label}
        message_text = replace_variables("""${action.data.text}""", user_id)
        bot.send_message(
            chat_id, 
            message_text, 
            parse_mode='${action.data.parseMode || 'HTML'}'
        )
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")`;

    default:
      return `        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}
        logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}")`;
  }
}

function generateRequirementsTxt(botSchema) {
  const requirements = `# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è ${botSchema.name}
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ${new Date().toLocaleString('ru-RU')}

pyTelegramBotAPI==4.14.0
python-dotenv==1.0.0
requests==2.31.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
pytest==7.4.3
black==23.11.0
flake8==6.1.0
`;

  return {
    path: 'requirements.txt',
    content: requirements,
    type: 'txt'
  };
}

function generatePythonReadme(botSchema) {
  const commands = botSchema.configuration?.nodes
    ?.filter(node => node.type === 'trigger-command')
    ?.map(node => `- \`${node.data.command}\` - ${node.data.description || node.data.label}`)
    ?.join('\n') || '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

  const readme = `# ${botSchema.name}

${botSchema.description}

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Python 3.8 –∏–ª–∏ –≤—ã—à–µ:
\`\`\`bash
python --version
\`\`\`

### 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
\`\`\`bash
python -m venv venv

# Windows
venv\\Scripts\\activate

# Linux/Mac
source venv/bin/activate
\`\`\`

### 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
\`\`\`bash
pip install -r requirements.txt
\`\`\`

### 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ \`.env.example\` –≤ \`.env\` –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:
\`\`\`bash
cp .env.example .env
\`\`\`

### 5. –ó–∞–ø—É—Å–∫
\`\`\`bash
python main.py
\`\`\`

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞:
\`\`\`bash
# Windows
run.bat

# Linux/Mac
./run.sh
\`\`\`

## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

${commands}

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞

1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather –≤ Telegram
2. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª \`.env\`
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ \`config.json\`

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
.
‚îú‚îÄ‚îÄ main.py              # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
‚îú‚îÄ‚îÄ config.json          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
‚îú‚îÄ‚îÄ requirements.txt     # Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îú‚îÄ‚îÄ .env.example         # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ .env                 # –í–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–µ –≤ git)
‚îú‚îÄ‚îÄ run.py              # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ (Windows)
‚îú‚îÄ‚îÄ run.sh              # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ (Linux/Mac)
‚îî‚îÄ‚îÄ README.md           # –≠—Ç–æ—Ç —Ñ–∞–π–ª
\`\`\`

## üêõ –û—Ç–ª–∞–¥–∫–∞

–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª \`bot.log\`. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ \`.env\`
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

\`\`\`bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
pip install pytest

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
pytest
\`\`\`

## üìù –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License

## ü§ñ –û –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–æ–≤

–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤.
–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}
`;

  return {
    path: 'README.md',
    content: readme,
    type: 'md'
  };
}

function generateEnvFile() {
  return {
    path: '.env.example',
    content: `# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
TELEGRAM_BOT_TOKEN=your_bot_token_here

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (development/production)
ENVIRONMENT=production

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG/INFO/WARNING/ERROR)
LOG_LEVEL=INFO
`,
    type: 'txt'
  };
}

function generateConfigPy(botSchema) {
  const config = {
    name: botSchema.name,
    description: botSchema.description,
    version: '1.0.0',
    exported: new Date().toISOString(),
    variables: botSchema.configuration?.variables || {},
    settings: {
      polling_interval: 0,
      timeout: 20,
      logging: true
    }
  };

  return {
    path: 'config.json',
    content: JSON.stringify(config, null, 2),
    type: 'json'
  };
}

function generateRunScript() {
  const windowsScript = `@echo off
echo ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...

REM –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not exist "venv" (
    echo –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...
    python -m venv venv
)

REM –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
call venv\\Scripts\\activate

REM –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...
pip install -r requirements.txt

REM –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
echo –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...
python main.py

pause
`;

  return {
    path: 'run.bat',
    content: windowsScript,
    type: 'bat'
  };
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
console.log('üìã –ê–Ω–∞–ª–∏–∑ –±–æ—Ç–∞:');
console.log(`   –£–∑–ª–æ–≤: ${botData.configuration.nodes.length}`);
console.log(`   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${botData.configuration.edges.length}`);
console.log(`   –ö–æ–º–∞–Ω–¥: ${botData.configuration.nodes.filter(n => n.type === 'trigger-command').length}`);
console.log(`   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${Object.keys(botData.configuration.variables || {}).length}`);

const exportResult = exportBotToPython(botData);

if (!exportResult.success) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', exportResult.error);
  process.exit(1);
}

console.log('\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Python —É—Å–ø–µ—à–µ–Ω!');
console.log(`   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${exportResult.files.length}`);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
const exportDir = path.join(__dirname, '..', 'exported-bots', `${botData.id}-python`);
if (!fs.existsSync(exportDir)) {
  fs.mkdirSync(exportDir, { recursive: true });
}

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
exportResult.files.forEach(file => {
  const filePath = path.join(exportDir, file.path);
  fs.writeFileSync(filePath, file.content);
  console.log(`   üìÑ ${file.path} (${file.content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
});

console.log(`\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${exportDir}`);

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Python –∫–æ–¥–∞:');

const mainFile = exportResult.files.find(f => f.path === 'main.py');
if (mainFile) {
  const lines = mainFile.content.split('\n').length;
  const functions = (mainFile.content.match(/def \w+/g) || []).length;
  const handlers = (mainFile.content.match(/@bot\.message_handler/g) || []).length;
  const imports = (mainFile.content.match(/^import |^from /gm) || []).length;
  
  console.log(`   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${lines}`);
  console.log(`   –§—É–Ω–∫—Ü–∏–π: ${functions}`);
  console.log(`   –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${handlers}`);
  console.log(`   –ò–º–ø–æ—Ä—Ç–æ–≤: ${imports}`);
}

const reqFile = exportResult.files.find(f => f.path === 'requirements.txt');
if (reqFile) {
  const packages = reqFile.content.split('\n').filter(line => 
    line.trim() && !line.startsWith('#')
  ).length;
  
  console.log(`   Python –ø–∞–∫–µ—Ç–æ–≤: ${packages}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Python –∫–æ–¥–∞
console.log('\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏:');

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python (–±–∞–∑–æ–≤–∞—è)
const pythonSyntaxCheck = (code) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Python —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
  const issues = [];
  
  if (!code.includes('def ')) issues.push('–ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π');
  if (!code.includes('import ')) issues.push('–ù–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤');
  if (code.includes('\t') && code.includes('    ')) issues.push('–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã');
  
  return issues;
};

const syntaxIssues = pythonSyntaxCheck(mainFile.content);
if (syntaxIssues.length === 0) {
  console.log('   ‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Python –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
} else {
  console.log('   ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:', syntaxIssues.join(', '));
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Ñ–∞–π–ª—ã
try {
  exportResult.files
    .filter(f => f.type === 'json')
    .forEach(f => {
      JSON.parse(f.content);
      console.log(`   ‚úÖ ${f.path} - –≤–∞–ª–∏–¥–Ω—ã–π JSON`);
    });
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ JSON:', error.message);
}

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
const instructions = `
üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Python –±–æ—Ç–∞:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:
   cd ${exportDir}

2. –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:
   python -m venv venv

3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:
   # Windows:
   venv\\Scripts\\activate
   # Linux/Mac:
   source venv/bin/activate

4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   pip install -r requirements.txt

5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:
   cp .env.example .env
   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à TELEGRAM_BOT_TOKEN

6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:
   python main.py

   # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç:
   run.bat  (Windows)

üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:
- –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.json –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
- –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ main.py –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ README.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
- –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª bot.log
`;

console.log(instructions);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
fs.writeFileSync(path.join(exportDir, 'INSTRUCTIONS.txt'), instructions);

console.log('\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –≤ Python –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
module.exports = {
  exportBotToPython,
  generateMainPythonFile,
  generateRequirementsTxt,
  generatePythonReadme
};