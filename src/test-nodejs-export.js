/**
 * –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js –∫–æ–¥
 */

const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –∏–∑ TypeScript —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
let NodeJSExporter;
try {
  const tsModule = require('./core/export/NodeJSExporter.ts');
  NodeJSExporter = tsModule.NodeJSExporter;
} catch (error) {
  console.log('TypeScript –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é');
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function exportBotToNodeJS(botSchema, options = {}) {
  const defaultOptions = {
    includeComments: true,
    minify: false,
    platform: 'telegram',
    outputDir: './exported-bot'
  };
  
  const opts = { ...defaultOptions, ...options };
  
  try {
    const files = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    files.push(generateMainFile(botSchema, opts));
    files.push(generatePackageJson(botSchema));
    files.push(generateReadme(botSchema));
    files.push(generateEnvExample());
    files.push(generateConfigFile(botSchema));
    
    return {
      success: true,
      files
    };
  } catch (error) {
    return {
      success: false,
      files: [],
      error: error.message
    };
  }
}

function generateMainFile(botSchema, options) {
  const commandNodes = botSchema.configuration?.nodes?.filter(
    node => node.type === 'trigger-command'
  ) || [];
  
  const commandHandlers = commandNodes.map(node => {
    const command = node.data.command;
    const connectedActions = getConnectedActions(botSchema, node.id);
    
    return `
bot.onText(/${command.replace('/', '\\/')}/,  async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  console.log(\`üì® –ö–æ–º–∞–Ω–¥–∞ ${command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}\`);
  
  try {
    updateUserState(userId);
${connectedActions.map(action => generateActionCode(action)).join('\n')}
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${command}:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
  }
});`;
  }).join('\n');
  
  const mainCode = `${options.includeComments ? generateFileHeader(botSchema) : ''}
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = require('./config.json');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
const botVariables = ${JSON.stringify(botSchema.configuration?.variables || {}, null, 2)};

${options.includeComments ? '// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥' : ''}
${commandHandlers}

${options.includeComments ? '// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏' : ''}
function updateUserState(userId) {
  if (!userStates.has(userId)) {
    userStates.set(userId, {
      messageCount: 0,
      lastActivity: new Date(),
      variables: new Map()
    });
  }
  
  const state = userStates.get(userId);
  state.messageCount++;
  state.lastActivity = new Date();
}

function replaceVariables(text, userId) {
  let result = text;
  
  // –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  for (const [key, variable] of Object.entries(botVariables)) {
    const placeholder = \`{{\${key}}}\`;
    result = result.replace(new RegExp(placeholder, 'g'), variable.defaultValue || '');
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const userState = userStates.get(userId);
  if (userState) {
    result = result.replace(/{{message_count}}/g, userState.messageCount);
    result = result.replace(/{{user_count}}/g, userStates.size);
  }
  
  return result;
}

${options.includeComments ? '// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' : ''}
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('–ù–∞–∑–≤–∞–Ω–∏–µ:', config.name);
console.log('–û–ø–∏—Å–∞–Ω–∏–µ:', config.description);

bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

process.on('SIGINT', () => {
  console.log('\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit(0);
});
`;

  return {
    path: 'index.js',
    content: mainCode,
    type: 'js'
  };
}

function generateFileHeader(botSchema) {
  return `/**
 * ${botSchema.name}
 * ${botSchema.description}
 * 
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
 * –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
 */

`;
}

function getConnectedActions(botSchema, nodeId) {
  const edges = botSchema.configuration?.edges || [];
  const nodes = botSchema.configuration?.nodes || [];
  
  return edges
    .filter(edge => edge.source === nodeId)
    .map(edge => nodes.find(node => node.id === edge.target))
    .filter(Boolean);
}

function generateActionCode(action) {
  switch (action.type) {
    case 'action-send-message':
      return `    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${action.data.label}
    const message = replaceVariables(\`${action.data.text}\`, userId);
    await bot.sendMessage(chatId, message, { 
      parse_mode: '${action.data.parseMode || 'HTML'}' 
    });
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');`;

    case 'action-send-media':
      return `    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞: ${action.data.label}
    await bot.sendPhoto(chatId, '${action.data.mediaUrl || 'https://via.placeholder.com/300'}', {
      caption: replaceVariables(\`${action.data.caption || ''}\`, userId)
    });
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞');`;

    default:
      return `    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}
    console.warn('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', '${action.type}');`;
  }
}

function generatePackageJson(botSchema) {
  const packageJson = {
    name: botSchema.id || 'exported-bot',
    version: '1.0.0',
    description: botSchema.description || '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞',
    main: 'index.js',
    scripts: {
      start: 'node index.js',
      dev: 'nodemon index.js',
      test: 'echo "No tests specified" && exit 0'
    },
    dependencies: {
      'node-telegram-bot-api': '^0.61.0'
    },
    devDependencies: {
      nodemon: '^2.0.22'
    },
    keywords: ['telegram', 'bot', 'chatbot', 'exported'],
    author: 'Bot Constructor',
    license: 'MIT',
    engines: {
      node: '>=14.0.0'
    }
  };

  return {
    path: 'package.json',
    content: JSON.stringify(packageJson, null, 2),
    type: 'json'
  };
}

function generateReadme(botSchema) {
  const commands = botSchema.configuration?.nodes
    ?.filter(node => node.type === 'trigger-command')
    ?.map(node => `- \`${node.data.command}\` - ${node.data.description || node.data.label}`)
    ?.join('\n') || '–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

  const readme = `# ${botSchema.name}

${botSchema.description}

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
\`\`\`bash
npm install
\`\`\`

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ \`.env.example\` –≤ \`.env\` –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
\`\`\`bash
cp .env.example .env
\`\`\`

### 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/newbot\`
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª \`.env\`

### 4. –ó–∞–ø—É—Å–∫
\`\`\`bash
npm start
\`\`\`

–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π:
\`\`\`bash
npm run dev
\`\`\`

## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

${commands}

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ \`config.json\`. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
- –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
- –û–ø–∏—Å–∞–Ω–∏–µ
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
.
‚îú‚îÄ‚îÄ index.js          # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
‚îú‚îÄ‚îÄ config.json       # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
‚îú‚îÄ‚îÄ package.json      # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã
‚îú‚îÄ‚îÄ .env.example      # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ .env              # –í–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–µ –≤ git)
‚îî‚îÄ‚îÄ README.md         # –≠—Ç–æ—Ç —Ñ–∞–π–ª
\`\`\`

## üêõ –û—Ç–ª–∞–¥–∫–∞

–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ \`.env\`
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫

## üìù –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License

## ü§ñ –û –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–æ–≤

–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤.
–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}
`;

  return {
    path: 'README.md',
    content: readme,
    type: 'md'
  };
}

function generateEnvExample() {
  return {
    path: '.env.example',
    content: `# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
TELEGRAM_BOT_TOKEN=your_bot_token_here

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (true/false)
NODE_ENV=production

# –ü–æ—Ä—Ç –¥–ª—è webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
PORT=3000

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_LEVEL=info
`,
    type: 'txt'
  };
}

function generateConfigFile(botSchema) {
  const config = {
    name: botSchema.name,
    description: botSchema.description,
    version: '1.0.0',
    created: botSchema.createdAt,
    exported: new Date().toISOString(),
    settings: {
      logging: true,
      debug: false,
      polling: true,
      webhook: false
    },
    variables: botSchema.configuration?.variables || {},
    platforms: botSchema.platforms?.map(p => p.platform) || ['telegram']
  };

  return {
    path: 'config.json',
    content: JSON.stringify(config, null, 2),
    type: 'json'
  };
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testBotSchema = {
  id: 'test-export-bot',
  name: '–¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç',
  description: '–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js –∫–æ–¥',
  createdAt: new Date().toISOString(),
  platforms: [
    { platform: 'telegram', enabled: true }
  ],
  configuration: {
    variables: {
      bot_name: {
        type: 'string',
        defaultValue: '–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç',
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞'
      },
      welcome_message: {
        type: 'string',
        defaultValue: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      }
    },
    nodes: [
      {
        id: 'start-trigger',
        type: 'trigger-command',
        data: {
          command: '/start',
          label: '–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç',
          description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        }
      },
      {
        id: 'welcome-message',
        type: 'action-send-message',
        data: {
          text: '–ü—Ä–∏–≤–µ—Ç! –Ø {{bot_name}}. {{welcome_message}}\n\n–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {{message_count}} —Å–æ–æ–±—â–µ–Ω–∏–π.\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {{user_count}}',
          label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          parseMode: 'HTML'
        }
      },
      {
        id: 'help-trigger',
        type: 'trigger-command',
        data: {
          command: '/help',
          label: '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏',
          description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'
        }
      },
      {
        id: 'help-message',
        type: 'action-send-message',
        data: {
          text: 'ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ',
          label: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏',
          parseMode: 'HTML'
        }
      },
      {
        id: 'info-trigger',
        type: 'trigger-command',
        data: {
          command: '/info',
          label: '–ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
          description: '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ'
        }
      },
      {
        id: 'info-message',
        type: 'action-send-message',
        data: {
          text: 'üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {{bot_name}}\n‚Ä¢ –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {{message_count}}\n‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {{user_count}}',
          label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          parseMode: 'HTML'
        }
      }
    ],
    edges: [
      {
        id: 'start-to-welcome',
        source: 'start-trigger',
        target: 'welcome-message'
      },
      {
        id: 'help-to-help-msg',
        source: 'help-trigger',
        target: 'help-message'
      },
      {
        id: 'info-to-info-msg',
        source: 'info-trigger',
        target: 'info-message'
      }
    ]
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runTest() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js –∫–æ–¥...\n');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    const result = exportBotToNodeJS(testBotSchema, {
      includeComments: true,
      minify: false
    });
    
    if (!result.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', result.error);
      return;
    }
    
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω!');
    console.log(`üìÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.files.length}\n`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportDir = path.join(__dirname, '..', 'temp', 'test-export-nodejs');
    if (!fs.existsSync(exportDir)) {
      fs.mkdirSync(exportDir, { recursive: true });
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    result.files.forEach(file => {
      const filePath = path.join(exportDir, file.path);
      fs.writeFileSync(filePath, file.content);
      console.log(`üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${file.path} (${file.content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    });
    
    console.log(`\nüìÇ –§–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${exportDir}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
    const mainFile = result.files.find(f => f.path === 'index.js');
    if (mainFile) {
      console.log('\nüìã –ü—Ä–µ–≤—å—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (index.js):');
      console.log('‚îÄ'.repeat(50));
      console.log(mainFile.content.substring(0, 500) + '...');
      console.log('‚îÄ'.repeat(50));
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º package.json
    const packageFile = result.files.find(f => f.path === 'package.json');
    if (packageFile) {
      console.log('\nüì¶ package.json:');
      console.log('‚îÄ'.repeat(30));
      console.log(packageFile.content);
      console.log('‚îÄ'.repeat(30));
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:');
    console.log(`1. cd ${exportDir}`);
    console.log('2. npm install');
    console.log('3. cp .env.example .env');
    console.log('4. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    console.log('5. npm start');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runTest();
}

module.exports = {
  exportBotToNodeJS,
  testBotSchema
};