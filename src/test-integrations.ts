/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
 */
import { SchemaExecutionEngine } from './core/engine/SchemaExecutionEngine';
import { IntegrationManager } from './core/integrations/IntegrationManager';
import { BotSchema } from './core/types';

// –ú–æ–∫ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockMessengerAdapter {
  public sentMessages: any[] = [];

  async sendMessage(chatId: string, message: string, options?: any): Promise<void> {
    this.sentMessages.push({ chatId, message, options });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${chatId}: ${message}`);
  }

  clearHistory(): void {
    this.sentMessages = [];
  }
}

async function testIntegrations() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...\n');

  try {
    const engine = new SchemaExecutionEngine();
    const integrationManager = IntegrationManager.getInstance();
    const mockAdapter = new MockMessengerAdapter();

    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IntegrationManager:');
    await testIntegrationManager(integrationManager);

    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:');
    await testRestApiIntegration(engine, mockAdapter);

    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV:');
    await testCsvParsing(engine, mockAdapter);

    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML:');
    await testXmlParsing(engine, mockAdapter);

    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞:');
    await testWebScraping(engine, mockAdapter);

    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏:');
    await testFileOperations(engine, mockAdapter);

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', error);
    throw error;
  }
}

async function testIntegrationManager(manager: IntegrationManager) {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  const integrations = manager.getAllIntegrations();
  console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${integrations.length} –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
  manager.addIntegration({
    id: 'test-api',
    name: '–¢–µ—Å—Ç–æ–≤–æ–µ API',
    type: 'rest_api',
    enabled: true,
    config: {
      baseUrl: 'https://jsonplaceholder.typicode.com',
      testUrl: 'https://jsonplaceholder.typicode.com/posts/1'
    },
    timeout: 5000,
    retries: 1,
    rateLimit: {
      requests: 10,
      period: 60000
    },
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  });

  const testIntegration = manager.getIntegration('test-api');
  console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ${testIntegration?.name}`);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
  const canMakeRequest = manager.checkRateLimit('test-api');
  console.log(`   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: ${canMakeRequest ? '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ' : '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}`);

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  manager.recordUsage('test-api', 150, false);
  const usage = manager.getUsageStats('test-api');
  console.log(`   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${usage[0]?.requests} –∑–∞–ø—Ä–æ—Å–æ–≤`);

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = manager.getOverallStats();
  console.log(`   ‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.totalIntegrations} –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, ${stats.enabledIntegrations} –∞–∫—Ç–∏–≤–Ω—ã—Ö`);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∫)
  try {
    const testResult = await manager.testIntegration('test-api');
    console.log(`   ‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${testResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'} (${testResult.responseTime}–º—Å)`);
  } catch (error) {
    console.log(`   ‚ö†Ô∏è –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –æ—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ)`);
  }
}

async function testRestApiIntegration(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  const restApiSchema: BotSchema = {
    id: 'rest-api-test',
    name: '–¢–µ—Å—Ç REST API',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/api' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'api-call',
        type: 'integration-rest-api',
        data: {
          url: 'https://jsonplaceholder.typicode.com/posts/1',
          method: 'GET',
          responseVariable: 'apiData',
          timeout: 5000
        },
        position: { x: 300, y: 100 }
      },
      {
        id: 'show-result',
        type: 'action-send-message',
        data: {
          message: 'API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω! –ó–∞–≥–æ–ª–æ–≤–æ–∫: {{apiData.title}}'
        },
        position: { x: 500, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'api-call' },
      { id: 'edge-2', source: 'api-call', target: 'show-result' }
    ],
    variables: {},
    settings: {
      name: '–¢–µ—Å—Ç REST API',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
      platforms: ['telegram'],
      mode: 'polling',
      variables: {}
    },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const context = engine.createExecutionContext('user1', 'chat1', 'telegram');
  
  try {
    const result = await engine.executeSchema(restApiSchema, 'command', { command: '/api' }, context, mockAdapter as any);
    console.log(`   ‚úÖ REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ${result.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    if (result.errors.length > 0) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∏: ${result.errors.join(', ')}`);
    }
  } catch (error) {
    console.log(`   ‚ö†Ô∏è REST API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)`);
  }
}

async function testCsvParsing(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  const csvSchema: BotSchema = {
    id: 'csv-test',
    name: '–¢–µ—Å—Ç CSV –ø–∞—Ä—Å–∏–Ω–≥–∞',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/csv' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'parse-csv',
        type: 'integration-csv-parser',
        data: {
          csvData: 'name,age,city\n–ò–≤–∞–Ω,25,–ú–æ—Å–∫–≤–∞\n–ú–∞—Ä–∏—è,30,–°–ü–±\n–ü–µ—Ç—Ä,35,–ö–∞–∑–∞–Ω—å',
          hasHeader: true,
          delimiter: ',',
          responseVariable: 'csvData'
        },
        position: { x: 300, y: 100 }
      },
      {
        id: 'show-csv',
        type: 'action-send-message',
        data: {
          message: 'CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ù–∞–π–¥–µ–Ω–æ {{csvData_rows}} —Å—Ç—Ä–æ–∫, {{csvData_columns}} –∫–æ–ª–æ–Ω–æ–∫'
        },
        position: { x: 500, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'parse-csv' },
      { id: 'edge-2', source: 'parse-csv', target: 'show-csv' }
    ],
    variables: {},
    settings: {
      name: '–¢–µ—Å—Ç CSV –ø–∞—Ä—Å–∏–Ω–≥–∞',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV –¥–∞–Ω–Ω—ã—Ö',
      platforms: ['telegram'],
      mode: 'polling',
      variables: {}
    },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const context = engine.createExecutionContext('user2', 'chat2', 'telegram');
  const result = await engine.executeSchema(csvSchema, 'command', { command: '/csv' }, context, mockAdapter as any);
  console.log(`   ‚úÖ CSV –ø–∞—Ä—Å–∏–Ω–≥: ${result.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
  
  if (result.variables.csvData) {
    console.log(`   üìä –î–∞–Ω–Ω—ã–µ CSV:`, result.variables.csvData.slice(0, 2)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏
  }
}

async function testXmlParsing(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  const xmlSchema: BotSchema = {
    id: 'xml-test',
    name: '–¢–µ—Å—Ç XML –ø–∞—Ä—Å–∏–Ω–≥–∞',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/xml' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'parse-xml',
        type: 'integration-xml-parser',
        data: {
          xmlData: '<?xml version="1.0"?><root><user><name>–ò–≤–∞–Ω</name><age>25</age></user><user><name>–ú–∞—Ä–∏—è</name><age>30</age></user></root>',
          xpath: '/root/user/name',
          responseVariable: 'xmlData'
        },
        position: { x: 300, y: 100 }
      },
      {
        id: 'show-xml',
        type: 'action-send-message',
        data: {
          message: 'XML –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –î–∞–Ω–Ω—ã–µ: {{xmlData}}'
        },
        position: { x: 500, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'parse-xml' },
      { id: 'edge-2', source: 'parse-xml', target: 'show-xml' }
    ],
    variables: {},
    settings: {
      name: '–¢–µ—Å—Ç XML –ø–∞—Ä—Å–∏–Ω–≥–∞',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –¥–∞–Ω–Ω—ã—Ö',
      platforms: ['telegram'],
      mode: 'polling',
      variables: {}
    },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const context = engine.createExecutionContext('user3', 'chat3', 'telegram');
  const result = await engine.executeSchema(xmlSchema, 'command', { command: '/xml' }, context, mockAdapter as any);
  console.log(`   ‚úÖ XML –ø–∞—Ä—Å–∏–Ω–≥: ${result.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
  
  if (result.variables.xmlData) {
    console.log(`   üìÑ –î–∞–Ω–Ω—ã–µ XML:`, result.variables.xmlData);
  }
}

async function testWebScraping(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  const scrapingSchema: BotSchema = {
    id: 'scraping-test',
    name: '–¢–µ—Å—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/scrape' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'scrape-page',
        type: 'integration-web-scraping',
        data: {
          url: 'https://example.com',
          selector: 'title',
          attribute: 'textContent',
          responseVariable: 'pageTitle'
        },
        position: { x: 300, y: 100 }
      },
      {
        id: 'show-title',
        type: 'action-send-message',
        data: {
          message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {{pageTitle}}'
        },
        position: { x: 500, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'scrape-page' },
      { id: 'edge-2', source: 'scrape-page', target: 'show-title' }
    ],
    variables: {},
    settings: {
      name: '–¢–µ—Å—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞',
      platforms: ['telegram'],
      mode: 'polling',
      variables: {}
    },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const context = engine.createExecutionContext('user4', 'chat4', 'telegram');
  
  try {
    const result = await engine.executeSchema(scrapingSchema, 'command', { command: '/scrape' }, context, mockAdapter as any);
    console.log(`   ‚úÖ –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥: ${result.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    
    if (result.variables.pageTitle) {
      console.log(`   üåê –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.variables.pageTitle}`);
    }
  } catch (error) {
    console.log(`   ‚ö†Ô∏è –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥: –æ—à–∏–±–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)`);
  }
}

async function testFileOperations(engine: SchemaExecutionEngine, mockAdapter: MockMessengerAdapter) {
  const fileSchema: BotSchema = {
    id: 'file-test',
    name: '–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
    nodes: [
      {
        id: 'start',
        type: 'trigger-command',
        data: { command: '/file' },
        position: { x: 100, y: 100 }
      },
      {
        id: 'write-file',
        type: 'integration-file-operation',
        data: {
          operation: 'write',
          filePath: './test-data.txt',
          content: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç {{userId}} –≤ {{current_time}}',
          responseVariable: 'writeResult'
        },
        position: { x: 300, y: 100 }
      },
      {
        id: 'read-file',
        type: 'integration-file-operation',
        data: {
          operation: 'read',
          filePath: './test-data.txt',
          responseVariable: 'fileContent'
        },
        position: { x: 500, y: 100 }
      },
      {
        id: 'show-content',
        type: 'action-send-message',
        data: {
          message: '–§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω! –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {{fileContent}}'
        },
        position: { x: 700, y: 100 }
      }
    ],
    edges: [
      { id: 'edge-1', source: 'start', target: 'write-file' },
      { id: 'edge-2', source: 'write-file', target: 'read-file' },
      { id: 'edge-3', source: 'read-file', target: 'show-content' }
    ],
    variables: {},
    settings: {
      name: '–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏',
      platforms: ['telegram'],
      mode: 'polling',
      variables: {}
    },
    version: '1.0.0',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  mockAdapter.clearHistory();
  const context = engine.createExecutionContext('user5', 'chat5', 'telegram');
  const result = await engine.executeSchema(fileSchema, 'command', { command: '/file' }, context, mockAdapter as any);
  console.log(`   ‚úÖ –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${result.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
  
  if (result.variables.writeResult) {
    console.log(`   üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∏:`, result.variables.writeResult);
  }
  if (result.variables.fileContent) {
    console.log(`   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: ${result.variables.fileContent}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testIntegrations()
    .then(() => {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testIntegrations };