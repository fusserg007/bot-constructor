/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
 */

const fs = require('fs');
const path = require('path');
const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (postData) {
      req.write(postData);
    }
    
    req.end();
  });
}

// –°—Ö–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
const demoBotSchema = {
  name: "Demo Bot",
  token: "DEMO_TOKEN_123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  description: "Simple demonstration bot showcasing basic functionality",
  status: "draft",
  platforms: [
    {
      platform: "telegram",
      enabled: true,
      credentials: {
        token: "DEMO_TOKEN"
      },
      mode: "polling",
      status: "disconnected"
    }
  ],
  configuration: {
    nodes: [
      // –ö–æ–º–∞–Ω–¥–∞ /start
      {
        id: "start-trigger",
        type: "trigger-command",
        position: { x: 100, y: 100 },
        data: {
          label: "Start Command",
          command: "/start",
          description: "Welcome new users",
          color: "#3b82f6"
        }
      },
      {
        id: "welcome-message",
        type: "action-send-message",
        position: { x: 400, y: 100 },
        data: {
          label: "Welcome Message",
          text: "Welcome to Demo Bot!\n\nI'm a simple bot created to demonstrate the bot constructor capabilities.\n\nAvailable commands:\n/start - Show this message\n/help - Get help\n/about - About this bot\n/stats - Show statistics",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      
      // –ö–æ–º–∞–Ω–¥–∞ /help
      {
        id: "help-trigger",
        type: "trigger-command",
        position: { x: 100, y: 250 },
        data: {
          label: "Help Command",
          command: "/help",
          description: "Show help information",
          color: "#3b82f6"
        }
      },
      {
        id: "help-message",
        type: "action-send-message",
        position: { x: 400, y: 250 },
        data: {
          label: "Help Message",
          text: "<b>Demo Bot Help</b>\n\nThis bot demonstrates basic functionality of the bot constructor.\n\n<b>Commands:</b>\n/start - Welcome message\n/help - This help\n/about - Information about the bot\n/stats - Usage statistics\n\n<b>Features:</b>\n‚Ä¢ Command handling\n‚Ä¢ Message sending\n‚Ä¢ Variable replacement\n‚Ä¢ User state management\n\n<i>Built with Bot Constructor</i>",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      
      // –ö–æ–º–∞–Ω–¥–∞ /about
      {
        id: "about-trigger",
        type: "trigger-command",
        position: { x: 100, y: 400 },
        data: {
          label: "About Command",
          command: "/about",
          description: "Information about the bot",
          color: "#3b82f6"
        }
      },
      {
        id: "about-message",
        type: "action-send-message",
        position: { x: 400, y: 400 },
        data: {
          label: "About Message",
          text: "<b>About Demo Bot</b>\n\n<b>Name:</b> {{bot_name}}\n<b>Version:</b> {{bot_version}}\n<b>Created:</b> {{creation_date}}\n<b>Platform:</b> Multi-platform\n\n<b>Purpose:</b>\nThis bot serves as a demonstration of the bot constructor's capabilities. It shows how easy it is to create functional bots using visual programming.\n\n<b>Technology:</b>\n‚Ä¢ Visual node-based editor\n‚Ä¢ Multi-platform support\n‚Ä¢ Real-time testing\n‚Ä¢ Code export functionality",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      
      // –ö–æ–º–∞–Ω–¥–∞ /stats
      {
        id: "stats-trigger",
        type: "trigger-command",
        position: { x: 100, y: 550 },
        data: {
          label: "Stats Command",
          command: "/stats",
          description: "Show bot statistics",
          color: "#3b82f6"
        }
      },
      {
        id: "stats-message",
        type: "action-send-message",
        position: { x: 400, y: 550 },
        data: {
          label: "Stats Message",
          text: "<b>Bot Statistics</b>\n\n<b>Status:</b> Active\n<b>Uptime:</b> {{uptime}}\n<b>Messages processed:</b> {{message_count}}\n<b>Active users:</b> {{user_count}}\n<b>Your messages:</b> {{user_message_count}}\n\n<b>Performance:</b>\n‚Ä¢ Response time: < 100ms\n‚Ä¢ Success rate: 99.9%\n‚Ä¢ Memory usage: Low\n\n<b>Last updated:</b> {{last_update}}",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
      {
        id: "unknown-trigger",
        type: "trigger-message",
        position: { x: 100, y: 700 },
        data: {
          label: "Unknown Command Handler",
          description: "Handle unknown commands",
          color: "#f59e0b"
        }
      },
      {
        id: "unknown-message",
        type: "action-send-message",
        position: { x: 400, y: 700 },
        data: {
          label: "Unknown Command Response",
          text: "I don't understand that command.\n\nTry one of these:\n/start - Welcome message\n/help - Get help\n/about - About this bot\n/stats - Show statistics\n\nOr just send me any message and I'll respond!",
          parseMode: "HTML",
          color: "#ef4444"
        }
      }
    ],
    edges: [
      {
        id: "start-to-welcome",
        source: "start-trigger",
        target: "welcome-message",
        sourceHandle: "output",
        targetHandle: "input"
      },
      {
        id: "help-to-help-msg",
        source: "help-trigger",
        target: "help-message",
        sourceHandle: "output",
        targetHandle: "input"
      },
      {
        id: "about-to-about-msg",
        source: "about-trigger",
        target: "about-message",
        sourceHandle: "output",
        targetHandle: "input"
      },
      {
        id: "stats-to-stats-msg",
        source: "stats-trigger",
        target: "stats-message",
        sourceHandle: "output",
        targetHandle: "input"
      },
      {
        id: "unknown-to-unknown-msg",
        source: "unknown-trigger",
        target: "unknown-message",
        sourceHandle: "output",
        targetHandle: "input"
      }
    ],
    variables: {
      bot_name: {
        type: "string",
        defaultValue: "Demo Bot",
        description: "Bot name"
      },
      bot_version: {
        type: "string",
        defaultValue: "1.0.0",
        description: "Bot version"
      },
      creation_date: {
        type: "string",
        defaultValue: new Date().toLocaleDateString('en-US'),
        description: "Creation date"
      },
      uptime: {
        type: "string",
        defaultValue: "0 minutes",
        description: "Bot uptime"
      },
      message_count: {
        type: "number",
        defaultValue: 0,
        description: "Total messages processed"
      },
      user_count: {
        type: "number",
        defaultValue: 0,
        description: "Total users"
      },
      user_message_count: {
        type: "number",
        defaultValue: 0,
        description: "User's message count"
      },
      last_update: {
        type: "string",
        defaultValue: new Date().toLocaleString('en-US'),
        description: "Last update time"
      }
    },
    settings: {
      logging: true,
      debug: true,
      errorHandling: "graceful",
      rateLimit: {
        enabled: true,
        maxRequests: 30,
        windowMs: 60000
      }
    }
  },
  stats: {
    messagesProcessed: 0,
    activeUsers: 0,
    uptime: 1,
    lastActivity: new Date().toISOString()
  },
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
async function createDemoBot() {
  console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–æ—Ç–∞
    const botId = `demo-bot-${Date.now()}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É —Å ID
    const botData = {
      ...demoBotSchema,
      id: botId
    };
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–æ—Ç–∞
    const botsDir = path.join(__dirname, '..', 'data', 'bots');
    const botPath = path.join(botsDir, `bot_${botId}.json`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(botsDir)) {
      fs.mkdirSync(botsDir, { recursive: true });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±–æ—Ç–æ–≤');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª
    fs.writeFileSync(botPath, JSON.stringify(botData, null, 2));
    
    console.log('‚úÖ –î–µ–º–æ-–±–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìã ID: ${botData.id}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${botData.name}`);
    console.log(`üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${botData.description}`);
    console.log(`üìä –£–∑–ª–æ–≤ –≤ —Å—Ö–µ–º–µ: ${botData.configuration.nodes.length}`);
    console.log(`üîó –°–≤—è–∑–µ–π: ${botData.configuration.edges.length}`);
    console.log(`‚öôÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${Object.keys(botData.configuration.variables).length}`);
    console.log(`üíæ –§–∞–π–ª: ${botPath}`);
    
    return botData;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–±–æ—Ç–∞:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–º–æ-–±–æ—Ç–∞
async function testDemoBot(botId) {
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–±–æ—Ç–∞ ${botId}...\n`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/bots/${botId}`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (botRequest.statusCode === 200) {
      const bot = JSON.parse(botRequest.data);
      console.log('‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞
      const checks = [
        { condition: bot.name === 'Demo Bot', name: '–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞' },
        { condition: bot.configuration && bot.configuration.nodes && bot.configuration.nodes.length === 10, name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤' },
        { condition: bot.configuration && bot.configuration.edges && bot.configuration.edges.length === 5, name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π' },
        { condition: bot.configuration && bot.configuration.variables && Object.keys(bot.configuration.variables).length === 8, name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö' },
        { condition: bot.platforms && bot.platforms.length === 1, name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º' },
        { condition: bot.platforms && bot.platforms[0] && bot.platforms[0].platform === 'telegram', name: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ Telegram' }
      ];
      
      checks.forEach(check => {
        if (check.condition) {
          console.log(`‚úÖ ${check.name}`);
        } else {
          console.log(`‚ùå ${check.name}`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
      const commands = bot.configuration && bot.configuration.nodes 
        ? bot.configuration.nodes
            .filter(node => node.type === 'trigger-command')
            .map(node => node.data.command)
        : [];
      
      console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      commands.forEach(command => {
        console.log(`  ‚Ä¢ ${command}`);
      });
      
      return true;
    } else {
      console.error('‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ–º–æ-–±–æ—Ç–∞
async function exportDemoBot(botId) {
  console.log(`\nüì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–º–æ-–±–æ—Ç–∞ ${botId}...\n`);
  
  try {
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Node.js
    console.log('üöÄ –≠–∫—Å–ø–æ—Ä—Ç –≤ Node.js...');
    
    const exportRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/export/${botId}/nodejs`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, JSON.stringify({ 
      options: {
        includeComments: true,
        minify: false
      }
    }), true);
    
    if (exportRequest.statusCode === 200) {
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Node.js —É—Å–ø–µ—à–µ–Ω');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤
      const archivePath = path.join(__dirname, '..', 'temp', `demo-bot-nodejs-${Date.now()}.zip`);
      fs.writeFileSync(archivePath, exportRequest.data);
      console.log(`üíæ –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${archivePath}`);
      
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Node.js:', exportRequest.statusCode);
      return false;
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞\n');
  console.log('='.repeat(60));
  
  // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–±–æ—Ç–∞
  const createdBot = await createDemoBot();
  
  if (!createdBot) {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–±–æ—Ç–∞');
    return;
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–º–æ-–±–æ—Ç–∞
  const testSuccess = await testDemoBot(createdBot.id);
  
  if (!testSuccess) {
    console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–±–æ—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–æ');
    return;
  }
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–º–æ-–±–æ—Ç–∞
  const exportSuccess = await exportDemoBot(createdBot.id);
  
  if (exportSuccess) {
    console.log('\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    console.log('\nüìã –ò—Ç–æ–≥–∏:');
    console.log(`‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: ${createdBot.name}`);
    console.log(`‚úÖ ID: ${createdBot.id}`);
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Dashboard –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –ù–∞–π–¥–∏—Ç–µ "Demo Bot" –≤ —Å–ø–∏—Å–∫–µ');
    console.log('3. –ù–∞–∂–º–∏—Ç–µ "Edit" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω Telegram –≤ "Platforms"');
    console.log('5. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞');
    
  } else {
    console.log('\n‚ö†Ô∏è –î–µ–º–æ-–±–æ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è');
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–±–æ—Ç–∞
if (require.main === module) {
  main();
}

module.exports = {
  createDemoBot,
  testDemoBot,
  exportDemoBot,
  demoBotSchema
};