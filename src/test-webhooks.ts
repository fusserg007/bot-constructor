/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã webhook'–æ–≤
 */

import express from 'express';
import { WebhookManager } from './core/webhooks/WebhookManager';
import { TelegramAdapter } from './adapters/TelegramAdapter';
import { MaxAdapter } from './adapters/MaxAdapter';

async function testWebhooks() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã webhook\'–æ–≤...');

  const app = express();
  const webhookManager = WebhookManager.getInstance();

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Express middleware
  app.use(express.json({ limit: '1mb' }));
  app.use(express.urlencoded({ extended: true }));

  // –î–æ–±–∞–≤–ª—è–µ–º webhook middleware
  app.use('/webhook', webhookManager.getWebhookMiddleware());

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
  const telegramAdapter = new TelegramAdapter();
  const maxAdapter = new MaxAdapter();

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await telegramAdapter.initialize({
      telegram: {
        token: 'test_token'
      }
    });

    await maxAdapter.initialize({
      max: {
        apiKey: 'test_api_key',
        secretKey: 'test_secret_key'
      }
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook'–∏
    webhookManager.registerWebhook('test-telegram-bot', telegramAdapter, {
      secret: 'telegram_secret',
      validateSignature: true
    });

    webhookManager.registerWebhook('test-max-bot', maxAdapter, {
      secret: 'max_secret',
      validateSignature: true
    });

    console.log('‚úÖ Webhook\'–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const telegramConfig = webhookManager.getWebhookConfig('test-telegram-bot');
    const maxConfig = webhookManager.getWebhookConfig('test-max-bot');

    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook\'–æ–≤:');
    console.log('  Telegram:', telegramConfig?.path);
    console.log('  MAX:', maxConfig?.path);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    app.get('/webhook-stats', (req, res) => {
      const stats = webhookManager.getWebhookStats();
      const overallStats = webhookManager.getOverallStats();
      
      res.json({
        individual: stats,
        overall: overallStats
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ webhook'–∞
    app.post('/test-webhook/:platform/:botId', (req, res) => {
      console.log(`üì® –¢–µ—Å—Ç–æ–≤—ã–π webhook –¥–ª—è ${req.params.platform}/${req.params.botId}:`, req.body);
      res.json({ success: true, message: 'Test webhook received' });
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const port = 3001;
    const server = app.listen(port, () => {
      console.log(`üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://localhost:${port}/webhook-stats`);
      console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–µ webhook'–∏:`);
      console.log(`  Telegram: http://localhost:${port}${telegramConfig?.path}`);
      console.log(`  MAX: http://localhost:${port}${maxConfig?.path}`);
    });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
      server.close();
      webhookManager.dispose();
    }, 30000);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook\'–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testWebhooks().catch(console.error);
}

export { testWebhooks };