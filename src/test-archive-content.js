/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
 */

const fs = require('fs');
const path = require('path');
const yauzl = require('yauzl');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∞
function extractAndCheckArchive(archivePath) {
  return new Promise((resolve, reject) => {
    console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤: ${archivePath}`);
    
    if (!fs.existsSync(archivePath)) {
      reject(new Error('–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      return;
    }
    
    const extractedFiles = {};
    
    yauzl.open(archivePath, { lazyEntries: true }, (err, zipfile) => {
      if (err) {
        reject(err);
        return;
      }
      
      zipfile.readEntry();
      
      zipfile.on('entry', (entry) => {
        if (/\/$/.test(entry.fileName)) {
          // –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
          zipfile.readEntry();
        } else {
          // –≠—Ç–æ —Ñ–∞–π–ª
          zipfile.openReadStream(entry, (err, readStream) => {
            if (err) {
              reject(err);
              return;
            }
            
            let content = '';
            readStream.on('data', (chunk) => {
              content += chunk.toString();
            });
            
            readStream.on('end', () => {
              extractedFiles[entry.fileName] = content;
              zipfile.readEntry();
            });
          });
        }
      });
      
      zipfile.on('end', () => {
        resolve(extractedFiles);
      });
      
      zipfile.on('error', (err) => {
        reject(err);
      });
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
function analyzeExtractedFiles(files) {
  console.log('\nüìã –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞—Ä—Ö–∏–≤–∞:');
  console.log('‚îÄ'.repeat(50));
  
  const fileTypes = {
    'index.js': '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞',
    'package.json': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è npm',
    'README.md': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
    '.env.example': '–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
    'config.json': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞'
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
  Object.entries(fileTypes).forEach(([fileName, description]) => {
    if (files[fileName]) {
      console.log(`‚úÖ ${fileName} - ${description} (${files[fileName].length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    } else {
      console.log(`‚ùå ${fileName} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
  if (files['index.js']) {
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (index.js):');
    const mainFile = files['index.js'];
    
    const checks = [
      { pattern: /const TelegramBot = require\('node-telegram-bot-api'\)/, name: '–ò–º–ø–æ—Ä—Ç TelegramBot' },
      { pattern: /bot\.onText\(/, name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥' },
      { pattern: /updateUserState/, name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º' },
      { pattern: /replaceVariables/, name: '–ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö' },
      { pattern: /console\.log/, name: '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ' },
      { pattern: /process\.on\('SIGINT'/, name: 'Graceful shutdown' }
    ];
    
    checks.forEach(check => {
      if (check.pattern.test(mainFile)) {
        console.log(`  ‚úÖ ${check.name}`);
      } else {
        console.log(`  ‚ùå ${check.name} - –ù–ï –ù–ê–ô–î–ï–ù–û`);
      }
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º package.json
  if (files['package.json']) {
    console.log('\nüì¶ –ê–Ω–∞–ª–∏–∑ package.json:');
    try {
      const packageData = JSON.parse(files['package.json']);
      
      console.log(`  üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${packageData.name}`);
      console.log(`  üî¢ –í–µ—Ä—Å–∏—è: ${packageData.version}`);
      console.log(`  üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${packageData.description}`);
      
      if (packageData.dependencies) {
        console.log('  üìö –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
        Object.entries(packageData.dependencies).forEach(([dep, version]) => {
          console.log(`    - ${dep}: ${version}`);
        });
      }
      
      if (packageData.scripts) {
        console.log('  üöÄ –°–∫—Ä–∏–ø—Ç—ã:');
        Object.entries(packageData.scripts).forEach(([script, command]) => {
          console.log(`    - ${script}: ${command}`);
        });
      }
      
    } catch (error) {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ package.json:', error.message);
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º README.md
  if (files['README.md']) {
    console.log('\nüìñ –ê–Ω–∞–ª–∏–∑ README.md:');
    const readme = files['README.md'];
    
    const readmeChecks = [
      { pattern: /# .+/, name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫' },
      { pattern: /## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç/, name: '–†–∞–∑–¥–µ–ª –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞' },
      { pattern: /npm install/, name: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ' },
      { pattern: /## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞/, name: '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
      { pattern: /TELEGRAM_BOT_TOKEN/, name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ' }
    ];
    
    readmeChecks.forEach(check => {
      if (check.pattern.test(readme)) {
        console.log(`  ‚úÖ ${check.name}`);
      } else {
        console.log(`  ‚ùå ${check.name} - –ù–ï –ù–ê–ô–î–ï–ù–û`);
      }
    });
  }
  
  console.log('\n' + '‚îÄ'.repeat(50));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testArchiveContent() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞\n');
  
  try {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    const tempDir = path.join(__dirname, '..', 'temp');
    
    if (!fs.existsSync(tempDir)) {
      console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    const files = fs.readdirSync(tempDir)
      .filter(file => file.startsWith('exported-') && file.endsWith('.zip'))
      .map(file => ({
        name: file,
        path: path.join(tempDir, file),
        mtime: fs.statSync(path.join(tempDir, file)).mtime
      }))
      .sort((a, b) => b.mtime - a.mtime);
    
    if (files.length === 0) {
      console.error('‚ùå –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node src/test-nodejs-export-api.js');
      return;
    }
    
    const latestArchive = files[0];
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω –∞—Ä—Ö–∏–≤: ${latestArchive.name}`);
    console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${latestArchive.mtime.toLocaleString('ru-RU')}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const extractedFiles = await extractAndCheckArchive(latestArchive.path);
    
    console.log(`\n‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${Object.keys(extractedFiles).length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    analyzeExtractedFiles(extractedFiles);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if (extractedFiles['index.js']) {
      console.log('\nüìÑ –ü—Ä–µ–≤—å—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫):');
      console.log('‚îÄ'.repeat(60));
      const lines = extractedFiles['index.js'].split('\n').slice(0, 20);
      lines.forEach((line, index) => {
        console.log(`${String(index + 1).padStart(2, ' ')}: ${line}`);
      });
      console.log('‚îÄ'.repeat(60));
    }
    
    console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏–≤–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testArchiveContent();
}

module.exports = {
  extractAndCheckArchive,
  analyzeExtractedFiles,
  testArchiveContent
};