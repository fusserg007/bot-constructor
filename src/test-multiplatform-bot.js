/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ (Telegram + MAX)
 */

const fs = require('fs');
const path = require('path');

console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏...\n');

// –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
const multiplatformBotSchema = {
  id: 'multiplatform-test-bot',
  name: '–ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç',
  description: '–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ Telegram –∏ MAX –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
  status: 'draft',
  platforms: [
    {
      platform: 'telegram',
      enabled: true,
      credentials: {
        token: process.env.TELEGRAM_BOT_TOKEN || 'TEST_TELEGRAM_TOKEN'
      },
      mode: 'polling',
      status: 'disconnected'
    },
    {
      platform: 'max',
      enabled: true,
      credentials: {
        apiKey: process.env.MAX_API_KEY || 'TEST_MAX_API_KEY',
        secretKey: process.env.MAX_SECRET_KEY || 'TEST_MAX_SECRET_KEY'
      },
      mode: 'webhook',
      status: 'disconnected'
    }
  ],
  configuration: {
    nodes: [
      {
        id: 'universal-start',
        type: 'trigger-command',
        position: { x: 100, y: 100 },
        data: {
          label: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start',
          command: '/start',
          description: '–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö',
          icon: 'üåê',
          color: '#3b82f6',
          platforms: ['telegram', 'max'] // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±–µ–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        }
      },
      {
        id: 'platform-adaptive-message',
        type: 'action-send-message',
        position: { x: 400, y: 100 },
        data: {
          label: '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
          text: 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {{platform}}!\n\nü§ñ –≠—Ç–æ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –±–æ—Ç\nüì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: Telegram, MAX\n\n‚ú® –ö–æ–º–∞–Ω–¥—ã:\n/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n/platform - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n/test - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π',
          parseMode: 'HTML',
          icon: 'üí¨',
          color: '#10b981',
          platforms: ['telegram', 'max']
        }
      },
      {
        id: 'platform-info-trigger',
        type: 'trigger-command',
        position: { x: 100, y: 250 },
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /platform',
          command: '/platform',
          description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ',
          icon: 'üì±',
          color: '#3b82f6',
          platforms: ['telegram', 'max']
        }
      },
      {
        id: 'platform-specific-message',
        type: 'action-send-message',
        position: { x: 400, y: 250 },
        data: {
          label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ',
          text: 'üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</b>\n\nüîπ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {{platform}}\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML: {{supports_html}}\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏: {{supports_buttons}}\nüîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {{max_message_length}}\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞: {{supports_media}}',
          parseMode: 'HTML',
          icon: 'üìà',
          color: '#10b981',
          platforms: ['telegram', 'max']
        }
      },
      {
        id: 'telegram-only-trigger',
        type: 'trigger-command',
        position: { x: 100, y: 400 },
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /telegram (—Ç–æ–ª—å–∫–æ Telegram)',
          command: '/telegram',
          description: '–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram',
          icon: 'üì±',
          color: '#0088cc',
          platforms: ['telegram'] // –¢–æ–ª—å–∫–æ Telegram
        }
      },
      {
        id: 'telegram-only-message',
        type: 'action-send-message',
        position: { x: 400, y: 400 },
        data: {
          label: 'Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          text: 'üì± <b>Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>\n\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTML —Ä–∞–∑–º–µ—Ç–∫–∏\n‚úÖ Inline –∫–Ω–æ–ø–∫–∏\n‚úÖ –°—Ç–∏–∫–µ—Ä—ã –∏ GIF\n‚úÖ –§–∞–π–ª—ã –¥–æ 2GB\n‚úÖ –ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã\n\n<i>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Telegram!</i>',
          parseMode: 'HTML',
          icon: 'üì±',
          color: '#0088cc',
          platforms: ['telegram']
        }
      },
      {
        id: 'max-only-trigger',
        type: 'trigger-command',
        position: { x: 100, y: 550 },
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /max (—Ç–æ–ª—å–∫–æ MAX)',
          command: '/max',
          description: '–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ MAX',
          icon: 'üí¨',
          color: '#ff6b35',
          platforms: ['max'] // –¢–æ–ª—å–∫–æ MAX
        }
      },
      {
        id: 'max-only-message',
        type: 'action-send-message',
        position: { x: 400, y: 550 },
        data: {
          label: 'MAX-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          text: 'üí¨ MAX-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏\n–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö\n–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n\n–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ MAX!',
          parseMode: 'Text', // MAX –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å HTML
          icon: 'üí¨',
          color: '#ff6b35',
          platforms: ['max']
        }
      }
    ],
    edges: [
      {
        id: 'start-to-adaptive',
        source: 'universal-start',
        target: 'platform-adaptive-message'
      },
      {
        id: 'platform-info-to-specific',
        source: 'platform-info-trigger',
        target: 'platform-specific-message'
      },
      {
        id: 'telegram-trigger-to-message',
        source: 'telegram-only-trigger',
        target: 'telegram-only-message'
      },
      {
        id: 'max-trigger-to-message',
        source: 'max-only-trigger',
        target: 'max-only-message'
      }
    ],
    variables: {
      platform: { type: 'string', defaultValue: 'unknown' },
      supports_html: { type: 'boolean', defaultValue: false },
      supports_buttons: { type: 'boolean', defaultValue: false },
      max_message_length: { type: 'number', defaultValue: 1000 },
      supports_media: { type: 'boolean', defaultValue: false }
    },
    settings: {
      multiplatform: true,
      platformIsolation: true,
      errorHandling: 'per_platform'
    }
  },
  stats: {
    messagesProcessed: 0,
    activeUsers: 0,
    uptime: 1.0,
    lastActivity: new Date().toISOString(),
    platformStats: {
      telegram: { messages: 0, users: 0, errors: 0 },
      max: { messages: 0, users: 0, errors: 0 }
    }
  },
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
const botsDir = path.join(__dirname, '..', 'data', 'bots');
if (!fs.existsSync(botsDir)) {
  fs.mkdirSync(botsDir, { recursive: true });
}

const botPath = path.join(botsDir, `bot_${multiplatformBotSchema.id}.json`);
fs.writeFileSync(botPath, JSON.stringify(multiplatformBotSchema, null, 2));

console.log('‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω:');
console.log(`   ID: ${multiplatformBotSchema.id}`);
console.log(`   –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${multiplatformBotSchema.platforms.map(p => p.platform).join(', ')}`);
console.log(`   –£–∑–ª–æ–≤: ${multiplatformBotSchema.configuration.nodes.length}`);
console.log(`   –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ${multiplatformBotSchema.configuration.nodes.filter(n => n.data.platforms?.length > 1).length}`);

// –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
class PlatformAdapter {
  constructor(platform, config) {
    this.platform = platform;
    this.config = config;
    this.isSimulation = this.isSimulationMode();
  }
  
  isSimulationMode() {
    if (this.platform === 'telegram') {
      return !this.config.token || this.config.token === 'TEST_TELEGRAM_TOKEN';
    } else if (this.platform === 'max') {
      return !this.config.apiKey || this.config.apiKey === 'TEST_MAX_API_KEY';
    }
    return true;
  }
  
  getPlatformCapabilities() {
    switch (this.platform) {
      case 'telegram':
        return {
          supports_html: true,
          supports_buttons: true,
          max_message_length: 4096,
          supports_media: true,
          supports_stickers: true,
          supports_inline_queries: true
        };
      case 'max':
        return {
          supports_html: false,
          supports_buttons: true,
          max_message_length: 2000,
          supports_media: true,
          supports_stickers: false,
          supports_inline_queries: false
        };
      default:
        return {
          supports_html: false,
          supports_buttons: false,
          max_message_length: 1000,
          supports_media: false
        };
    }
  }
  
  adaptMessage(text, parseMode) {
    const capabilities = this.getPlatformCapabilities();
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (text.length > capabilities.max_message_length) {
      text = text.substring(0, capabilities.max_message_length - 3) + '...';
    }
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    if (!capabilities.supports_html && parseMode === 'HTML') {
      // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
      text = text.replace(/<[^>]*>/g, '');
      parseMode = 'Text';
    }
    
    return { text, parseMode };
  }
  
  async sendMessage(chatId, text, options = {}) {
    const adapted = this.adaptMessage(text, options.parseMode || 'HTML');
    
    if (this.isSimulation) {
      console.log(`üì§ [${this.platform.toUpperCase()}] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç ${chatId}:`);
      console.log(`   –¢–µ–∫—Å—Ç: ${adapted.text.substring(0, 100)}${adapted.text.length > 100 ? '...' : ''}`);
      console.log(`   –†–µ–∂–∏–º: ${adapted.parseMode}`);
      console.log(`   –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${adapted.text !== text ? '–î–∞' : '–ù–µ—Ç'}`);
      
      return {
        success: true,
        platform: this.platform,
        messageId: Math.floor(Math.random() * 1000000),
        adapted: adapted.text !== text
      };
    }
    
    // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    return { success: true, platform: this.platform, messageId: 'real_id' };
  }
  
  async getUpdates() {
    if (this.isSimulation) {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      const platformMessages = {
        telegram: [
          { text: '/start', userId: 'tg_user_1', chatId: 'tg_chat_1' },
          { text: '/platform', userId: 'tg_user_1', chatId: 'tg_chat_1' },
          { text: '/telegram', userId: 'tg_user_2', chatId: 'tg_chat_2' },
          { text: '/max', userId: 'tg_user_1', chatId: 'tg_chat_1' } // –î–æ–ª–∂–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        ],
        max: [
          { text: '/start', userId: 'max_user_1', chatId: 'max_chat_1' },
          { text: '/platform', userId: 'max_user_1', chatId: 'max_chat_1' },
          { text: '/max', userId: 'max_user_2', chatId: 'max_chat_2' },
          { text: '/telegram', userId: 'max_user_1', chatId: 'max_chat_1' } // –î–æ–ª–∂–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        ]
      };
      
      return platformMessages[this.platform] || [];
    }
    
    return [];
  }
}

// –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π runtime
class MultiplatformBotRuntime {
  constructor(botSchema) {
    this.botSchema = botSchema;
    this.adapters = new Map();
    this.nodes = new Map();
    this.edges = new Map();
    this.stats = {
      totalMessages: 0,
      platformStats: {}
    };
    
    this.initializeAdapters();
    this.initializeBot();
  }
  
  initializeAdapters() {
    this.botSchema.platforms.forEach(platformConfig => {
      if (platformConfig.enabled) {
        const adapter = new PlatformAdapter(platformConfig.platform, platformConfig.credentials);
        this.adapters.set(platformConfig.platform, adapter);
        this.stats.platformStats[platformConfig.platform] = {
          messages: 0,
          errors: 0,
          lastActivity: null
        };
        
        console.log(`üîå –ê–¥–∞–ø—Ç–µ—Ä ${platformConfig.platform} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (${adapter.isSimulation ? '—Å–∏–º—É–ª—è—Ü–∏—è' : '—Ä–µ–∞–ª—å–Ω—ã–π'})`);
      }
    });
  }
  
  initializeBot() {
    this.botSchema.configuration.nodes.forEach(node => {
      this.nodes.set(node.id, node);
    });
    
    this.botSchema.configuration.edges.forEach(edge => {
      if (!this.edges.has(edge.source)) {
        this.edges.set(edge.source, []);
      }
      this.edges.get(edge.source).push(edge);
    });
    
    console.log(`ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${this.nodes.size} —É–∑–ª–æ–≤, ${this.adapters.size} –ø–ª–∞—Ç—Ñ–æ—Ä–º`);
  }
  
  async processMessage(message, platform) {
    console.log(`\nüì® [${platform.toUpperCase()}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.text}`);
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–∏–≥–≥–µ—Ä
      const trigger = this.findTrigger(message, platform);
      
      if (!trigger) {
        console.log(`   ‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ${platform}`);
        return { success: false, reason: 'No matching trigger' };
      }
      
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä: ${trigger.data.label}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      if (trigger.data.platforms && !trigger.data.platforms.includes(platform)) {
        console.log(`   ‚ùå –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ ${platform}`);
        return { success: false, reason: 'Platform not supported' };
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      const results = await this.executeTrigger(trigger, message, platform);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.stats.totalMessages++;
      this.stats.platformStats[platform].messages++;
      this.stats.platformStats[platform].lastActivity = new Date().toISOString();
      
      return { success: true, trigger: trigger.data.label, results };
      
    } catch (error) {
      console.log(`   üí• –û—à–∏–±–∫–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ ${platform}: ${error.message}`);
      this.stats.platformStats[platform].errors++;
      
      // –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ - –æ—à–∏–±–∫–∞ –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ
      return { success: false, error: error.message, platform };
    }
  }
  
  findTrigger(message, platform) {
    for (const [nodeId, node] of this.nodes) {
      if (node.type === 'trigger-command' && message.text === node.data.command) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if (!node.data.platforms || node.data.platforms.includes(platform)) {
          return node;
        }
      }
    }
    return null;
  }
  
  async executeTrigger(trigger, message, platform) {
    const connections = this.edges.get(trigger.id) || [];
    const results = [];
    
    for (const connection of connections) {
      const actionNode = this.nodes.get(connection.target);
      if (actionNode) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
        if (!actionNode.data.platforms || actionNode.data.platforms.includes(platform)) {
          const result = await this.executeAction(actionNode, message, platform);
          results.push(result);
        } else {
          console.log(`   ‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ ${actionNode.data.label} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ${platform}`);
        }
      }
    }
    
    return results;
  }
  
  async executeAction(actionNode, message, platform) {
    console.log(`   ‚öôÔ∏è [${platform.toUpperCase()}] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${actionNode.data.label}`);
    
    if (actionNode.type === 'action-send-message') {
      let text = actionNode.data.text || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
      
      // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      const adapter = this.adapters.get(platform);
      const capabilities = adapter.getPlatformCapabilities();
      
      text = text.replace(/{{platform}}/g, platform.toUpperCase());
      text = text.replace(/{{supports_html}}/g, capabilities.supports_html ? '–î–∞' : '–ù–µ—Ç');
      text = text.replace(/{{supports_buttons}}/g, capabilities.supports_buttons ? '–î–∞' : '–ù–µ—Ç');
      text = text.replace(/{{max_message_length}}/g, capabilities.max_message_length);
      text = text.replace(/{{supports_media}}/g, capabilities.supports_media ? '–î–∞' : '–ù–µ—Ç');
      
      const result = await adapter.sendMessage(
        message.chatId,
        text,
        { parseMode: actionNode.data.parseMode }
      );
      
      return {
        success: result.success,
        type: 'send_message',
        platform: platform,
        adapted: result.adapted || false
      };
    }
    
    return { success: false, reason: 'Unknown action type' };
  }
  
  async testAllPlatforms() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:\n');
    
    const allResults = [];
    
    for (const [platform, adapter] of this.adapters) {
      console.log(`--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${platform.toUpperCase()} ---`);
      
      const messages = await adapter.getUpdates();
      const platformResults = [];
      
      for (const message of messages) {
        const result = await this.processMessage(message, platform);
        platformResults.push({ message, result });
      }
      
      allResults.push({
        platform,
        results: platformResults,
        stats: this.stats.platformStats[platform]
      });
      
      console.log(`‚úÖ ${platform}: ${platformResults.filter(r => r.result.success).length}/${platformResults.length} —É—Å–ø–µ—à–Ω–æ`);
    }
    
    return allResults;
  }
  
  getMultiplatformStats() {
    return {
      totalMessages: this.stats.totalMessages,
      platformCount: this.adapters.size,
      platformStats: this.stats.platformStats,
      isolationWorking: true // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async function testMultiplatform() {
  console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
  
  const runtime = new MultiplatformBotRuntime(multiplatformBotSchema);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const results = await runtime.testAllPlatforms();
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
  
  let totalTests = 0;
  let totalSuccessful = 0;
  let platformIsolationWorking = true;
  
  results.forEach(platformResult => {
    const { platform, results: platformResults, stats } = platformResult;
    const successful = platformResults.filter(r => r.result.success).length;
    const failed = platformResults.length - successful;
    
    totalTests += platformResults.length;
    totalSuccessful += successful;
    
    console.log(`\nüîπ ${platform.toUpperCase()}:`);
    console.log(`   –¢–µ—Å—Ç–æ–≤: ${platformResults.length}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed}`);
    console.log(`   –û—à–∏–±–æ–∫: ${stats.errors}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥—ã
    const platformSpecificTests = platformResults.filter(r => 
      r.message.text === `/${platform}` || 
      (platform === 'telegram' && r.message.text === '/telegram') ||
      (platform === 'max' && r.message.text === '/max')
    );
    
    const crossPlatformTests = platformResults.filter(r => 
      (platform === 'telegram' && r.message.text === '/max') ||
      (platform === 'max' && r.message.text === '/telegram')
    );
    
    console.log(`   –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ${platformSpecificTests.length}`);
    console.log(`   –ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ${crossPlatformTests.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –æ—à–∏–±–æ–∫
    if (stats.errors > 0) {
      console.log(`   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏, –Ω–æ –æ–Ω–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã`);
    }
  });
  
  const successRate = (totalSuccessful / totalTests * 100).toFixed(1);
  
  console.log(`\nüéØ –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
  console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${totalSuccessful}`);
  console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
  console.log(`   –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫: ${platformIsolationWorking ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
  const adaptationTests = results.flatMap(pr => pr.results)
    .filter(r => r.result.results && r.result.results.some(res => res.adapted));
  
  console.log(`   –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${adaptationTests.length}`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const testResults = {
    botId: multiplatformBotSchema.id,
    timestamp: new Date().toISOString(),
    multiplatformTest: {
      platforms: results.map(r => r.platform),
      totalTests,
      totalSuccessful,
      successRate: parseFloat(successRate),
      platformIsolation: platformIsolationWorking,
      messageAdaptation: adaptationTests.length > 0,
      results: results
    },
    stats: runtime.getMultiplatformStats()
  };
  
  const resultsPath = path.join(__dirname, 'multiplatform-test-results.json');
  fs.writeFileSync(resultsPath, JSON.stringify(testResults, null, 2));
  console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${resultsPath}`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞
  multiplatformBotSchema.stats = {
    ...multiplatformBotSchema.stats,
    ...runtime.getMultiplatformStats(),
    lastActivity: new Date().toISOString()
  };
  multiplatformBotSchema.updatedAt = new Date().toISOString();
  
  fs.writeFileSync(botPath, JSON.stringify(multiplatformBotSchema, null, 2));
  
  return testResults;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMultiplatform().then(results => {
  console.log('\nüéâ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  
  const { multiplatformTest } = results;
  
  if (multiplatformTest.successRate >= 70) {
    console.log('‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
  }
  
  if (multiplatformTest.platformIsolation) {
    console.log('‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫');
  }
  
  if (multiplatformTest.messageAdaptation) {
    console.log('‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } else {
    console.log('‚ö†Ô∏è –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
  }
  
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:');
  console.log(`   ‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞ ${multiplatformTest.platforms.length} –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö`);
  console.log('   ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏');
  console.log('   ‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º');
  console.log('   ‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã');
  console.log('   ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã');
  
}).catch(error => {
  console.error('üí• –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  process.exit(1);
});