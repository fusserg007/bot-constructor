/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
 */
const fs = require('fs');
const path = require('path');
const http = require('http');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä (–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –Ω–∞ –ª–µ—Ç—É)
const ts = require('typescript');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript –≤ JavaScript
function compileTypeScript(tsCode) {
  const result = ts.transpile(tsCode, {
    target: ts.ScriptTarget.ES2020,
    module: ts.ModuleKind.CommonJS,
    esModuleInterop: true,
    allowSyntheticDefaultImports: true,
    strict: false
  });
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });
    req.on('error', (err) => {
      reject(err);
    });
    if (postData) {
      req.write(postData);
    }
    req.end();
  });
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –±–æ—Ç–∞ –¥–ª—è Python —ç–∫—Å–ø–æ—Ä—Ç–∞
const testBotSchema = {
  id: "python-export-test-bot",
  name: "Python Export Test Bot",
  description: "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Python",
  token: "TEST_PYTHON_TOKEN_123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  status: "draft",
  platforms: [
    {
      platform: "telegram",
      enabled: true,
      credentials: {
        token: "TEST_PYTHON_TOKEN_123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      },
      mode: "polling",
      status: "disconnected"
    }
  ],
  configuration: {
    nodes: [
      {
        id: "start-command",
        type: "trigger-command",
        position: { x: 100, y: 100 },
        data: {
          label: "Start Command",
          command: "/start",
          description: "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞",
          color: "#3b82f6"
        }
      },
      {
        id: "welcome-message",
        type: "action-send-message",
        position: { x: 400, y: 100 },
        data: {
          label: "Welcome Message",
          text: "üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Python –±–æ—Ç–∞!\\n\\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Python –∫–æ–¥.\\n\\n–í–∞—à ID: {{user_id}}\\n–°–æ–æ–±—â–µ–Ω–∏–π: {{message_count}}",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      {
        id: "help-command",
        type: "trigger-command",
        position: { x: 100, y: 250 },
        data: {
          label: "Help Command",
          command: "/help",
          description: "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
          color: "#3b82f6"
        }
      },
      {
        id: "help-message",
        type: "action-send-message",
        position: { x: 400, y: 250 },
        data: {
          label: "Help Message",
          text: "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\\n\\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\\n/python - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python\\n/quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞\\n\\nüêç –≠—Ç–æ—Ç –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python!",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      {
        id: "python-command",
        type: "trigger-command",
        position: { x: 100, y: 400 },
        data: {
          label: "Python Info Command",
          command: "/python",
          description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python",
          color: "#3b82f6"
        }
      },
      {
        id: "python-message",
        type: "action-send-message",
        position: { x: 400, y: 400 },
        data: {
          label: "Python Info",
          text: "üêç <b>Python - –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!</b>\\n\\n‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å\\n‚Ä¢ –û–≥—Ä–æ–º–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫\\n‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ—Ç–æ–≤\\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –û–û–ü –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\\n\\n<i>–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pyTelegramBotAPI</i>",
          parseMode: "HTML",
          color: "#10b981"
        }
      },
      {
        id: "quiz-command",
        type: "trigger-command",
        position: { x: 100, y: 550 },
        data: {
          label: "Quiz Command",
          command: "/quiz",
          description: "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ Python",
          color: "#3b82f6"
        }
      },
      {
        id: "quiz-message",
        type: "action-send-message",
        position: { x: 400, y: 550 },
        data: {
          label: "Quiz Question",
          text: "üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ Python!</b>\\n\\n–í–æ–ø—Ä–æ—Å: –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–ø–∏—Å–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç?\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
          parseMode: "HTML",
          buttons: [
            [
              { text: "A) JavaScript", callback_data: "quiz_a" },
              { text: "B) Python", callback_data: "quiz_b" }
            ],
            [
              { text: "C) Java", callback_data: "quiz_c" },
              { text: "D) C++", callback_data: "quiz_d" }
            ]
          ],
          color: "#f59e0b"
        }
      }
    ],
    edges: [
      {
        id: "start-to-welcome",
        source: "start-command",
        target: "welcome-message"
      },
      {
        id: "help-to-message",
        source: "help-command",
        target: "help-message"
      },
      {
        id: "python-to-info",
        source: "python-command",
        target: "python-message"
      },
      {
        id: "quiz-to-question",
        source: "quiz-command",
        target: "quiz-message"
      }
    ],
    variables: {
      user_id: {
        type: "string",
        defaultValue: "0",
        description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      },
      message_count: {
        type: "number",
        defaultValue: "0",
        description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      },
      bot_name: {
        type: "string",
        defaultValue: "Python Bot",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞"
      }
    }
  },
  stats: {
    messagesProcessed: 0,
    activeUsers: 0,
    uptime: 1,
    lastActivity: new Date().toISOString()
  },
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
async function testTypeScriptPythonExporter() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript Python —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞...\n');
  
  try {
    // –ß–∏—Ç–∞–µ–º TypeScript –∫–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
    const exporterPath = path.join(__dirname, 'core', 'export', 'PythonExporter.ts');
    
    if (!fs.existsSync(exporterPath)) {
      console.error('‚ùå TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', exporterPath);
      return false;
    }
    
    const tsCode = fs.readFileSync(exporterPath, 'utf8');
    console.log('‚úÖ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(tsCode.length / 1024)} KB`);
    
    // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º TypeScript –≤ JavaScript
    console.log('\nüîÑ –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript...');
    const jsCode = compileTypeScript(tsCode);
    console.log('‚úÖ TypeScript —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –≤ JavaScript');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const tempJsPath = path.join(__dirname, '..', 'temp', 'PythonExporter.js');
    const tempDir = path.dirname(tempJsPath);
    
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    fs.writeFileSync(tempJsPath, jsCode);
    console.log('üíæ –í—Ä–µ–º–µ–Ω–Ω—ã–π JS —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
    delete require.cache[require.resolve(tempJsPath)];
    const { PythonExporter } = require(tempJsPath);
    
    console.log('\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞...');
    const exporter = new PythonExporter(testBotSchema, {
      includeComments: true,
      includeAdvancedFeatures: true,
      includeIntegrations: true,
      includeTypeHints: true,
      useAsyncio: false,
      pythonVersion: '3.9'
    });
    
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    console.log('\nüì¶ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞...');
    const exportResult = exporter.export();
    
    if (!exportResult.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', exportResult.error);
      return false;
    }
    
    console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${exportResult.files.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    console.log('\nüìã –ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
    exportResult.files.forEach(file => {
      console.log(`  üìÑ ${file.path} (${file.type}) - ${Math.round(file.content.length / 1024)} KB`);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const outputDir = path.join(__dirname, '..', 'temp', 'python-export-test');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    exportResult.files.forEach(file => {
      const filePath = path.join(outputDir, file.path);
      fs.writeFileSync(filePath, file.content);
    });
    
    console.log(`üíæ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputDir}`);
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(tempJsPath);
    
    return exportResult;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —ç–∫—Å–ø–æ—Ä—Ç–∞
async function testPythonExportAPI() {
  console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Python...\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    const botId = `python-test-${Date.now()}`;
    const botData = {
      ...testBotSchema,
      id: botId
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞
    const botsDir = path.join(__dirname, '..', 'data', 'bots');
    if (!fs.existsSync(botsDir)) {
      fs.mkdirSync(botsDir, { recursive: true });
    }
    
    const botPath = path.join(botsDir, `bot_${botId}.json`);
    fs.writeFileSync(botPath, JSON.stringify(botData, null, 2));
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω:', botId);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportRequest = await makeRequest({
      hostname: 'localhost',
      port: 3002,
      path: `/api/export/${botId}/python`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, JSON.stringify({
      options: {
        includeComments: true,
        includeAdvancedFeatures: true,
        includeIntegrations: true,
        includeTypeHints: true,
        useAsyncio: false,
        pythonVersion: '3.9'
      }
    }));
    
    if (exportRequest.statusCode === 200) {
      console.log('‚úÖ API —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: ${Math.round(exportRequest.data.length / 1024)} KB`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤
      const archivePath = path.join(__dirname, '..', 'temp', `python-export-${Date.now()}.zip`);
      fs.writeFileSync(archivePath, exportRequest.data);
      console.log(`üíæ –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${archivePath}`);
      
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ API —ç–∫—Å–ø–æ—Ä—Ç–∞:', exportRequest.statusCode);
      console.error('–û—Ç–≤–µ—Ç:', exportRequest.data);
      return false;
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Python –∫–æ–¥–∞
function analyzePythonCodeQuality(exportResult) {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ Python –∫–æ–¥–∞...\n');
  
  const analysis = {
    files: exportResult.files.length,
    totalLines: 0,
    features: [],
    issues: [],
    score: 0
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
  const mainFile = exportResult.files.find(f => f.path === 'main.py');
  if (mainFile) {
    const lines = mainFile.content.split('\n');
    analysis.totalLines = lines.length;
    
    console.log(`üìÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: ${lines.length} —Å—Ç—Ä–æ–∫`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    const pythonChecks = [
      { pattern: /class \w+:/, name: '–ö–ª–∞—Å—Å—ã Python', found: false },
      { pattern: /def \w+\(self/, name: '–ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤', found: false },
      { pattern: /from typing import/, name: 'Type hints', found: false },
      { pattern: /@dataclass/, name: 'Dataclasses', found: false },
      { pattern: /import telebot/, name: 'pyTelegramBotAPI', found: false },
      { pattern: /logging\./, name: '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', found: false },
      { pattern: /sqlite3/, name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', found: false },
      { pattern: /try:.*except/, name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', found: false },
      { pattern: /f".*{.*}"/, name: 'F-strings', found: false },
      { pattern: /if __name__ == "__main__":/, name: 'Main guard', found: false }
    ];
    
    pythonChecks.forEach(check => {
      if (check.pattern.test(mainFile.content)) {
        check.found = true;
        analysis.features.push(check.name);
      }
    });
    
    console.log('üêç Python –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:');
    pythonChecks.forEach(check => {
      const icon = check.found ? '‚úÖ' : '‚ùå';
      console.log(`  ${icon} ${check.name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    const issueChecks = [
      { pattern: /print\(/, name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ print() –≤–º–µ—Å—Ç–æ logging', severity: 'warning' },
      { pattern: /except:/, name: '–û–±—â–∏–π except –±–µ–∑ —Ç–∏–ø–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è', severity: 'warning' },
      { pattern: /TODO|FIXME/, name: 'TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', severity: 'info' }
    ];
    
    issueChecks.forEach(check => {
      if (check.pattern.test(mainFile.content)) {
        analysis.issues.push({
          name: check.name,
          severity: check.severity
        });
      }
    });
    
    if (analysis.issues.length > 0) {
      console.log('\n‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      analysis.issues.forEach(issue => {
        const icon = issue.severity === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
        console.log(`  ${icon} ${issue.name}`);
      });
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º requirements.txt
  const reqFile = exportResult.files.find(f => f.path === 'requirements.txt');
  if (reqFile) {
    const requirements = reqFile.content.split('\n').filter(line => line.trim());
    console.log(`\nüì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${requirements.length}`);
    requirements.forEach(req => {
      console.log(`  üìå ${req}`);
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º README
  const readmeFile = exportResult.files.find(f => f.path === 'README.md');
  if (readmeFile) {
    const readmeLines = readmeFile.content.split('\n').length;
    console.log(`\nüìñ README: ${readmeLines} —Å—Ç—Ä–æ–∫`);
    
    const docChecks = [
      { pattern: /## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç/, name: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ' },
      { pattern: /## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞/, name: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥' },
      { pattern: /## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è/, name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞' },
      { pattern: /## üêõ –û—Ç–ª–∞–¥–∫–∞/, name: '–û—Ç–ª–∞–¥–∫–∞' }
    ];
    
    console.log('üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:');
    docChecks.forEach(check => {
      const found = check.pattern.test(readmeFile.content);
      const icon = found ? '‚úÖ' : '‚ùå';
      console.log(`  ${icon} ${check.name}`);
    });
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
  const maxScore = 100;
  let score = 0;
  
  // –û—Ü–µ–Ω–∫–∞ –∑–∞ —Ñ–∞–π–ª—ã (20 –±–∞–ª–ª–æ–≤)
  score += Math.min(20, analysis.files * 4);
  
  // –û—Ü–µ–Ω–∫–∞ –∑–∞ Python –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (50 –±–∞–ª–ª–æ–≤)
  score += Math.min(50, analysis.features.length * 5);
  
  // –û—Ü–µ–Ω–∫–∞ –∑–∞ —Ä–∞–∑–º–µ—Ä –∫–æ–¥–∞ (20 –±–∞–ª–ª–æ–≤)
  score += Math.min(20, Math.floor(analysis.totalLines / 10));
  
  // –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã (–¥–æ -10 –±–∞–ª–ª–æ–≤)
  const warnings = analysis.issues.filter(i => i.severity === 'warning').length;
  score -= Math.min(10, warnings * 5);
  
  // –ë–æ–Ω—É—Å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–ª–µ–º (10 –±–∞–ª–ª–æ–≤)
  if (analysis.issues.length === 0) {
    score += 10;
  }
  
  analysis.score = Math.max(0, Math.min(maxScore, score));
  
  console.log(`\nüéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${analysis.score}/${maxScore} (${Math.round(analysis.score/maxScore*100)}%)`);
  
  if (analysis.score >= 80) {
    console.log('üéâ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ Python –∫–æ–¥–∞!');
  } else if (analysis.score >= 60) {
    console.log('üëç –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞, –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π');
  } else {
    console.log('‚ö†Ô∏è –ö–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  }
  
  return analysis;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('üêç –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Python\n');
  console.log('='.repeat(60));
  
  let allTestsPassed = true;
  
  // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
  const tsExportResult = await testTypeScriptPythonExporter();
  if (!tsExportResult) {
    allTestsPassed = false;
  } else {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    analyzePythonCodeQuality(tsExportResult);
  }
  
  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–∫—Å–ø–æ—Ä—Ç–∞
  const apiTest = await testPythonExportAPI();
  if (!apiTest) {
    allTestsPassed = false;
  }
  
  console.log('\n' + '='.repeat(60));
  if (allTestsPassed) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Python —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ TypeScript —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ API —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('‚úÖ Python –∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è');
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Python —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    console.log('‚Ä¢ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Python –∫–æ–¥');
    console.log('‚Ä¢ Type hints –¥–ª—è –ª—É—á—à–µ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏');
    console.log('‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ Python –ø—Ä–∞–∫—Ç–∏–∫–∏');
    console.log('‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è');
    console.log('‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
    console.log('‚Ä¢ SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π');
  } else {
    console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã Python —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∏');
    console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ –∏ API');
  }
  
  console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  main();
}

module.exports = {
  testTypeScriptPythonExporter,
  testPythonExportAPI,
  analyzePythonCodeQuality,
  testBotSchema
};