/**
 * –¢–µ—Å—Ç BotRuntimeManager - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Schema Engine —Å —Å–∏—Å—Ç–µ–º–æ–π –±–æ—Ç–æ–≤
 */

import { BotRuntimeManager, BotRuntimeConfig } from './core/runtime/BotRuntimeManager';
import { AdapterRegistry } from './core/adapters/AdapterRegistry';
import { MessengerAdapter } from './core/adapters/MessengerAdapter';
import { MessengerPlatform, PlatformCredentials, BotSchema, IncomingMessage } from './core/types';

console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BotRuntimeManager...\n');

// –ú–æ–∫ –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockTelegramAdapter extends MessengerAdapter {
  private isPolling = false;

  constructor() {
    super('telegram');
  }

  async initialize(credentials: PlatformCredentials): Promise<void> {
    console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mock Telegram –∞–¥–∞–ø—Ç–µ—Ä–∞');
    this.credentials = credentials;
    this.isInitialized = true;
  }

  async validateCredentials(credentials: PlatformCredentials): Promise<boolean> {
    return !!credentials.telegram?.token;
  }

  getCapabilities() {
    return {
      supportsInlineButtons: true,
      supportsMedia: true,
      supportsFiles: true,
      supportsWebhooks: true,
      supportsPolling: true,
      maxMessageLength: 4096,
      supportedMediaTypes: ['photo', 'video', 'audio', 'document']
    };
  }

  async sendMessage(chatId: string, message: any): Promise<void> {
    console.log(`üì§ [Mock Telegram] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ${chatId}:`, message.text);
  }

  async sendMedia(chatId: string, media: any): Promise<void> {
    console.log(`üì∏ [Mock Telegram] –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤ ${chatId}:`, media.type, media.url);
  }

  startPolling(): void {
    this.isPolling = true;
    console.log('üì° [Mock Telegram] Polling –∑–∞–ø—É—â–µ–Ω');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      this.simulateIncomingMessage('/start');
    }, 1000);
  }

  stopPolling(): void {
    this.isPolling = false;
    console.log('üì° [Mock Telegram] Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  async setWebhook(url: string): Promise<boolean> {
    console.log(`üîó [Mock Telegram] Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${url}`);
    return true;
  }

  async deleteWebhook(): Promise<boolean> {
    console.log('üîó [Mock Telegram] Webhook —É–¥–∞–ª–µ–Ω');
    return true;
  }

  async handleWebhook(request: any): Promise<void> {
    console.log('üîó [Mock Telegram] –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook:', request);
  }

  async dispose(): Promise<void> {
    this.stopPolling();
    this.removeAllListeners();
    this.isInitialized = false;
    console.log('üóëÔ∏è [Mock Telegram] –ê–¥–∞–ø—Ç–µ—Ä –æ—á–∏—â–µ–Ω');
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  simulateIncomingMessage(text: string): void {
    const message: IncomingMessage = {
      id: 'msg-' + Date.now(),
      platform: 'telegram',
      chatId: 'test-chat-123',
      userId: 'test-user-456',
      text,
      type: 'text',
      timestamp: new Date().toISOString()
    };

    console.log(`üì® [Mock Telegram] –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${text}`);
    this.emitMessage(message);
  }
}

async function setupMockAdapter() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mock –∞–¥–∞–ø—Ç–µ—Ä–∞...');
  
  const registry = AdapterRegistry.getInstance();
  registry.registerAdapter('telegram', MockTelegramAdapter);
  
  console.log('‚úÖ Mock –∞–¥–∞–ø—Ç–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
}

async function testBotRuntimeManager() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BotRuntimeManager...\n');

  try {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∞–¥–∞–ø—Ç–µ—Ä
    await setupMockAdapter();

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const runtimeManager = BotRuntimeManager.getInstance();
    console.log('‚úÖ BotRuntimeManager –ø–æ–ª—É—á–µ–Ω');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ö–µ–º—É –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const testSchema: any = {
      id: 'test-bot-schema',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç',
      nodes: [
        {
          id: 'trigger-start',
          type: 'trigger-command',
          data: {
            command: '/start'
          },
          position: { x: 0, y: 0 }
        },
        {
          id: 'action-welcome',
          type: 'action-send-message',
          data: {
            message: '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –ö–∞–∫ –¥–µ–ª–∞?'
          },
          position: { x: 200, y: 0 }
        }
      ],
      edges: [
        {
          id: 'edge-start-welcome',
          source: 'trigger-start',
          target: 'action-welcome'
        }
      ],
      variables: {},
      settings: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç',
        description: '–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        platforms: ['telegram'],
        mode: 'polling',
        variables: {}
      },
      version: '1.0.0',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
    const botConfig: BotRuntimeConfig = {
      botId: 'test-bot-001',
      schema: testSchema,
      platforms: [
        {
          platform: 'telegram',
          credentials: {
            telegram: {
              token: 'test-token-123'
            }
          },
          mode: 'polling'
        }
      ]
    };

    console.log('üìã –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...');
    await runtimeManager.startBot(botConfig);

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤...');
    const status = runtimeManager.getActiveBotsStatus();
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã:', status);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ö–µ–º...');
    const stats = runtimeManager.getExecutionStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...');
    await runtimeManager.stopBot('test-bot-001');

    console.log('\nüéâ –¢–µ—Å—Ç BotRuntimeManager –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ BotRuntimeManager:', error);
    return false;
  }
}

async function testBotRestart() {
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...');

  try {
    const runtimeManager = BotRuntimeManager.getInstance();

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ö–µ–º—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const initialSchema: any = {
      id: 'restart-test-schema',
      name: '–°—Ö–µ–º–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞',
      nodes: [
        {
          id: 'trigger-help',
          type: 'trigger-command',
          data: {
            command: '/help'
          },
          position: { x: 0, y: 0 }
        },
        {
          id: 'action-help',
          type: 'action-send-message',
          data: {
            message: '–≠—Ç–æ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–º–æ—â–∏'
          },
          position: { x: 200, y: 0 }
        }
      ],
      edges: [
        {
          id: 'edge-help',
          source: 'trigger-help',
          target: 'action-help'
        }
      ],
      variables: {},
      settings: {
        name: '–¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞',
        description: '–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞',
        platforms: ['telegram'],
        mode: 'polling',
        variables: {}
      },
      version: '1.0.0',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const botConfig: BotRuntimeConfig = {
      botId: 'restart-test-bot',
      schema: initialSchema,
      platforms: [
        {
          platform: 'telegram',
          credentials: {
            telegram: {
              token: 'restart-test-token'
            }
          },
          mode: 'polling'
        }
      ]
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await runtimeManager.startBot(botConfig);
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–µ—Ä–≤–æ–π —Å—Ö–µ–º–æ–π');

    // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ö–µ–º—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const updatedSchema: any = {
      ...initialSchema,
      nodes: [
        {
          id: 'trigger-help',
          type: 'trigger-command',
          data: {
            command: '/help'
          },
          position: { x: 0, y: 0 }
        },
        {
          id: 'action-help-new',
          type: 'action-send-message',
          data: {
            message: '–≠—Ç–æ –ù–û–í–ê–Ø –≤–µ—Ä—Å–∏—è –ø–æ–º–æ—â–∏! üéâ'
          },
          position: { x: 200, y: 0 }
        }
      ],
      edges: [
        {
          id: 'edge-help-new',
          source: 'trigger-help',
          target: 'action-help-new'
        }
      ],
      version: '2.0.0',
      updatedAt: new Date().toISOString()
    };

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π
    await runtimeManager.restartBot('restart-test-bot', updatedSchema);
    console.log('‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await runtimeManager.stopBot('restart-test-bot');
    console.log('‚úÖ –¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');

    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ BotRuntimeManager...\n');

  const results = {
    basic: await testBotRuntimeManager(),
    restart: await testBotRestart()
  };

  console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:', results.basic ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');
  console.log('‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞:', results.restart ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù');

  const allPassed = Object.values(results).every(result => result);
  
  if (allPassed) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã BotRuntimeManager —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    console.log('\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ BotRuntimeManager:');
    console.log('  ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–æ–≤ (–∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)');
    console.log('  üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Schema Engine —Å –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤');
    console.log('  üì® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback\'–æ–≤');
    console.log('  üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤');
    console.log('  üîÑ –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞');
    console.log('  üõ°Ô∏è –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏');
    console.log('  üì° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ polling –∏ webhook —Ä–µ–∂–∏–º–æ–≤');
  } else {
    console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
  }

  return allPassed;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().then(success => {
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
  process.exit(1);
});