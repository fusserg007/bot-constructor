/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö
 */

import { SchemaVersioning } from './core/versioning/SchemaVersioning';
import { NodeDefinitions } from './core/schema/NodeDefinitions';

async function testSchemaSimple() {
  console.log('üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∑–ª–æ–≤
    console.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —É–∑–ª–æ–≤:');
    testNodeDefinitions();

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
    testVersioning();

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∑–ª–æ–≤
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∑–ª–æ–≤:');
    testNodeStructure();

    console.log('\nüéâ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ö–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å—Ö–µ–º:', error);
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —É–∑–ª–æ–≤
 */
function testNodeDefinitions() {
  const nodeTypes = Object.keys(NodeDefinitions);
  console.log(`  üìù –î–æ—Å—Ç—É–ø–Ω–æ —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤: ${nodeTypes.length}`);
  
  for (const nodeType of nodeTypes) {
    const definition = NodeDefinitions[nodeType];
    console.log(`    ‚úÖ ${definition.name} (${definition.type})`);
    console.log(`       –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${definition.metadata.category}`);
    console.log(`       –ò–∫–æ–Ω–∫–∞: ${definition.metadata.icon}`);
    console.log(`       –í—Ö–æ–¥—ã: ${definition.inputs.length}, –í—ã—Ö–æ–¥—ã: ${definition.outputs.length}`);
    console.log(`       –ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${Object.keys(definition.configFields).length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if (!definition.type || !definition.name) {
      console.log(`       ‚ùå –ù–µ–ø–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–∞`);
    }
    
    if (!definition.metadata.description) {
      console.log(`       ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ`);
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function testVersioning() {
  console.log(`  üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${SchemaVersioning.getCurrentVersion()}`);
  
  const supportedVersions = SchemaVersioning.getSupportedVersions();
  console.log(`  üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏: ${supportedVersions.map(v => v.version).join(', ')}`);

  // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
  const oldSchema = { nodes: [], edges: [] };
  const detectedVersion = SchemaVersioning.detectSchemaVersion(oldSchema);
  console.log(`  üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã: ${detectedVersion}`);

  const needsMigration = SchemaVersioning.needsMigration(oldSchema);
  console.log(`  üîÑ –ù—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: ${needsMigration}`);

  // –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
  const comparison = SchemaVersioning.compareVersions('1.0.0', '0.2.0');
  console.log(`  üî¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π 1.0.0 vs 0.2.0: ${comparison}`);

  // –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const compatible = SchemaVersioning.areVersionsCompatible('1.0.0', '1.0.0');
  console.log(`  üîó –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π 1.0.0 –∏ 1.0.0: ${compatible}`);

  // –¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  const warnings = SchemaVersioning.getVersionWarnings('0.1.0');
  if (warnings.length > 0) {
    console.log(`  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ 0.1.0:`);
    warnings.forEach(warning => console.log(`    - ${warning}`));
  }

  console.log('  ‚úÖ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∑–ª–æ–≤
 */
function testNodeStructure() {
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥—ã
  const commandTrigger = NodeDefinitions['trigger-command'];
  console.log(`  üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã:`);
  console.log(`    –ù–∞–∑–≤–∞–Ω–∏–µ: ${commandTrigger.name}`);
  console.log(`    –û–ø–∏—Å–∞–Ω–∏–µ: ${commandTrigger.metadata.description}`);
  console.log(`    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${commandTrigger.metadata.supportedPlatforms}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
  console.log(`    –í—ã—Ö–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã:`);
  commandTrigger.outputs.forEach(port => {
    console.log(`      - ${port.name} (${port.type}, ${port.dataType})`);
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log(`    –ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`);
  Object.entries(commandTrigger.configFields).forEach(([key, field]) => {
    console.log(`      - ${key}: ${field.label} (${field.type})`);
  });

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = NodeDefinitions['action-send-message'];
  console.log(`\n  üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`);
  console.log(`    –ù–∞–∑–≤–∞–Ω–∏–µ: ${sendMessage.name}`);
  console.log(`    –í—Ö–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã: ${sendMessage.inputs.length}`);
  console.log(`    –í—ã—Ö–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã: ${sendMessage.outputs.length}`);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
  const httpIntegration = NodeDefinitions['integration-http'];
  console.log(`\n  üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:`);
  console.log(`    –ù–∞–∑–≤–∞–Ω–∏–µ: ${httpIntegration.name}`);
  console.log(`    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${httpIntegration.metadata.category}`);
  console.log(`    –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${httpIntegration.metadata.subcategory}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é HTTP —É–∑–ª–∞
  const httpConfig = httpIntegration.configFields;
  console.log(`    HTTP –º–µ—Ç–æ–¥—ã: ${httpConfig.method.options?.map(o => o.value).join(', ')}`);

  console.log('  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å—Ö–µ–º—ã
 */
function demonstrateSchemaCreation() {
  console.log('\nüèóÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã:');

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ –æ—Ç–≤–µ—Ç–æ–º
  const simpleSchema = {
    id: 'demo-schema',
    name: '–î–µ–º–æ —Å—Ö–µ–º–∞',
    nodes: [
      {
        id: 'start-trigger',
        type: 'trigger-command',
        position: { x: 100, y: 100 },
        config: {
          command: '/start',
          caseSensitive: false,
          description: '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞'
        }
      },
      {
        id: 'welcome-message',
        type: 'action-send-message',
        position: { x: 300, y: 100 },
        config: {
          text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!',
          parseMode: 'HTML'
        }
      }
    ],
    connections: [
      {
        id: 'start-to-welcome',
        sourceNodeId: 'start-trigger',
        sourcePortId: 'trigger',
        targetNodeId: 'welcome-message',
        targetPortId: 'trigger'
      }
    ]
  };

  console.log(`  üìã –°–æ–∑–¥–∞–Ω–∞ —Å—Ö–µ–º–∞: ${simpleSchema.name}`);
  console.log(`  üîß –£–∑–ª–æ–≤: ${simpleSchema.nodes.length}`);
  console.log(`  üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${simpleSchema.connections.length}`);
  console.log('  ‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSchemaSimple().catch(console.error);