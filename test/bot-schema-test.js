const fs = require('fs');
const path = require('path');

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–æ—Ç–∞ ‚Ññ1...\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –±–æ—Ç–∞
const botPath = path.join(__dirname, '..', 'data', 'bots', 'bot_01_main_test_bot.json');
const botData = JSON.parse(fs.readFileSync(botPath, 'utf8'));

console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:');
console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${botData.name}`);
console.log(`   ID: ${botData.id}`);
console.log(`   –°—Ç–∞—Ç—É—Å: ${botData.status}`);
console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä: ${botData.useVisualEditor}\n`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ö–µ–º—ã
const config = botData.configuration;
console.log('üîß –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã:');
console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: ${config.nodes.length}`);
console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${config.connections.length}\n`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∑–ª—ã
console.log('üì¶ –£–∑–ª—ã —Å—Ö–µ–º—ã:');
config.nodes.forEach((node, index) => {
    const name = node.config.name || node.config.description || node.type;
    console.log(`   ${index + 1}. ${name} (${node.type})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if (node.type === 'send_message_with_keyboard') {
        const buttons = node.config.keyboard?.buttons || [];
        const buttonCount = buttons.flat().length;
        console.log(`      ‚îî‚îÄ –ö–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é: ${buttonCount}`);
    }
    
    if (node.type === 'callback_handler') {
        console.log(`      ‚îî‚îÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: ${node.config.callback_data}`);
    }
});

console.log('\nüîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:');
config.connections.forEach((conn, index) => {
    const sourceNode = config.nodes.find(n => n.id === conn.sourceNodeId);
    const targetNode = config.nodes.find(n => n.id === conn.targetNodeId);
    
    const sourceName = sourceNode?.config?.name || sourceNode?.type || 'Unknown';
    const targetName = targetNode?.config?.name || targetNode?.type || 'Unknown';
    
    console.log(`   ${index + 1}. ${sourceName} ‚Üí ${targetName}`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç
console.log('\nüë§ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞
const startNode = config.nodes.find(n => n.type === 'start');
if (startNode) {
    console.log('   ‚úÖ –ï—Å—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª');
} else {
    console.log('   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–Ω—é
const menuNode = config.nodes.find(n => n.type === 'send_message_with_keyboard');
if (menuNode) {
    console.log('   ‚úÖ –ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é');
    const buttons = menuNode.config.keyboard?.buttons || [];
    const buttonTexts = buttons.flat().map(b => b.text);
    console.log(`   üì± –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é: ${buttonTexts.join(', ')}`);
} else {
    console.log('   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
const russianNames = config.nodes.filter(n => 
    n.config.name && /[–∞-—è—ë]/i.test(n.config.name)
).length;

console.log(`   üá∑üá∫ –£–∑–ª–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: ${russianNames}/${config.nodes.length}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏
const emojiNodes = config.nodes.filter(n => 
    n.config.name && /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/u.test(n.config.name)
).length;

console.log(`   üòä –£–∑–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏: ${emojiNodes}/${config.nodes.length}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ—Ç–æ–∫–∞
console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–æ—Ç–æ–∫–∞:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª —Å–≤—è–∑–∞–Ω —Å –º–µ–Ω—é
const startConnection = config.connections.find(c => c.sourceNodeId === startNode?.id);
if (startConnection && startConnection.targetNodeId === menuNode?.id) {
    console.log('   ‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é');
} else {
    console.log('   ‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞—Ä—Ç–æ–≤—ã–º —É–∑–ª–æ–º –∏ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
const callbackHandlers = config.nodes.filter(n => n.type === 'callback_handler');
console.log(`   üéõÔ∏è  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫: ${callbackHandlers.length}`);

callbackHandlers.forEach(handler => {
    const hasConnection = config.connections.some(c => c.sourceNodeId === handler.id);
    if (hasConnection) {
        console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "${handler.config.callback_data}" –∏–º–µ–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ`);
    } else {
        console.log(`   ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "${handler.config.callback_data}" –Ω–µ –∏–º–µ–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`);
    }
});

console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ö–µ–º—ã:');
let score = 0;
let maxScore = 6;

if (startNode) score++;
if (menuNode) score++;
if (russianNames >= config.nodes.length * 0.8) score++;
if (emojiNodes >= config.nodes.length * 0.5) score++;
if (callbackHandlers.length > 0) score++;
if (config.connections.length >= config.nodes.length - 1) score++;

const percentage = Math.round((score / maxScore) * 100);
console.log(`   –û—Ü–µ–Ω–∫–∞: ${score}/${maxScore} (${percentage}%)`);

if (percentage >= 90) {
    console.log('   üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ö–µ–º–∞! –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
} else if (percentage >= 70) {
    console.log('   üëç –•–æ—Ä–æ—à–∞—è —Å—Ö–µ–º–∞, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è');
} else {
    console.log('   üîß –°—Ö–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
}

console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');