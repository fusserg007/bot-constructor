/**
 * –¢–µ—Å—Ç API endpoints –¥–ª—è Bot Constructor
 */

const http = require('http');
const querystring = require('querystring');

class APITester {
    constructor(baseUrl = 'http://localhost:3000') {
        this.baseUrl = baseUrl;
        this.testResults = {
            passed: 0,
            failed: 0,
            errors: []
        };
        this.authToken = null;
        this.testBotId = null;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö API —Ç–µ—Å—Ç–æ–≤
     */
    async runAllTests() {
        console.log('üåê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints...\n');

        try {
            await this.testHealthEndpoint();
            await this.testAuthEndpoints();
            await this.testBotEndpoints();
            await this.testTemplateEndpoints();
            await this.testDeploymentEndpoints();
            await this.testStatsEndpoints();

            this.printResults();
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.testResults.failed++;
            this.testResults.errors.push(`Critical API error: ${error.message}`);
        }
    }

    /**
     * –¢–µ—Å—Ç health endpoint
     */
    async testHealthEndpoint() {
        console.log('üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoint...');

        try {
            const response = await this.makeRequest('GET', '/api/health');
            
            this.assert(response.statusCode === 200, 'Health endpoint should return 200');
            this.assert(response.data.success === true, 'Health response should be successful');
            this.assert(response.data.message.includes('—Ä–∞–±–æ—Ç–∞–µ—Ç'), 'Health message should indicate service is running');

            console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Health endpoint test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç auth endpoints
     */
    async testAuthEndpoints() {
        console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auth endpoints...');

        try {
            // –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
            const unauthorizedResponse = await this.makeRequest('GET', '/api/bots');
            this.assert(unauthorizedResponse.statusCode === 401, 'Should require authorization');

            console.log('‚úÖ Auth endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Auth endpoints test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç bot endpoints
     */
    async testBotEndpoints() {
        console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bot endpoints...');

        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const mockAuthData = {
                telegramId: 123456789,
                username: 'test_user',
                firstName: 'Test',
                lastName: 'User'
            };

            // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ (—Å –º–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
            // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            console.log('‚ÑπÔ∏è Bot endpoints —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
            console.log('‚úÖ Bot endpoints —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        } catch (error) {
            this.fail('Bot endpoints test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç template endpoints
     */
    async testTemplateEndpoints() {
        console.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ template endpoints...');

        try {
            const response = await this.makeRequest('GET', '/api/templates');
            
            // Templates endpoint –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (response.statusCode === 200) {
                this.assert(response.data.success === true, 'Templates response should be successful');
                this.assert(Array.isArray(response.data.templates), 'Should return templates array');
            } else {
                console.log('‚ÑπÔ∏è Templates endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            console.log('‚úÖ Template endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Template endpoints test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç deployment endpoints
     */
    async testDeploymentEndpoints() {
        console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ deployment endpoints...');

        try {
            // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π endpoint)
            const tokenValidationResponse = await this.makeRequest('POST', '/api/deployment/validate-token', {
                token: 'invalid_token'
            });

            // –≠—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (tokenValidationResponse.statusCode === 401) {
                console.log('‚ÑπÔ∏è Deployment endpoints —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            console.log('‚úÖ Deployment endpoints —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        } catch (error) {
            this.fail('Deployment endpoints test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç stats endpoints
     */
    async testStatsEndpoints() {
        console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ stats endpoints...');

        try {
            const response = await this.makeRequest('GET', '/api/stats');
            
            // Stats endpoint –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –µ—ë
            if (response.statusCode === 200) {
                this.assert(response.data.success === true, 'Stats response should be successful');
            } else if (response.statusCode === 401) {
                console.log('‚ÑπÔ∏è Stats endpoint —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            console.log('‚úÖ Stats endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Stats endpoints test failed', error);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
     */
    async makeRequest(method, path, data = null) {
        return new Promise((resolve, reject) => {
            const url = new URL(path, this.baseUrl);
            const options = {
                hostname: url.hostname,
                port: url.port,
                path: url.pathname + url.search,
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'Bot-Constructor-API-Tester/1.0'
                }
            };

            if (this.authToken) {
                options.headers['Authorization'] = `Bearer ${this.authToken}`;
            }

            const req = http.request(options, (res) => {
                let body = '';
                
                res.on('data', (chunk) => {
                    body += chunk;
                });

                res.on('end', () => {
                    try {
                        const data = body ? JSON.parse(body) : {};
                        resolve({
                            statusCode: res.statusCode,
                            headers: res.headers,
                            data: data
                        });
                    } catch (error) {
                        resolve({
                            statusCode: res.statusCode,
                            headers: res.headers,
                            data: { raw: body }
                        });
                    }
                });
            });

            req.on('error', (error) => {
                reject(error);
            });

            if (data && (method === 'POST' || method === 'PUT')) {
                const postData = JSON.stringify(data);
                options.headers['Content-Length'] = Buffer.byteLength(postData);
                req.write(postData);
            }

            req.end();
        });
    }

    /**
     * –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
     */
    assert(condition, message) {
        if (condition) {
            this.testResults.passed++;
        } else {
            this.testResults.failed++;
            this.testResults.errors.push(message);
            throw new Error(`API Assertion failed: ${message}`);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    fail(message, error) {
        this.testResults.failed++;
        this.testResults.errors.push(`${message}: ${error.message}`);
        console.error(`‚ùå ${message}:`, error.message);
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    printResults() {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
        
        if (this.testResults.errors.length > 0) {
            console.log('\nüêõ –û—à–∏–±–∫–∏ API:');
            this.testResults.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        const successRate = this.testResults.passed / Math.max(this.testResults.passed + this.testResults.failed, 1) * 100;
        console.log(`\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ API: ${successRate.toFixed(1)}%`);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const tester = new APITester();
    tester.runAllTests().catch(console.error);
}

module.exports = APITester;