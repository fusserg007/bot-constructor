#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

const { FileStorage } = require('../utils/FileStorage');
const fs = require('fs').promises;
const path = require('path');

class TestDataCleaner {
    constructor() {
        this.storage = new FileStorage();
        this.testUserIds = [123456789, 987654321, 999999999]; // ID —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.cleanedItems = {
            users: 0,
            bots: 0,
            logs: 0,
            schemas: 0
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async cleanupAllTestData() {
        console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');

        try {
            await this.cleanupTestUsers();
            await this.cleanupTestBots();
            await this.cleanupTestLogs();
            await this.cleanupTestSchemas();
            await this.cleanupTempFiles();

            this.printCleanupResults();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async cleanupTestUsers() {
        console.log('üë§ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

        try {
            const usersDir = path.join(__dirname, '..', 'data', 'users');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try {
                await fs.access(usersDir);
            } catch (error) {
                console.log('‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const files = await fs.readdir(usersDir);

            for (const file of files) {
                if (file.startsWith('user_') && file.endsWith('.json')) {
                    try {
                        const userPath = path.join(usersDir, file);
                        const userData = await fs.readFile(userPath, 'utf8');
                        const user = JSON.parse(userData);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã–º
                        if (this.testUserIds.includes(user.telegramId) || 
                            user.username?.includes('test') ||
                            user.firstName?.includes('Test')) {
                            
                            await fs.unlink(userPath);
                            this.cleanedItems.users++;
                            console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.telegramId}`);
                        }
                    } catch (error) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
                    }
                }
            }

            console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${this.cleanedItems.users} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
     */
    async cleanupTestBots() {
        console.log('ü§ñ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤...');

        try {
            const botsDir = path.join(__dirname, '..', 'data', 'bots');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try {
                await fs.access(botsDir);
            } catch (error) {
                console.log('‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const files = await fs.readdir(botsDir);

            for (const file of files) {
                if (file.startsWith('bot_') && file.endsWith('.json')) {
                    try {
                        const botPath = path.join(botsDir, file);
                        const botData = await fs.readFile(botPath, 'utf8');
                        const bot = JSON.parse(botData);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç —Ç–µ—Å—Ç–æ–≤—ã–º
                        if (this.testUserIds.includes(bot.userId) ||
                            bot.name?.toLowerCase().includes('test') ||
                            bot.token?.includes('TEST_TOKEN') ||
                            bot.description?.includes('—Ç–µ—Å—Ç')) {
                            
                            await fs.unlink(botPath);
                            this.cleanedItems.bots++;
                            console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç: ${bot.name}`);
                        }
                    } catch (error) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
                    }
                }
            }

            console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${this.cleanedItems.bots} —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤\n`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–æ—Ç–æ–≤:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
     */
    async cleanupTestLogs() {
        console.log('üìù –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤...');

        try {
            const logsDir = path.join(__dirname, '..', 'data', 'logs');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try {
                await fs.access(logsDir);
            } catch (error) {
                console.log('‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const files = await fs.readdir(logsDir);

            for (const file of files) {
                if (file.endsWith('.json')) {
                    try {
                        const logPath = path.join(logsDir, file);
                        
                        // –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
                        if (file.includes('test') || 
                            file.includes('TEST') ||
                            file.startsWith('system_')) {
                            
                            await fs.unlink(logPath);
                            this.cleanedItems.logs++;
                            console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω –ª–æ–≥ —Ñ–∞–π–ª: ${file}`);
                        }
                    } catch (error) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
                    }
                }
            }

            console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${this.cleanedItems.logs} –ª–æ–≥ —Ñ–∞–π–ª–æ–≤\n`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ö–µ–º
     */
    async cleanupTestSchemas() {
        console.log('üé® –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º...');

        try {
            const schemasDir = path.join(__dirname, '..', 'data', 'visual_schemas');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try {
                await fs.access(schemasDir);
            } catch (error) {
                console.log('‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—Ö–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const files = await fs.readdir(schemasDir);

            for (const file of files) {
                if (file.startsWith('schema_') && file.endsWith('.json')) {
                    try {
                        const schemaPath = path.join(schemasDir, file);
                        
                        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
                        if (file.includes('test') || file.includes('TEST')) {
                            await fs.unlink(schemaPath);
                            this.cleanedItems.schemas++;
                            console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${file}`);
                        }
                    } catch (error) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ö–µ–º—ã ${file}:`, error.message);
                    }
                }
            }

            console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${this.cleanedItems.schemas} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ö–µ–º\n`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ö–µ–º:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async cleanupTempFiles() {
        console.log('üóÇÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

        try {
            const tempPatterns = [
                path.join(__dirname, '..', 'data', '**', '*.tmp'),
                path.join(__dirname, '..', 'data', '**', '*.temp'),
                path.join(__dirname, '..', 'data', '**', '.DS_Store'),
                path.join(__dirname, '..', 'data', '**', 'Thumbs.db')
            ];

            // –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ glob –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            const dataDir = path.join(__dirname, '..', 'data');
            await this.cleanupTempFilesRecursive(dataDir);

            console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã\n');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
        }
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async cleanupTempFilesRecursive(dir) {
        try {
            const items = await fs.readdir(dir, { withFileTypes: true });

            for (const item of items) {
                const fullPath = path.join(dir, item.name);

                if (item.isDirectory()) {
                    await this.cleanupTempFilesRecursive(fullPath);
                } else if (item.isFile()) {
                    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if (item.name.endsWith('.tmp') || 
                        item.name.endsWith('.temp') ||
                        item.name === '.DS_Store' ||
                        item.name === 'Thumbs.db') {
                        
                        await fs.unlink(fullPath);
                        console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${item.name}`);
                    }
                }
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        }
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏
     */
    printCleanupResults() {
        console.log('=' .repeat(50));
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò');
        console.log('=' .repeat(50));

        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${this.cleanedItems.users}`);
        console.log(`ü§ñ –ë–æ—Ç—ã: ${this.cleanedItems.bots}`);
        console.log(`üìù –õ–æ–≥–∏: ${this.cleanedItems.logs}`);
        console.log(`üé® –°—Ö–µ–º—ã: ${this.cleanedItems.schemas}`);

        const totalCleaned = Object.values(this.cleanedItems).reduce((sum, count) => sum + count, 0);
        console.log(`üìà –í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ: ${totalCleaned} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

        if (totalCleaned > 0) {
            console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log('üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
        } else {
            console.log('\n‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω—ã');
        }

        console.log('=' .repeat(50));
    }

    /**
     * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
     */
    async interactiveCleanup() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        return new Promise((resolve) => {
            rl.question('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/N): ', (answer) => {
                rl.close();
                
                if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
                    resolve(true);
                } else {
                    console.log('‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                    resolve(false);
                }
            });
        });
    }
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
if (require.main === module) {
    const cleaner = new TestDataCleaner();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    const forceCleanup = args.includes('--force') || args.includes('-f');

    if (forceCleanup) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cleaner.cleanupAllTestData().catch((error) => {
            console.error('üí• –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
            process.exit(1);
        });
    } else {
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        cleaner.interactiveCleanup().then((confirmed) => {
            if (confirmed) {
                return cleaner.cleanupAllTestData();
            }
        }).catch((error) => {
            console.error('üí• –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
            process.exit(1);
        });
    }
}

module.exports = TestDataCleaner;