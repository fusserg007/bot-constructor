/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */

class SimpleMessageTester {
    constructor() {
        this.testResults = {
            passed: 0,
            failed: 0,
            errors: []
        };
    }

    async runAllTests() {
        console.log('üí¨ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...\n');

        try {
            await this.testBasicFunctionality();
            this.printResults();
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            this.testResults.failed++;
            this.testResults.errors.push(`Critical error: ${error.message}`);
        }
    }

    async testBasicFunctionality() {
        console.log('üì® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...');

        try {
            // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
            this.assert(true, 'Basic test should pass');
            console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Basic functionality test failed', error);
        }
    }

    assert(condition, message) {
        if (condition) {
            this.testResults.passed++;
        } else {
            this.testResults.failed++;
            this.testResults.errors.push(message);
            throw new Error(`Assertion failed: ${message}`);
        }
    }

    fail(message, error) {
        this.testResults.failed++;
        this.testResults.errors.push(`${message}: ${error.message}`);
        console.error(`‚ùå ${message}:`, error.message);
    }

    printResults() {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
        
        if (this.testResults.errors.length > 0) {
            console.log('\nüêõ –û—à–∏–±–∫–∏:');
            this.testResults.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        const successRate = (this.testResults.passed / Math.max(this.testResults.passed + this.testResults.failed, 1)) * 100;
        console.log(`\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${successRate.toFixed(1)}%`);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const tester = new SimpleMessageTester();
    tester.runAllTests().catch(console.error);
}

module.exports = SimpleMessageTester;