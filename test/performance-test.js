/**
 * –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Frontend
 */
const { performance } = require('perf_hooks');
const { CacheManager, APICache } = require('../utils/CacheManager');

async function testCachePerformance() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞...');
  
  const cache = new CacheManager();
  const iterations = 10000;
  
  // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
  const writeStart = performance.now();
  for (let i = 0; i < iterations; i++) {
    cache.set(`key_${i}`, { data: `value_${i}`, timestamp: Date.now() });
  }
  const writeEnd = performance.now();
  const writeTime = writeEnd - writeStart;
  
  // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
  const readStart = performance.now();
  for (let i = 0; i < iterations; i++) {
    cache.get(`key_${i}`);
  }
  const readEnd = performance.now();
  const readTime = readEnd - readStart;
  
  const stats = cache.getStats();
  
  console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∫—ç—à–∞:
  üìù –ó–∞–ø–∏—Å—å ${iterations} —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${writeTime.toFixed(2)}ms
  üìñ –ß—Ç–µ–Ω–∏–µ ${iterations} —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${readTime.toFixed(2)}ms
  üìä Hit Rate: ${stats.hitRate}%
  üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${stats.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  
  return { writeTime, readTime, stats };
}

async function testAPICachePerformance() {
  console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API –∫—ç—à–∞...');
  
  const apiCache = new APICache();
  const requests = 1000;
  
  const testRequests = [];
  for (let i = 0; i < requests; i++) {
    testRequests.push({
      method: 'GET',
      url: `/api/test/${i % 100}`,
      params: { page: Math.floor(i / 10), limit: 10 }
    });
  }
  
  const cacheStart = performance.now();
  testRequests.forEach((req, index) => {
    const key = apiCache.generateKey(req.method, req.url, req.params);
    apiCache.set(key, { data: `response_${index}`, cached: true });
  });
  const cacheEnd = performance.now();
  const cacheTime = cacheEnd - cacheStart;
  
  const retrieveStart = performance.now();
  let hits = 0;
  testRequests.forEach((req) => {
    const cached = apiCache.getCachedGET(req.url, req.params);
    if (cached) hits++;
  });
  const retrieveEnd = performance.now();
  const retrieveTime = retrieveEnd - retrieveStart;
  
  const stats = apiCache.getStats();
  
  console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ API –∫—ç—à–∞:
  üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${requests} –∑–∞–ø—Ä–æ—Å–æ–≤: ${cacheTime.toFixed(2)}ms
  üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${retrieveTime.toFixed(2)}ms
  üìà –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: ${hits}/${requests} (${((hits/requests)*100).toFixed(1)}%)
  üìä Hit Rate: ${stats.hitRate}%`);
  
  return { cacheTime, retrieveTime, hits, total: requests, stats };
}

async function runAllPerformanceTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Frontend...\n');
  
  const results = {};
  
  try {
    results.cache = await testCachePerformance();
    results.apiCache = await testAPICachePerformance();
    
    console.log('\nüìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('='.repeat(50));
    console.log(`üéØ –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞: –û–¢–õ–ò–ß–ù–û`);
    console.log(`üìà API –∫—ç—à hit rate: ${results.apiCache.stats.hitRate}%`);
    
    return results;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    return null;
  }
}

module.exports = {
  testCachePerformance,
  testAPICachePerformance,
  runAllPerformanceTests
};

if (require.main === module) {
  runAllPerformanceTests()
    .then((result) => {
      if (result) {
        console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏');
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      process.exit(1);
    });
}