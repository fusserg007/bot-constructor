const fs = require('fs');
const path = require('path');

console.log('üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –±–æ—Ç–∞ ‚Ññ1...\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –±–æ—Ç–∞
const botPath = path.join(__dirname, '..', 'data', 'bots', 'bot_01_main_test_bot.json');
const botData = JSON.parse(fs.readFileSync(botPath, 'utf8'));

// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
console.log('üé≠ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:\n');

// –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
console.log('üì± –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞');
console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /start');

const startNode = botData.configuration.nodes.find(n => n.type === 'start');
if (startNode) {
    console.log('   ‚úÖ –ë–æ—Ç: –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª
    const startConnection = botData.configuration.connections.find(c => c.sourceNodeId === startNode.id);
    if (startConnection) {
        const menuNode = botData.configuration.nodes.find(n => n.id === startConnection.targetNodeId);
        if (menuNode && menuNode.type === 'send_message_with_keyboard') {
            console.log('   üìã –ë–æ—Ç: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
            console.log(`   üí¨ –¢–µ–∫—Å—Ç: "${menuNode.config.text}"`);
            
            const buttons = menuNode.config.keyboard?.buttons || [];
            console.log('   üéõÔ∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:');
            buttons.forEach((row, i) => {
                row.forEach(button => {
                    console.log(`      ‚Ä¢ ${button.text} (${button.callback_data})`);
                });
            });
        }
    }
}

console.log('\nüì± –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "üìñ –°–ø—Ä–∞–≤–∫–∞"');
console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "üìñ –°–ø—Ä–∞–≤–∫–∞"');

const helpHandler = botData.configuration.nodes.find(n => 
    n.type === 'callback_handler' && n.config.callback_data === 'help'
);

if (helpHandler) {
    console.log('   ‚úÖ –ë–æ—Ç: –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞–≤–∫–∏');
    
    const helpConnection = botData.configuration.connections.find(c => c.sourceNodeId === helpHandler.id);
    if (helpConnection) {
        const helpTextNode = botData.configuration.nodes.find(n => n.id === helpConnection.targetNodeId);
        if (helpTextNode) {
            console.log('   üìñ –ë–æ—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
            console.log(`   üí¨ –¢–µ–∫—Å—Ç: "${helpTextNode.config.text.substring(0, 100)}..."`);
        }
    }
}

console.log('\nüì± –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "üß™ –¢–µ—Å—Ç"');
console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "üß™ –¢–µ—Å—Ç"');

const testHandler = botData.configuration.nodes.find(n => 
    n.type === 'callback_handler' && n.config.callback_data === 'test'
);

if (testHandler) {
    console.log('   ‚úÖ –ë–æ—Ç: –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∞');
    
    const testConnection = botData.configuration.connections.find(c => c.sourceNodeId === testHandler.id);
    if (testConnection) {
        const testResponseNode = botData.configuration.nodes.find(n => n.id === testConnection.targetNodeId);
        if (testResponseNode) {
            console.log('   üß™ –ë–æ—Ç: –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
            console.log(`   üí¨ –¢–µ–∫—Å—Ç: "${testResponseNode.config.text.substring(0, 100)}..."`);
        }
    }
}

console.log('\nüì± –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "‚ÑπÔ∏è –û –±–æ—Ç–µ"');
console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "‚ÑπÔ∏è –û –±–æ—Ç–µ"');

const aboutHandler = botData.configuration.nodes.find(n => 
    n.type === 'callback_handler' && n.config.callback_data === 'about'
);

if (aboutHandler) {
    console.log('   ‚úÖ –ë–æ—Ç: –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    
    const aboutConnection = botData.configuration.connections.find(c => c.sourceNodeId === aboutHandler.id);
    if (aboutConnection) {
        const aboutTextNode = botData.configuration.nodes.find(n => n.id === aboutConnection.targetNodeId);
        if (aboutTextNode) {
            console.log('   ‚ÑπÔ∏è  –ë–æ—Ç: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ');
            console.log(`   üí¨ –¢–µ–∫—Å—Ç: "${aboutTextNode.config.text.substring(0, 100)}..."`);
        }
    }
}

// –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
console.log('\nüß† –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —É–∑–ª–æ–≤
const nodeNames = botData.configuration.nodes.map(n => n.config.name || n.type);
const russianNodes = nodeNames.filter(name => /[–∞-—è—ë]/i.test(name));
console.log(`   üìù –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: ${russianNodes.length}/${nodeNames.length} —É–∑–ª–æ–≤`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏
const emojiNodes = nodeNames.filter(name => 
    /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/u.test(name)
);
console.log(`   üòä –≠–º–æ–¥–∑–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö: ${emojiNodes.length}/${nodeNames.length} —É–∑–ª–æ–≤`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞
const menuNode = botData.configuration.nodes.find(n => n.type === 'send_message_with_keyboard');
let buttons = [];
let handlers = [];
let matchingHandlers = [];

if (menuNode) {
    buttons = menuNode.config.keyboard?.buttons?.flat() || [];
    handlers = botData.configuration.nodes.filter(n => n.type === 'callback_handler');
    
    console.log(`   üéõÔ∏è  –ö–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é: ${buttons.length}`);
    console.log(`   üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${handlers.length}`);
    
    matchingHandlers = buttons.filter(button => 
        handlers.some(handler => handler.config.callback_data === button.callback_data)
    );
    
    console.log(`   ‚úÖ –ö–Ω–æ–ø–æ–∫ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: ${matchingHandlers.length}/${buttons.length}`);
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
const backToMenuConnections = botData.configuration.connections.filter(c => 
    c.targetNodeId === menuNode?.id && c.sourceNodeId !== startNode?.id
);

if (backToMenuConnections.length === 0) {
    console.log('   üîÑ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const hasDefaultHandler = botData.configuration.nodes.some(n => 
    n.type === 'callback_handler' && n.config.callback_data === 'default'
);

if (!hasDefaultHandler) {
    console.log('   ‚ùì –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
const hasUserVariables = Object.keys(botData.configuration.variables || {}).length > 0;
if (!hasUserVariables) {
    console.log('   üë§ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏');
}

console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞:');

let uxScore = 0;
let maxUxScore = 8;

// –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ UX
if (startNode) uxScore++; // –ï—Å—Ç—å —á–µ—Ç–∫–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if (menuNode) uxScore++; // –ï—Å—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
if (russianNodes.length >= nodeNames.length * 0.8) uxScore++; // –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
if (emojiNodes.length >= nodeNames.length * 0.5) uxScore++; // –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
if (buttons && handlers && matchingHandlers.length === buttons.length) uxScore++; // –í—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
if (menuNode?.config?.text && menuNode.config.text.length > 10) uxScore++; // –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
if (botData.configuration.connections.length >= botData.configuration.nodes.length - 2) uxScore++; // –•–æ—Ä–æ—à–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å
if (botData.configuration.nodes.length >= 5) uxScore++; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

const uxPercentage = Math.round((uxScore / maxUxScore) * 100);
console.log(`   UX –û—Ü–µ–Ω–∫–∞: ${uxScore}/${maxUxScore} (${uxPercentage}%)`);

if (uxPercentage >= 90) {
    console.log('   üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç!');
} else if (uxPercentage >= 75) {
    console.log('   üëç –•–æ—Ä–æ—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç');
} else if (uxPercentage >= 60) {
    console.log('   üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π');
} else {
    console.log('   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–µ');
}

console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');