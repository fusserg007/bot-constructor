#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
 */

const { FileStorage } = require('../utils/FileStorage');
const fs = require('fs').promises;
const path = require('path');

class TestBotCreator {
    constructor() {
        this.storage = new FileStorage();
        this.testUserId = 999999999; // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
        this.createdBots = [];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
     */
    async createAllTestBots() {
        console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤...\n');

        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.createTestUser();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            const templates = await this.loadAllTemplates();
            
            // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            for (const template of templates) {
                await this.createBotFromTemplate(template);
            }

            // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
            await this.createCustomTestBots();

            console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ ${this.createdBots.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤`);
            console.log('\nüìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤:');
            this.createdBots.forEach((bot, index) => {
                console.log(`${index + 1}. ${bot.name} (${bot.messengerType || 'telegram'}) - ${bot.template?.id || 'custom'}`);
            });

            console.log('\nüí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node test/cleanup-test-data.js');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async createTestUser() {
        const testUser = {
            telegramId: this.testUserId,
            username: 'test_bot_creator',
            firstName: 'Test',
            lastName: 'Bot Creator',
            subscription: {
                plan: 'premium', // –î–∞–µ–º –ø—Ä–µ–º–∏—É–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
                expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // –ù–∞ –≥–æ–¥
                botsLimit: 100
            },
            bots: [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        await this.storage.createUser(testUser.telegramId, testUser);
        console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
     */
    async loadAllTemplates() {
        const templatesDir = path.join(__dirname, '..', 'data', 'templates');
        const files = await fs.readdir(templatesDir);
        const templates = [];

        for (const file of files) {
            if (file.endsWith('.json') && file.startsWith('template_')) {
                try {
                    const templatePath = path.join(templatesDir, file);
                    const templateData = await fs.readFile(templatePath, 'utf8');
                    const template = JSON.parse(templateData);
                    templates.push(template);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω ${file}:`, error.message);
                }
            }
        }

        console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤`);
        return templates;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
     */
    async createBotFromTemplate(template) {
        try {
            const botData = {
                name: `Test ${template.name}`,
                description: `–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞: ${template.description}`,
                token: this.generateTestToken(template.id),
                messengerType: 'telegram',
                userId: this.testUserId,
                status: 'draft',
                template: {
                    id: template.id,
                    category: template.category,
                    customizations: {}
                },
                configuration: template.configuration,
                useVisualEditor: true,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };

            const createdBot = await this.storage.createBot(this.testUserId, botData);
            
            if (createdBot && createdBot.id) {
                this.createdBots.push(createdBot);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±–æ—Ç: ${createdBot.name}`);
            } else {
                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ${template.id}`);
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ${template.id}:`, error.message);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
     */
    async createCustomTestBots() {
        // –ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram
        await this.createCustomBot({
            name: 'Test Telegram Bot',
            description: '–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Ñ—É–Ω–∫—Ü–∏–π',
            messengerType: 'telegram',
            configuration: this.createBasicConfiguration('telegram')
        });

        // –ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MAX
        await this.createCustomBot({
            name: 'Test MAX Bot',
            description: '–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MAX —Ñ—É–Ω–∫—Ü–∏–π',
            messengerType: 'max',
            configuration: this.createBasicConfiguration('max')
        });

        // –ë–æ—Ç —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
        await this.createCustomBot({
            name: 'Test Visual Editor Bot',
            description: '–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞',
            messengerType: 'telegram',
            useVisualEditor: true,
            visualSchemaId: 'test-visual-schema',
            configuration: this.createVisualConfiguration()
        });

        // –ë–æ—Ç —Å –æ—à–∏–±–∫–∞–º–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫)
        await this.createCustomBot({
            name: 'Test Error Handling Bot',
            description: '–ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
            messengerType: 'telegram',
            configuration: this.createErrorConfiguration()
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞
     */
    async createCustomBot(botConfig) {
        try {
            const botData = {
                name: botConfig.name,
                description: botConfig.description,
                token: this.generateTestToken(botConfig.name.toLowerCase().replace(/\s+/g, '_')),
                messengerType: botConfig.messengerType || 'telegram',
                userId: this.testUserId,
                status: 'draft',
                useVisualEditor: botConfig.useVisualEditor || false,
                visualSchemaId: botConfig.visualSchemaId,
                configuration: botConfig.configuration,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };

            const createdBot = await this.storage.createBot(this.testUserId, botData);
            
            if (createdBot && createdBot.id) {
                this.createdBots.push(createdBot);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –±–æ—Ç: ${createdBot.name}`);
            } else {
                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞ ${botConfig.name}`);
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞ ${botConfig.name}:`, error.message);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    createBasicConfiguration(messengerType) {
        return {
            nodes: [
                {
                    id: 'start_trigger',
                    type: 'trigger',
                    position: { x: 50, y: 50 },
                    data: {
                        triggerType: 'command',
                        command: '/start'
                    },
                    connections: ['welcome_action']
                },
                {
                    id: 'welcome_action',
                    type: 'action',
                    position: { x: 250, y: 50 },
                    data: {
                        actionType: 'send_message',
                        message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ${messengerType.toUpperCase()} –±–æ—Ç–∞!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å\n/help - –ø–æ–º–æ—â—å\n/test - —Ç–µ—Å—Ç`
                    },
                    connections: []
                },
                {
                    id: 'help_trigger',
                    type: 'trigger',
                    position: { x: 50, y: 150 },
                    data: {
                        triggerType: 'command',
                        command: '/help'
                    },
                    connections: ['help_action']
                },
                {
                    id: 'help_action',
                    type: 'action',
                    position: { x: 250, y: 150 },
                    data: {
                        actionType: 'send_message',
                        message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.'
                    },
                    connections: []
                },
                {
                    id: 'test_trigger',
                    type: 'trigger',
                    position: { x: 50, y: 250 },
                    data: {
                        triggerType: 'command',
                        command: '/test'
                    },
                    connections: ['test_condition']
                },
                {
                    id: 'test_condition',
                    type: 'condition',
                    position: { x: 250, y: 250 },
                    data: {
                        conditionType: 'user_is_admin'
                    },
                    connections: {
                        true: ['admin_response'],
                        false: ['user_response']
                    }
                },
                {
                    id: 'admin_response',
                    type: 'action',
                    position: { x: 450, y: 200 },
                    data: {
                        actionType: 'send_message',
                        message: 'üîß –¢–µ—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
                    },
                    connections: []
                },
                {
                    id: 'user_response',
                    type: 'action',
                    position: { x: 450, y: 300 },
                    data: {
                        actionType: 'send_message',
                        message: '‚úÖ –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
                    },
                    connections: []
                }
            ]
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    createVisualConfiguration() {
        return {
            nodes: [
                {
                    id: 'visual_start',
                    type: 'trigger',
                    position: { x: 100, y: 100 },
                    data: {
                        triggerType: 'message',
                        filters: ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']
                    },
                    connections: ['visual_response']
                },
                {
                    id: 'visual_response',
                    type: 'action',
                    position: { x: 300, y: 100 },
                    data: {
                        actionType: 'send_message',
                        message: '–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.'
                    },
                    connections: ['visual_delay']
                },
                {
                    id: 'visual_delay',
                    type: 'action',
                    position: { x: 500, y: 100 },
                    data: {
                        actionType: 'delay',
                        delay: 2000
                    },
                    connections: ['visual_followup']
                },
                {
                    id: 'visual_followup',
                    type: 'action',
                    position: { x: 700, y: 100 },
                    data: {
                        actionType: 'send_message',
                        message: '–ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
                    },
                    connections: []
                }
            ]
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    createErrorConfiguration() {
        return {
            nodes: [
                {
                    id: 'error_trigger',
                    type: 'trigger',
                    position: { x: 50, y: 50 },
                    data: {
                        triggerType: 'command',
                        command: '/error'
                    },
                    connections: ['invalid_node_id'] // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É–∑–µ–ª
                },
                {
                    id: 'valid_node',
                    type: 'action',
                    position: { x: 250, y: 50 },
                    data: {
                        actionType: 'send_message',
                        message: '–≠—Ç–æ—Ç —É–∑–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'
                    },
                    connections: []
                },
                {
                    id: 'invalid_action_type',
                    type: 'action',
                    position: { x: 50, y: 150 },
                    data: {
                        actionType: 'unknown_action', // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
                        message: '–≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å'
                    },
                    connections: []
                }
            ]
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     */
    generateTestToken(identifier) {
        const timestamp = Date.now();
        const random = Math.random().toString(36).substring(2, 15);
        return `${timestamp}:TEST_TOKEN_${identifier.toUpperCase()}_${random}`;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
if (require.main === module) {
    const creator = new TestBotCreator();
    creator.createAllTestBots().catch((error) => {
        console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤:', error);
        process.exit(1);
    });
}

module.exports = TestBotCreator;