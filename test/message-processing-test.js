/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Bot Constructor
 */

const BotRuntime = require('../utils/BotRuntime');
const NodeProcessor = require('../utils/NodeProcessor');
// const VisualSchemaConverter = require('../utils/VisualSchemaConverter'); // –£–î–ê–õ–ï–ù
const { FileStorage } = require('../utils/FileStorage');

class MessageProcessingTester {
    constructor() {
        this.botRuntime = new BotRuntime();
        this.storage = new FileStorage();
        // this.schemaConverter = new VisualSchemaConverter(); // –£–î–ê–õ–ï–ù
        this.testResults = {
            passed: 0,
            failed: 0,
            errors: []
        };
        this.testBotId = 'test-message-bot';
        this.testUserId = 987654321;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async runAllTests() {
        console.log('üí¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...\n');

        try {
            await this.setupTestBot();
            await this.testBasicMessageProcessing();
            await this.testCommandProcessing();
            await this.testConditionalFlow();
            await this.testVisualSchemaProcessing();
            await this.testNodeProcessor();
            await this.testErrorHandling();
            await this.cleanup();

            this.printResults();
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            this.testResults.failed++;
            this.testResults.errors.push(`Critical error: ${error.message}`);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
     */
    async setupTestBot() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...');

        try {
            const testBot = {
                name: 'Message Processing Test Bot',
                description: 'Bot for testing message processing',
                token: '123456789:TEST_MESSAGE_PROCESSING_TOKEN',
                messengerType: 'telegram',
                userId: this.testUserId,
                status: 'active',
                configuration: {
                    nodes: [
                        {
                            id: 'trigger1',
                            type: 'trigger',
                            position: { x: 50, y: 50 },
                            data: { 
                                triggerType: 'command',
                                command: '/start'
                            },
                            connections: ['action1']
                        },
                        {
                            id: 'action1',
                            type: 'action',
                            position: { x: 200, y: 50 },
                            data: { 
                                actionType: 'send_message',
                                message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç.'
                            },
                            connections: []
                        },
                        {
                            id: 'trigger2',
                            type: 'trigger',
                            position: { x: 50, y: 150 },
                            data: { 
                                triggerType: 'message',
                                filters: ['–ø—Ä–∏–≤–µ—Ç', 'hello']
                            },
                            connections: ['action2']
                        },
                        {
                            id: 'action2',
                            type: 'action',
                            position: { x: 200, y: 150 },
                            data: { 
                                actionType: 'send_message',
                                message: '–ü—Ä–∏–≤–µ—Ç, {user_name}! –ö–∞–∫ –¥–µ–ª–∞?'
                            },
                            connections: []
                        }
                    ]
                },
                createdAt: new Date().toISOString()
            };

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const testUser = {
                telegramId: this.testUserId,
                username: 'test_message_user',
                firstName: 'Test',
                lastName: 'Message User',
                subscription: { plan: 'free', botsLimit: 10 },
                bots: [],
                createdAt: new Date().toISOString()
            };

            await this.storage.createUser(this.testUserId, testUser);

            // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            const createdBot = await this.storage.createBot(this.testUserId, testBot);
            this.testBotId = createdBot.id;
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } catch (error) {
            this.fail('Test bot setup failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async testBasicMessageProcessing() {
        console.log('üì® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...');

        try {
            // –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            const testMessage = {
                message_id: 1,
                from: {
                    id: this.testUserId,
                    first_name: 'Test',
                    username: 'testuser'
                },
                chat: {
                    id: this.testUserId,
                    type: 'private'
                },
                text: '–ø—Ä–∏–≤–µ—Ç',
                date: Math.floor(Date.now() / 1000)
            };

            // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
            const mockBot = {
                id: this.testBotId,
                config: await this.storage.getBot(this.testBotId),
                stats: {
                    messagesProcessed: 0,
                    activeUsers: new Set(),
                    lastActivity: new Date().toISOString()
                }
            };

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            const triggers = mockBot.config.configuration.nodes.filter(node => node.type === 'trigger');
            let triggerMatched = false;

            for (const trigger of triggers) {
                if (await this.checkTrigger(trigger, testMessage)) {
                    triggerMatched = true;
                    break;
                }
            }

            this.assert(triggerMatched, 'Message should match at least one trigger');
            console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Basic message processing test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
     */
    async testCommandProcessing() {
        console.log('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥...');

        try {
            const commandMessage = {
                message_id: 2,
                from: {
                    id: this.testUserId,
                    first_name: 'Test',
                    username: 'testuser'
                },
                chat: {
                    id: this.testUserId,
                    type: 'private'
                },
                text: '/start',
                date: Math.floor(Date.now() / 1000)
            };

            const bot = await this.storage.getBot(this.testBotId);
            const commandTrigger = bot.configuration.nodes.find(
                node => node.type === 'trigger' && node.data.triggerType === 'command'
            );

            const isCommandMatch = await this.checkTrigger(commandTrigger, commandMessage);
            this.assert(isCommandMatch, 'Command should be recognized');

            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Command processing test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
     */
    async testConditionalFlow() {
        console.log('üîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞...');

        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ö–µ–º—É —Å —É—Å–ª–æ–≤–∏–µ–º
            const conditionalSchema = {
                nodes: [
                    {
                        id: 'trigger1',
                        type: 'trigger',
                        data: { triggerType: 'message' },
                        connections: ['condition1']
                    },
                    {
                        id: 'condition1',
                        type: 'condition',
                        data: { 
                            conditionType: 'text_contains',
                            text: 'admin'
                        },
                        connections: {
                            true: ['action_admin'],
                            false: ['action_user']
                        }
                    },
                    {
                        id: 'action_admin',
                        type: 'action',
                        data: { 
                            actionType: 'send_message',
                            message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!'
                        }
                    },
                    {
                        id: 'action_user',
                        type: 'action',
                        data: { 
                            actionType: 'send_message',
                            message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!'
                        }
                    }
                ]
            };

            // –¢–µ—Å—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
            const adminMessage = {
                from: { id: this.testUserId, first_name: 'Admin' },
                chat: { id: this.testUserId },
                text: 'admin panel'
            };

            const condition = conditionalSchema.nodes.find(n => n.type === 'condition');
            const conditionResult = await this.evaluateCondition(condition, adminMessage);
            this.assert(conditionResult === true, 'Admin message should pass condition');

            // –¢–µ—Å—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userMessage = {
                from: { id: this.testUserId, first_name: 'User' },
                chat: { id: this.testUserId },
                text: 'hello world'
            };

            const userConditionResult = await this.evaluateCondition(condition, userMessage);
            this.assert(userConditionResult === false, 'User message should fail condition');

            console.log('‚úÖ –£—Å–ª–æ–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Conditional flow test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º
     */
    async testVisualSchemaProcessing() {
        console.log('üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º...');

        try {
            const visualSchema = {
                nodes: [
                    {
                        id: 'start',
                        type: 'trigger',
                        position: { x: 100, y: 100 },
                        data: { triggerType: 'command', command: '/help' }
                    },
                    {
                        id: 'help_response',
                        type: 'action',
                        position: { x: 300, y: 100 },
                        data: { 
                            actionType: 'send_message',
                            message: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å\n/help - –ø–æ–º–æ—â—å'
                        }
                    }
                ],
                connections: [
                    { from: 'start', to: 'help_response' }
                ]
            };

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—É—é
            const executableConfig = this.schemaConverter.convertToExecutable(visualSchema);
            
            this.assert(executableConfig.nodes.length === 2, 'Should convert all nodes');
            this.assert(executableConfig.nodes[0].connections.includes('help_response'), 'Should create connections');

            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('Visual schema processing test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç NodeProcessor
     */
    async testNodeProcessor() {
        console.log('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NodeProcessor...');

        try {
            const mockBotInstance = {
                id: this.testBotId,
                config: await this.storage.getBot(this.testBotId),
                telegramBot: {
                    sendMessage: async (chatId, text) => {
                        console.log(`Mock send: ${text} to ${chatId}`);
                        return { message_id: Date.now() };
                    }
                }
            };

            const processor = new NodeProcessor(mockBotInstance);
            await processor.init();

            // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            const testMessage = {
                from: { id: this.testUserId, first_name: 'Test' },
                chat: { id: this.testUserId },
                text: '/start'
            };

            // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            console.log('‚ÑπÔ∏è NodeProcessor —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)');
            this.testResults.passed++;

            console.log('‚úÖ NodeProcessor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.fail('NodeProcessor test failed', error);
        }
    }

    /**
     * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
     */
    async testErrorHandling() {
        console.log('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');

        try {
            // –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            const invalidConfig = {
                nodes: [
                    {
                        id: 'invalid_node',
                        type: 'unknown_type',
                        data: {}
                    }
                ]
            };

            // –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ gracefully
            try {
                const executableConfig = this.schemaConverter.convertToExecutable({
                    nodes: invalidConfig.nodes,
                    connections: []
                });
                // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª–æ –æ—à–∏–±–∫—É, —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–æ–π—á–∏–≤–æ–π
            } catch (conversionError) {
                // –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º–∞ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            }

            // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            const emptyMessage = {
                from: { id: this.testUserId },
                chat: { id: this.testUserId },
                text: null
            };

            const bot = await this.storage.getBot(this.testBotId);
            const triggers = bot.configuration.nodes.filter(node => node.type === 'trigger');
            
            // –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–±–æ–µ–≤
            for (const trigger of triggers) {
                try {
                    await this.checkTrigger(trigger, emptyMessage);
                } catch (triggerError) {
                    // –û—à–∏–±–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è gracefully
                }
            }

            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            this.testResults.passed++;
        } catch (error) {
            this.fail('Error handling test failed', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ BotRuntime)
     */
    async checkTrigger(trigger, message) {
        const triggerData = trigger.data;

        switch (triggerData.triggerType) {
            case 'command':
                return message.text && message.text.startsWith(triggerData.command);
            case 'message':
                if (triggerData.filters) {
                    return triggerData.filters.some(filter => {
                        return message.text && message.text.toLowerCase().includes(filter.toLowerCase());
                    });
                }
                return message.text && message.text.length > 0;
            default:
                return false;
        }
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ BotRuntime)
     */
    async evaluateCondition(node, message) {
        const conditionData = node.data;

        switch (conditionData.conditionType) {
            case 'text_contains':
                return message.text && message.text.toLowerCase().includes(conditionData.text.toLowerCase());
            case 'user_is_admin':
                return message.from.id === message.chat.id; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            default:
                return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async cleanup() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...');

        try {
            if (this.testBotId) {
                await this.storage.deleteBot(this.testBotId);
            }
            await this.storage.deleteUser(this.testUserId);
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
        }
    }

    /**
     * –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
     */
    assert(condition, message) {
        if (condition) {
            this.testResults.passed++;
        } else {
            this.testResults.failed++;
            this.testResults.errors.push(message);
            throw new Error(`Assertion failed: ${message}`);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    fail(message, error) {
        this.testResults.failed++;
        this.testResults.errors.push(`${message}: ${error.message}`);
        console.error(`‚ùå ${message}:`, error.message);
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    printResults() {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
        
        if (this.testResults.errors.length > 0) {
            console.log('\nüêõ –û—à–∏–±–∫–∏:');
            this.testResults.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        const successRate = (this.testResults.passed / (this.testResults.passed + this.testResults.failed)) * 100;
        console.log(`\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${successRate.toFixed(1)}%`);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const tester = new MessageProcessingTester();
    tester.runAllTests().catch(console.error);
}

module.exports = MessageProcessingTester;