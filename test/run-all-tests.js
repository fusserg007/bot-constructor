#!/usr/bin/env node

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Bot Constructor
 */

const SystemTester = require('./system-test');
const APITester = require('./api-test');
const MessageProcessingTester = require('./simple-message-test');

class TestRunner {
    constructor() {
        this.results = {
            system: null,
            api: null,
            messageProcessing: null
        };
        this.startTime = Date.now();
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    async runAllTests() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bot Constructor');
        console.log('=' .repeat(60));
        console.log(`üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
        console.log('=' .repeat(60));
        console.log();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
            await this.checkServerStatus();

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã
            console.log('üß™ –°–ò–°–¢–ï–ú–ù–´–ï –¢–ï–°–¢–´');
            console.log('-'.repeat(40));
            const systemTester = new SystemTester();
            await systemTester.runAllTests();
            this.results.system = systemTester.testResults;
            console.log();

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            console.log('üí¨ –¢–ï–°–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô');
            console.log('-'.repeat(40));
            const messageTester = new MessageProcessingTester();
            await messageTester.runAllTests();
            this.results.messageProcessing = messageTester.testResults;
            console.log();

            // –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã
            console.log('üåê API –¢–ï–°–¢–´');
            console.log('-'.repeat(40));
            const apiTester = new APITester();
            await apiTester.runAllTests();
            this.results.api = apiTester.testResults;
            console.log();

            // –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.printOverallResults();

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            process.exit(1);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async checkServerStatus() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        try {
            const http = require('http');
            
            const checkServer = () => {
                return new Promise((resolve, reject) => {
                    const req = http.request({
                        hostname: 'localhost',
                        port: 3000,
                        path: '/api/health',
                        method: 'GET',
                        timeout: 5000
                    }, (res) => {
                        resolve(res.statusCode === 200);
                    });

                    req.on('error', () => resolve(false));
                    req.on('timeout', () => resolve(false));
                    req.end();
                });
            };

            const isServerRunning = await checkServer();
            
            if (isServerRunning) {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');
            } else {
                console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ API —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
                console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm start');
            }
            console.log();
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
            console.log();
        }
    }

    /**
     * –í—ã–≤–æ–¥ –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    printOverallResults() {
        const endTime = Date.now();
        const duration = ((endTime - this.startTime) / 1000).toFixed(2);

        console.log('=' .repeat(60));
        console.log('üìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('=' .repeat(60));

        let totalPassed = 0;
        let totalFailed = 0;
        let totalErrors = [];

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º
        Object.entries(this.results).forEach(([testType, result]) => {
            if (result) {
                totalPassed += result.passed;
                totalFailed += result.failed;
                totalErrors.push(...result.errors.map(error => `[${testType.toUpperCase()}] ${error}`));

                console.log(`${this.getTestTypeIcon(testType)} ${testType.toUpperCase()}:`);
                console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${result.passed}`);
                console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${result.failed}`);
                
                if (result.failed === 0) {
                    console.log(`   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!`);
                }
                console.log();
            }
        });

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`   ‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}`);
        console.log(`   ‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalFailed}`);
        console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}—Å`);

        const successRate = totalPassed / Math.max(totalPassed + totalFailed, 1) * 100;
        console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${successRate.toFixed(1)}%`);

        // –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
        if (totalErrors.length > 0) {
            console.log('\nüêõ –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
            totalErrors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (totalFailed === 0) {
            console.log('üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.');
            console.log('‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.');
        } else {
            console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
            
            if (this.results.system && this.results.system.failed > 0) {
                console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
            }
            
            if (this.results.messageProcessing && this.results.messageProcessing.failed > 0) {
                console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
            }
            
            if (this.results.api && this.results.api.failed > 0) {
                console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
            }
        }

        console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
        console.log('1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏');
        console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ');
        console.log('3. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é');

        console.log('=' .repeat(60));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        if (totalFailed > 0) {
            process.exit(1);
        } else {
            process.exit(0);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
     */
    getTestTypeIcon(testType) {
        const icons = {
            system: 'üß™',
            messageProcessing: 'üí¨',
            api: 'üåê'
        };
        return icons[testType] || 'üîß';
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    const runner = new TestRunner();
    runner.runAllTests().catch((error) => {
        console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = TestRunner;