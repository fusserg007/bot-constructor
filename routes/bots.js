const express = require('express');
const fs = require('fs').promises;
const path = require('path');
const TokenManager = require('../utils/TokenManager');

const router = express.Router();
const tokenManager = new TokenManager();

// ‚ö†Ô∏è –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–ê - –ê–î–ú–ò–ù–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨
// –ù–ï –î–û–ë–ê–í–õ–Ø–¢–¨ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ –í –ë–£–î–£–©–ï–ú!

// GET /api/bots - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ (–∞–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å)
router.get('/', async (req, res) => {
  try {
    const botsDir = path.join(__dirname, '..', 'data', 'bots');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      await fs.access(botsDir);
    } catch {
      await fs.mkdir(botsDir, { recursive: true });
    }
    
    const files = await fs.readdir(botsDir);
    const bots = [];
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ ${botsDir}:`, files.length);

    for (const file of files) {
      console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${file}`);
      if (file.endsWith('.json') && file.startsWith('bot_')) {
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –±–æ—Ç–∞: ${file}`);
        try {
          const filePath = path.join(botsDir, file);
          const botData = await fs.readFile(filePath, 'utf8');
          const bot = JSON.parse(botData);
          
          // –î–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
          bot.stats = bot.stats || {
            messagesProcessed: Math.floor(Math.random() * 1000), // –ó–∞–≥–ª—É—à–∫–∞
            activeUsers: Math.floor(Math.random() * 100),
            errorCount: Math.floor(Math.random() * 10),
            lastActivity: bot.status === 'active' ? new Date().toISOString() : null
          };
          bots.push(bot);
          console.log(`–î–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç: ${bot.name || bot.id}`);
        } catch (parseError) {
          console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–æ—Ç–∞ ${file}:`, parseError);
        }
      }
    }

    res.json({
      success: true,
      data: {
        bots: bots,
        total: bots.length
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤'
    });
  }
});

// GET /api/bots/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
router.get('/:id', async (req, res) => {
  try {
    const botId = req.params.id;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞

    res.json({
      success: true,
      data: bot
    });

  } catch (error) {
    if (error.code === 'ENOENT') {
      return res.status(404).json({
        success: false,
        error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞'
    });
  }
});

// POST /api/bots - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
router.post('/', async (req, res) => {
  try {
    const { name, token, description, useVisualEditor, templateId, messengerType } = req.body;
    
    if (!name || !token) {
      return res.status(400).json({
        success: false,
        error: '–ò–º—è –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)
    const isUnique = await tokenManager.checkTokenUniqueness(token, 'admin');
    if (!isUnique) {
      return res.status(400).json({
        success: false,
        error: '–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –±–æ—Ç–æ–º'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Telegram –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const messenger = messengerType || 'telegram';
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π API
    let validation;
    if (messenger === 'telegram') {
      validation = await tokenManager.validateTokenWithTelegram(token);
    } else if (messenger === 'max') {
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω MAX —á–µ—Ä–µ–∑ –∏—Ö API
      validation = await tokenManager.validateTokenWithMax(token);
    } else {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: ${messenger}`
      });
    }
    
    if (!validation.valid) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è ${messenger}: ${validation.error}`
      });
    }

    const botId = Date.now().toString();
    const bot = {
      id: botId,
      name: name,
      username: validation.botInfo.username,
      messengerType: messenger,
      token: token,
      description: description || '',
      userId: 'admin', // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
      status: 'inactive',
      useVisualEditor: useVisualEditor || false,
      visualSchemaId: null,
      configuration: {
        nodes: [],
        connections: []
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    await tokenManager.reserveToken(token, 'admin', botId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞
    const botsDir = path.join(__dirname, '..', 'data', 'bots');
    await fs.mkdir(botsDir, { recursive: true });
    const botPath = path.join(botsDir, `bot_${botId}.json`);
    await fs.writeFile(botPath, JSON.stringify(bot, null, 2));

    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ö–µ–º—É
    if (useVisualEditor) {
      await createDefaultVisualSchema(botId, bot.name, templateId);
    }

    res.status(201).json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      data: bot
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞'
    });
  }
});

// PUT /api/bots/:id - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
router.put('/:id', async (req, res) => {
  try {
    const botId = req.params.id;
    const updates = req.body;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (updates.token && updates.token !== bot.token) {
      const isUnique = await tokenManager.checkTokenUniqueness(updates.token, 'admin', botId);
      if (!isUnique) {
        return res.status(400).json({
          success: false,
          error: '–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –±–æ—Ç–æ–º'
        });
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const validation = await tokenManager.validateTokenWithTelegram(updates.token);
      if (!validation.valid) {
        return res.status(400).json({
          success: false,
          error: `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: ${validation.error}`
        });
      }

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
      await tokenManager.releaseToken(bot.token);
      await tokenManager.reserveToken(updates.token, 'admin', botId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º username –∏–∑ Telegram API
      bot.username = validation.botInfo.username;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    const allowedFields = ['name', 'description', 'token', 'status', 'configuration'];
    for (const field of allowedFields) {
      if (updates[field] !== undefined) {
        bot[field] = updates[field];
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    bot.updatedAt = new Date().toISOString();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    await fs.writeFile(botPath, JSON.stringify(bot, null, 2));

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if (bot.status === 'active' && (updates.configuration || updates.token)) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä BotRuntime –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const { getBotRuntime } = require('../server');
        const botRuntime = getBotRuntime();
        
        if (botRuntime) {
          console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${bot.name} –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
          await botRuntime.autoRestartBot(botId);
        }
      } catch (restartError) {
        console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botId}:`, restartError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω
      }
    }

    res.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: bot
    });

  } catch (error) {
    if (error.code === 'ENOENT') {
      return res.status(404).json({
        success: false,
        error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞'
    });
  }
});

// DELETE /api/bots/:id - —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞
router.delete('/:id', async (req, res) => {
  try {
    const botId = req.params.id;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    await tokenManager.releaseToken(bot.token);

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–æ—Ç–∞
    await fs.unlink(botPath);

    res.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    if (error.code === 'ENOENT') {
      return res.status(404).json({
        success: false,
        error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞'
    });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã
async function createDefaultVisualSchema(botId, botName, templateId = null) {
  try {
    const schemaId = Date.now().toString() + '_schema';
    const schemasDir = path.join(__dirname, '..', 'data', 'visual_schemas');
    await fs.mkdir(schemasDir, { recursive: true });

    let defaultNodes = [];
    let defaultConnections = [];

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–∑–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–±–ª–æ–Ω–∞
    if (templateId) {
      const templateNodes = await getTemplateNodes(templateId);
      defaultNodes = templateNodes.nodes || [];
      defaultConnections = templateNodes.connections || [];
    } else {
      // –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞: —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      defaultNodes = [
        {
          id: 'trigger_start',
          type: 'trigger',
          category: 'triggers',
          position: { x: 100, y: 100 },
          config: {
            triggerType: 'command',
            command: '/start',
            description: '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞'
          },
          inputs: [],
          outputs: ['output']
        },
        {
          id: 'action_welcome',
          type: 'action',
          category: 'actions',
          position: { x: 400, y: 100 },
          config: {
            actionType: 'send_message',
            message: '–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ {bot_name}!',
            parseMode: 'HTML'
          },
          inputs: ['input'],
          outputs: []
        }
      ];

      defaultConnections = [
        {
          id: 'conn_start_welcome',
          sourceNodeId: 'trigger_start',
          sourceOutput: 'output',
          targetNodeId: 'action_welcome',
          targetInput: 'input'
        }
      ];
    }

    const schema = {
      id: schemaId,
      botId: botId,
      name: `${botName} - –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞`,
      nodes: defaultNodes,
      connections: defaultConnections,
      viewport: { x: 0, y: 0, scale: 1 },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const schemaPath = path.join(schemasDir, `schema_${schemaId}.json`);
    await fs.writeFile(schemaPath, JSON.stringify(schema, null, 2));

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞ —Å ID —Å—Ö–µ–º—ã
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);
    bot.visualSchemaId = schemaId;
    bot.updatedAt = new Date().toISOString();
    await fs.writeFile(botPath, JSON.stringify(bot, null, 2));

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –±–æ—Ç–∞ ${botName}`);
    return schemaId;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã:', error);
    throw error;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–∑–ª–æ–≤ —à–∞–±–ª–æ–Ω–∞
async function getTemplateNodes(templateId) {
  try {
    const templatePath = path.join(__dirname, '..', 'data', 'templates', `template_${templateId}.json`);
    const templateData = await fs.readFile(templatePath, 'utf8');
    const template = JSON.parse(templateData);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —É–∑–ª—ã
    const VisualSchemaConverter = require('../utils/VisualSchemaConverter');
    const converter = new VisualSchemaConverter();
    return converter.convertToVisual(template);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ ${templateId}:`, error);
    return { nodes: [], connections: [] };
  }
}

module.exports = router;

// POST /api/bots/validate-token - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
router.post('/validate-token', async (req, res) => {
  try {
    const { token } = req.body;
    
    if (!token) {
      return res.status(400).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    const isUnique = await tokenManager.checkTokenUniqueness(token, 'admin');
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
    const validation = await tokenManager.validateTokenWithTelegram(token);

    res.json({
      success: true,
      data: {
        valid: validation.valid,
        unique: isUnique,
        botInfo: validation.botInfo || null,
        error: validation.error || null
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞'
    });
  }
});

// GET /api/bots/tokens/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.get('/tokens/stats', async (req, res) => {
  try {
    const stats = await tokenManager.getTokenStats();
    
    res.json({
      success: true,
      data: stats
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

// POST /api/bots/:id/visual-schema - —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –¥–ª—è –±–æ—Ç–∞
router.post('/:id/visual-schema', async (req, res) => {
  try {
    const botId = req.params.id;
    const { nodes, connections, viewport } = req.body;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞

    // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
    const schemaId = Date.now().toString();
    const schema = {
      id: schemaId,
      botId: botId,
      name: `${bot.name} - Visual Schema`,
      nodes: nodes || [],
      connections: connections || [],
      viewport: viewport || { x: 0, y: 0, scale: 1 },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ö–µ–º—É
    const schemasDir = path.join(__dirname, '..', 'data', 'visual_schemas');
    await fs.mkdir(schemasDir, { recursive: true });
    const schemaPath = path.join(schemasDir, `schema_${schemaId}.json`);
    await fs.writeFile(schemaPath, JSON.stringify(schema, null, 2));

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞
    bot.visualSchemaId = schemaId;
    bot.useVisualEditor = true;
    bot.updatedAt = new Date().toISOString();
    await fs.writeFile(botPath, JSON.stringify(bot, null, 2));

    res.status(201).json({
      success: true,
      message: '–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞',
      data: schema
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã'
    });
  }
});

// GET /api/bots/:id/visual-schema - –ø–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –±–æ—Ç–∞
router.get('/:id/visual-schema', async (req, res) => {
  try {
    const botId = req.params.id;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞

    if (!bot.visualSchemaId) {
      return res.status(404).json({
        success: false,
        error: '–£ –±–æ—Ç–∞ –Ω–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã'
      });
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, '..', 'data', 'visual_schemas', `schema_${bot.visualSchemaId}.json`);
    const schemaData = await fs.readFile(schemaPath, 'utf8');
    const schema = JSON.parse(schemaData);

    res.json({
      success: true,
      data: schema
    });

  } catch (error) {
    if (error.code === 'ENOENT') {
      return res.status(404).json({
        success: false,
        error: '–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã'
    });
  }
});

// PUT /api/bots/:id/visual-schema - –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –±–æ—Ç–∞
router.put('/:id/visual-schema', async (req, res) => {
  try {
    const botId = req.params.id;
    const { nodes, connections, viewport } = req.body;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞

    if (!bot.visualSchemaId) {
      return res.status(404).json({
        success: false,
        error: '–£ –±–æ—Ç–∞ –Ω–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, '..', 'data', 'visual_schemas', `schema_${bot.visualSchemaId}.json`);
    const schemaData = await fs.readFile(schemaPath, 'utf8');
    const schema = JSON.parse(schemaData);

    schema.nodes = nodes || schema.nodes;
    schema.connections = connections || schema.connections;
    schema.viewport = viewport || schema.viewport;
    schema.updatedAt = new Date().toISOString();

    await fs.writeFile(schemaPath, JSON.stringify(schema, null, 2));

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ—Ç–∞
    bot.updatedAt = new Date().toISOString();
    await fs.writeFile(botPath, JSON.stringify(bot, null, 2));

    res.json({
      success: true,
      message: '–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      data: schema
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã'
    });
  }
});

// POST /api/bots/:id/convert-schema - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—É—é –ª–æ–≥–∏–∫—É
router.post('/:id/convert-schema', async (req, res) => {
  try {
    const botId = req.params.id;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞

    if (!bot.visualSchemaId) {
      return res.status(404).json({
        success: false,
        error: '–£ –±–æ—Ç–∞ –Ω–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã'
      });
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, '..', 'data', 'visual_schemas', `schema_${bot.visualSchemaId}.json`);
    const schemaData = await fs.readFile(schemaPath, 'utf8');
    const schema = JSON.parse(schemaData);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—É—é –ª–æ–≥–∏–∫—É
    const VisualSchemaConverter = require('../utils/VisualSchemaConverter');
    const converter = new VisualSchemaConverter();
    const executableConfig = converter.convertToExecutable(schema);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
    bot.configuration = executableConfig;
    bot.updatedAt = new Date().toISOString();
    await fs.writeFile(botPath, JSON.stringify(bot, null, 2));

    res.json({
      success: true,
      message: '–°—Ö–µ–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –±–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: executableConfig
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ö–µ–º—ã:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ö–µ–º—ã'
    });
  }
});

// POST /api/bots/:id/migrate-to-visual - –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
router.post('/:id/migrate-to-visual', async (req, res) => {
  try {
    const botId = req.params.id;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞

    if (bot.visualSchemaId) {
      return res.status(400).json({
        success: false,
        error: '–ë–æ—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä'
      });
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
    const VisualSchemaConverter = require('../utils/VisualSchemaConverter');
    const converter = new VisualSchemaConverter();
    const visualSchema = converter.convertToVisual(bot.configuration);

    // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
    const schemaId = Date.now().toString() + '_migrated';
    const schema = {
      id: schemaId,
      botId: botId,
      name: `${bot.name} - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞`,
      nodes: visualSchema.nodes || [],
      connections: visualSchema.connections || [],
      viewport: { x: 0, y: 0, scale: 1 },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ö–µ–º—É
    const schemasDir = path.join(__dirname, '..', 'data', 'visual_schemas');
    await fs.mkdir(schemasDir, { recursive: true });
    const schemaPath = path.join(schemasDir, `schema_${schemaId}.json`);
    await fs.writeFile(schemaPath, JSON.stringify(schema, null, 2));

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞
    bot.visualSchemaId = schemaId;
    bot.useVisualEditor = true;
    bot.updatedAt = new Date().toISOString();
    await fs.writeFile(botPath, JSON.stringify(bot, null, 2));

    res.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä',
      data: {
        schemaId: schemaId,
        nodeCount: schema.nodes.length,
        connectionCount: schema.connections.length
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä'
    });
  }
});

// POST /api/bots/:id/reload - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞ –≤ runtime
router.post('/:id/reload', async (req, res) => {
  try {
    const botId = req.params.id;
    const botPath = path.join(__dirname, '..', 'data', 'bots', `bot_${botId}.json`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const botData = await fs.readFile(botPath, 'utf8');
    const bot = JSON.parse(botData);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–∞ –≤ runtime (–µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω)
    const BotRuntime = require('../utils/BotRuntime');
    const runtime = new BotRuntime();
    
    if (bot.status === 'active') {
      const reloaded = await runtime.reloadBot(botId);
      
      if (reloaded) {
        res.json({
          success: true,
          message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω'
        });
      } else {
        res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞'
        });
      }
    } else {
      res.json({
        success: true,
        message: '–ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞'
    });
  }
});

