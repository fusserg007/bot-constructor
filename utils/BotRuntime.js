const fs = require('fs').promises;
const path = require('path');
const NodeProcessor = require('./NodeProcessor');
// –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å—Ö–µ–º —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
const Logger = require('./Logger');
const MessengerAdapterFactory = require('./MessengerAdapterFactory');

/**
 * –°—Ä–µ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–æ–≤
 */
class BotRuntime {
  constructor() {
    this.activeBots = new Map(); // Map<botId, MessengerAdapter>
    this.botConfigs = new Map(); // Map<botId, botConfig>
    this.nodeProcessors = new Map(); // Map<botId, NodeProcessor>
    this.webhookUrl = process.env.WEBHOOK_URL || 'https://your-domain.com';
    this.usePolling = process.env.USE_POLLING !== 'false';
    this.botsDir = path.join(__dirname, '..', 'data', 'bots');
    this.schemasDir = path.join(__dirname, '..', 'data', 'visual_schemas');
    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å—Ö–µ–º —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    this.logger = new Logger();
    this.healthCheckInterval = null;
    this.healthCheckIntervalMs = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  }

  async loadAllBots() {
    try {
      console.log('ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤...');
      
      const files = await fs.readdir(this.botsDir);
      let loadedCount = 0;

      for (const file of files) {
        if (file.endsWith('.json') && file.startsWith('bot_')) {
          try {
            const botPath = path.join(this.botsDir, file);
            const botData = await fs.readFile(botPath, 'utf8');
            const bot = JSON.parse(botData);

            if (bot.status === 'active' && bot.token) {
              await this.loadBot(bot.id, bot);
              loadedCount++;
            }
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${file}:`, error.message);
          }
        }
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loadedCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤
      if (loadedCount > 0) {
        this.startHealthCheck();
      }
      
      return loadedCount;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', error);
      return 0;
    }
  }

  async loadBot(botId, botConfig) {
    try {
      if (!botConfig.token) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
      }

      if (!botConfig.messengerType) {
        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø, —Å—á–∏—Ç–∞–µ–º Telegram
        botConfig.messengerType = 'telegram';
      }

      console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ ${botConfig.messengerType.toUpperCase()} –±–æ—Ç–∞ ${botConfig.name}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –±–æ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
      if (botConfig.visualSchemaId || botConfig.useVisualEditor) {
        console.log(`üé® –ë–æ—Ç ${botConfig.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
        await this.loadAndConvertVisualSchema(botId, botConfig);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ NodeProcessor
        botConfig.useNodeProcessor = true;
      }

      // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
      const adapter = MessengerAdapterFactory.createAdapter(botConfig.messengerType, {
        token: botConfig.token,
        botId: botId,
        usePolling: this.usePolling,
        webhookUrl: this.webhookUrl,
        onMessage: (message) => this.processMessage(botId, message)
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
      const initialized = await adapter.initialize();
      if (!initialized) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${botConfig.messengerType} –∞–¥–∞–ø—Ç–µ—Ä`);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
      const started = await adapter.start();
      if (!started) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ${botConfig.messengerType} –±–æ—Ç–∞`);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      this.activeBots.set(botId, adapter);
      this.botConfigs.set(botId, botConfig);

      console.log(`‚úÖ ${botConfig.messengerType.toUpperCase()} –±–æ—Ç ${botConfig.name} (${botId}) –∑–∞–≥—Ä—É–∂–µ–Ω`);
      return adapter;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${botId}:`, error.message);
      throw error;
    }
  }

  async stopBot(botId) {
    try {
      const botInstance = this.activeBots.get(botId);
      if (!botInstance) {
        return false;
      }

      if (botInstance.mode === 'polling') {
        botInstance.telegramBot.stopPolling();
      } else {
        await botInstance.telegramBot.deleteWebHook();
      }
      
      this.activeBots.delete(botId);
      this.botConfigs.delete(botId);

      console.log(`üõë –ë–æ—Ç ${botInstance.config.name} (${botId}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      return true;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ${botId}:`, error.message);
      return false;
    }
  }

  async reloadBot(botId) {
    try {
      console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ ${botId}...`);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
      await this.stopBot(botId);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const botPath = path.join(this.botsDir, `bot_${botId}.json`);
      const botData = await fs.readFile(botPath, 'utf8');
      const botConfig = JSON.parse(botData);

      if (botConfig.status === 'active' && botConfig.token) {
        await this.loadBot(botId, botConfig);
        console.log(`‚úÖ –ë–æ—Ç ${botId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω`);
        return true;
      }
      
      console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–∞`);
      return false;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${botId}:`, error.message);
      return false;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   * @param {string} botId - ID –±–æ—Ç–∞
   * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
   */
  async autoRestartBot(botId) {
    try {
      const adapter = this.activeBots.get(botId);
      if (!adapter) {
        console.log(`–ë–æ—Ç ${botId} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫`);
        return false;
      }

      console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${botId} –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
      
      const result = await this.reloadBot(botId);
      
      if (result) {
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        await this.logger.logBotEvent(botId, 'auto_restart', {
          reason: 'configuration_changed',
          timestamp: new Date().toISOString()
        });
      }
      
      return result;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botId}:`, error);
      return false;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤
   */
  startHealthCheck() {
    if (this.healthCheckInterval) {
      clearInterval(this.healthCheckInterval);
    }

    console.log(`üè• –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ ${this.healthCheckIntervalMs / 60000} –º–∏–Ω—É—Ç)`);
    
    this.healthCheckInterval = setInterval(async () => {
      await this.performHealthCheck();
    }, this.healthCheckIntervalMs);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    setTimeout(async () => {
      await this.performHealthCheck();
    }, 5 * 60 * 1000);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤
   */
  stopHealthCheck() {
    if (this.healthCheckInterval) {
      clearInterval(this.healthCheckInterval);
      this.healthCheckInterval = null;
      console.log('üè• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  async performHealthCheck() {
    try {
      console.log('üè• –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤...');
      
      const BotDeploymentManager = require('./BotDeploymentManager');
      const deploymentManager = new BotDeploymentManager();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
      const tokenValidation = await deploymentManager.validateAllActiveTokens();
      
      console.log(`üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${tokenValidation.valid} –≤–∞–ª–∏–¥–Ω—ã—Ö, ${tokenValidation.invalid} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö`);
      
      if (tokenValidation.invalid > 0) {
        console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –±–æ—Ç—ã —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏:', tokenValidation.errors);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        const deactivationResult = await deploymentManager.deactivateInvalidBots();
        
        if (deactivationResult.success && deactivationResult.deactivated > 0) {
          console.log(`üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${deactivationResult.deactivated} –±–æ—Ç–æ–≤`);
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ runtime
          for (const bot of deactivationResult.bots) {
            await this.stopBot(bot.botId);
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
      let healthyBots = 0;
      let unhealthyBots = 0;
      
      for (const [botId, adapter] of this.activeBots) {
        try {
          const isHealthy = adapter.isActive && adapter.isHealthy();
          
          if (isHealthy) {
            healthyBots++;
          } else {
            unhealthyBots++;
            console.log(`‚ö†Ô∏è –ë–æ—Ç ${botId} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∑–¥–æ—Ä–æ–≤—ã–π –±–æ—Ç
            const restarted = await this.autoRestartBot(botId);
            if (restarted) {
              console.log(`‚úÖ –ë–æ—Ç ${botId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω`);
            } else {
              console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç ${botId}`);
            }
          }
        } catch (error) {
          unhealthyBots++;
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞ ${botId}:`, error);
        }
      }
      
      console.log(`üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${healthyBots} –∑–¥–æ—Ä–æ–≤—ã—Ö, ${unhealthyBots} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±–æ—Ç–æ–≤`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.logger.logSystemEvent('health_check', {
        totalBots: this.activeBots.size,
        healthyBots,
        unhealthyBots,
        tokenValidation: {
          valid: tokenValidation.valid,
          invalid: tokenValidation.invalid
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤:', error);
    }
  }



  async executeNodeFlow(botInstance, message) {
    const config = botInstance.config.configuration;
    if (!config || !config.nodes) return;

    const triggers = config.nodes.filter(node => node.type === 'trigger');
    
    for (const trigger of triggers) {
      if (await this.checkTrigger(trigger, message)) {
        await this.executeNode(botInstance, trigger, message);
      }
    }
  }

  async checkTrigger(trigger, message) {
    const triggerData = trigger.data;

    switch (triggerData.triggerType) {
      case 'command':
        return message.text && message.text.startsWith(triggerData.command);
      case 'message':
        if (triggerData.filters) {
          return triggerData.filters.some(filter => {
            switch (filter) {
              case 'contains_links':
                return message.text && (message.text.includes('http') || message.text.includes('www.'));
              default:
                return message.text && message.text.includes(filter);
            }
          });
        }
        return true;
      case 'new_chat_members':
        return message.new_chat_members && message.new_chat_members.length > 0;
      default:
        return false;
    }
  }

  async executeNode(botInstance, node, message, context = {}) {
    try {
      switch (node.type) {
        case 'trigger':
          if (node.connections && node.connections.length > 0) {
            for (const connectionId of node.connections) {
              const nextNode = this.findNodeById(botInstance.config.configuration, connectionId);
              if (nextNode) {
                await this.executeNode(botInstance, nextNode, message, context);
              }
            }
          }
          break;

        case 'action':
          await this.executeAction(botInstance, node, message, context);
          break;

        case 'condition':
          const conditionResult = await this.evaluateCondition(node, message, context);
          await this.executeConditionalFlow(botInstance, node, message, context, conditionResult);
          break;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–∑–ª–∞ ${node.id}:`, error.message);
    }
  }

  async executeAction(botInstance, node, message, context) {
    const actionData = node.data;

    try {
      switch (actionData.actionType) {
        case 'send_message':
          let messageText = this.replaceVariables(actionData.message, message, context);
          
          const sendOptions = {};
          if (actionData.keyboard) {
            sendOptions.reply_markup = {
              keyboard: actionData.keyboard,
              resize_keyboard: true,
              one_time_keyboard: true
            };
          }

          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: "${messageText}"`);
          await botInstance.telegramBot.sendMessage(message.chat.id, messageText, sendOptions);
          
          // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.logger.logAction(botInstance.id, 'send_message', {
            messageText: messageText.substring(0, 200),
            chatId: message.chat.id,
            userId: message.from.id
          });
          break;

        case 'delete_message':
          if (message.message_id) {
            await botInstance.telegramBot.deleteMessage(message.chat.id, message.message_id);
            await this.logger.logAction(botInstance.id, 'delete_message', {
              messageId: message.message_id,
              chatId: message.chat.id,
              userId: message.from.id
            });
          }
          break;
      }

      if (node.connections && node.connections.length > 0) {
        for (const connectionId of node.connections) {
          const nextNode = this.findNodeById(botInstance.config.configuration, connectionId);
          if (nextNode) {
            await this.executeNode(botInstance, nextNode, message, context);
          }
        }
      }
    } catch (error) {
      await this.logger.logError(botInstance.id, error, {
        context: 'executeAction',
        actionType: actionData.actionType,
        nodeId: node.id
      });
      throw error;
    }
  }

  async evaluateCondition(node, message, context) {
    const conditionData = node.data;

    switch (conditionData.conditionType) {
      case 'user_is_admin':
        return message.from.id === message.chat.id;
      case 'text_contains':
        return message.text && message.text.toLowerCase().includes(conditionData.text.toLowerCase());
      default:
        return false;
    }
  }

  async executeConditionalFlow(botInstance, node, message, context, conditionResult) {
    const connections = node.connections;
    
    if (typeof connections === 'object' && !Array.isArray(connections)) {
      const branch = conditionResult ? connections.true : connections.false;
      if (branch && Array.isArray(branch)) {
        for (const connectionId of branch) {
          const nextNode = this.findNodeById(botInstance.config.configuration, connectionId);
          if (nextNode) {
            await this.executeNode(botInstance, nextNode, message, context);
          }
        }
      }
    }
  }

  findNodeById(configuration, nodeId) {
    return configuration.nodes.find(node => node.id === nodeId);
  }

  async updateBotStats(botId, stats) {
    try {
      const botPath = path.join(this.botsDir, `bot_${botId}.json`);
      const botData = await fs.readFile(botPath, 'utf8');
      const bot = JSON.parse(botData);

      bot.stats = {
        messagesProcessed: stats.messagesProcessed,
        activeUsers: stats.activeUsers.size,
        lastActivity: stats.lastActivity
      };
      bot.updatedAt = new Date().toISOString();

      await fs.writeFile(botPath, JSON.stringify(bot, null, 2));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ ${botId}:`, error.message);
    }
  }

  getRuntimeStats() {
    const stats = {
      activeBots: this.activeBots.size,
      totalMessages: 0,
      totalErrors: 0,
      messengerTypes: {}
    };

    for (const [botId, adapter] of this.activeBots) {
      const adapterStats = adapter.getStats();
      stats.totalMessages += adapterStats.messagesReceived + adapterStats.messagesSent;
      stats.totalErrors += adapterStats.errors;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ—Ç—ã –ø–æ —Ç–∏–ø–∞–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤
      const messengerType = adapter.type;
      stats.messengerTypes[messengerType] = (stats.messengerTypes[messengerType] || 0) + 1;
    }

    return stats;
  }

  getBotInfo(botId) {
    const adapter = this.activeBots.get(botId);
    const botConfig = this.botConfigs.get(botId);
    
    if (!adapter || !botConfig) {
      return null;
    }

    return {
      id: botId,
      name: botConfig.name,
      messengerType: adapter.type,
      isActive: adapter.isActive,
      stats: adapter.getStats(),
      config: {
        messagesProcessed: botInstance.stats.messagesProcessed,
        activeUsers: botInstance.stats.activeUsers.size,
        lastActivity: botInstance.stats.lastActivity
      },
      webhookPath: botInstance.webhookPath
    };
  }
  /**
   * –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ
   */
  replaceVariables(text, message, context) {
    let result = text;
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    result = result.replace(/{user_name}/g, message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    result = result.replace(/{user_id}/g, message.from.id);
    result = result.replace(/{username}/g, message.from.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    result = result.replace(/{chat_id}/g, message.chat.id);
    result = result.replace(/{message_text}/g, message.text || '');
    result = result.replace(/{date}/g, new Date().toLocaleDateString());
    result = result.replace(/{time}/g, new Date().toLocaleTimeString());
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä
    if (text.includes('{user_choice}') || text.includes('{bot_choice}')) {
      const gameResult = this.playRockPaperScissors(message.text);
      result = result.replace(/{user_choice}/g, gameResult.userChoice);
      result = result.replace(/{bot_choice}/g, gameResult.botChoice);
      result = result.replace(/{result}/g, gameResult.result);
      result = result.replace(/{user_score}/g, gameResult.userScore);
      result = result.replace(/{bot_score}/g, gameResult.botScore);
    }
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    for (const [key, value] of Object.entries(context)) {
      const regex = new RegExp(`{${key}}`, 'g');
      result = result.replace(regex, value);
    }
    
    return result;
  }

  /**
   * –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
   */
  playRockPaperScissors(userText) {
    const choices = ['üóø –ö–∞–º–µ–Ω—å', '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã', 'üìÑ –ë—É–º–∞–≥–∞'];
    const userChoice = userText;
    const botChoice = choices[Math.floor(Math.random() * choices.length)];
    
    let result = '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (userChoice === botChoice) {
      result = 'ü§ù –ù–∏—á—å—è!';
    } else if (
      (userChoice === 'üóø –ö–∞–º–µ–Ω—å' && botChoice === '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã') ||
      (userChoice === '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã' && botChoice === 'üìÑ –ë—É–º–∞–≥–∞') ||
      (userChoice === 'üìÑ –ë—É–º–∞–≥–∞' && botChoice === 'üóø –ö–∞–º–µ–Ω—å')
    ) {
      result = 'üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
    } else {
      result = 'üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
    }
    
    return {
      userChoice: userChoice,
      botChoice: botChoice,
      result: result,
      userScore: 0, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–∑–∂–µ
      botScore: 0
    };
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async deleteMessage(botInstance, message) {
    try {
      await botInstance.telegramBot.deleteMessage(message.chat.id, message.message_id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async saveData(botInstance, actionData, message, context) {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: ${actionData.dataType}`, {
      userId: message.from.id,
      data: context
    });
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –¥–ª—è –±–æ—Ç–∞
   * @param {string} botId - ID –±–æ—Ç–∞
   * @param {Object} botConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
   */
  async loadAndConvertVisualSchema(botId, botConfig) {
    try {
      if (!botConfig.visualSchemaId) {
        console.log(`–ë–æ—Ç ${botId} –Ω–µ –∏–º–µ–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã`);
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
      const schemaPath = path.join(this.schemasDir, `schema_${botConfig.visualSchemaId}.json`);
      
      try {
        await fs.access(schemaPath);
      } catch (err) {
        console.error(`–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ ${botConfig.visualSchemaId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }
      
      const schemaData = await fs.readFile(schemaPath, 'utf8');
      const schema = JSON.parse(schemaData);
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å ${schema.nodes?.length || 0} —É–∑–ª–∞–º–∏ –∏ ${schema.connections?.length || 0} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏`);
      
      // –°—Ö–µ–º–∞ —É–∂–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
      const executableConfig = schema;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
      botConfig.configuration = executableConfig;
      botConfig.visualSchema = schema; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      console.log(`‚úÖ –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –¥–ª—è –±–æ—Ç–∞
   * @param {string} botId - ID –±–æ—Ç–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object|null} - –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –∏–ª–∏ null
   */
  async loadVisualSchema(botId, userId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
      const botPath = path.join(this.botsDir, userId, `${botId}.json`);
      
      try {
        await fs.access(botPath);
      } catch (err) {
        console.error(`–ë–æ—Ç ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }
      
      const botData = await fs.readFile(botPath, 'utf8');
      const bot = JSON.parse(botData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã
      if (!bot.visualSchemaId) {
        console.log(`–ë–æ—Ç ${botId} –Ω–µ –∏–º–µ–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã`);
        return null;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
      const schemaPath = path.join(this.schemasDir, userId, `${bot.visualSchemaId}.json`);
      
      try {
        await fs.access(schemaPath);
      } catch (err) {
        console.error(`–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ ${bot.visualSchemaId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return null;
      }
      
      const schemaData = await fs.readFile(schemaPath, 'utf8');
      const schema = JSON.parse(schemaData);
      
      return schema;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ –∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã
   * @param {string} botId - ID –±–æ—Ç–∞
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateBotFromVisualSchema(botId, userId) {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
      const schema = await this.loadVisualSchema(botId, userId);
      
      if (!schema) {
        return false;
      }
      
      // –°—Ö–µ–º–∞ —É–∂–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
      const executableSchema = schema;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
      const botPath = path.join(this.botsDir, userId, `${botId}.json`);
      const botData = await fs.readFile(botPath, 'utf8');
      const bot = JSON.parse(botData);
      
      bot.configuration = executableSchema;
      bot.updatedAt = new Date().toISOString();
      
      await fs.writeFile(botPath, JSON.stringify(bot, null, 2));
      
      // –ï—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
      if (this.activeBots.has(botId)) {
        await this.reloadBot(botId);
      }
      
      return true;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ ${botId} –∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã:`, error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç NodeProcessor –¥–ª—è –±–æ—Ç–∞
   * @param {Object} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
   * @returns {NodeProcessor} - –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —É–∑–ª–æ–≤
   */
  createNodeProcessor(botConfig) {
    const processor = new NodeProcessor(botConfig);
    return processor;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NodeProcessor
   * @param {Object} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
   * @param {Object} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   */
  async processMessageWithNodeProcessor(botId, message) {
    const adapter = this.activeBots.get(botId);
    const botConfig = this.botConfigs.get(botId);
    
    if (!adapter || !botConfig) {
      console.error(`–ë–æ—Ç ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    try {
      let processor = this.nodeProcessors.get(botId);
      
      if (!processor) {
        processor = this.createNodeProcessor(botConfig);
        this.nodeProcessors.set(botId, processor);
        await processor.init();
      }
      
      await processor.processTriggers(message);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
   * @param {Object} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
   * @param {Object} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   */
  async processMessage(botId, message) {
    const adapter = this.activeBots.get(botId);
    const botConfig = this.botConfigs.get(botId);
    
    if (!adapter || !botConfig) {
      console.error(`–ë–æ—Ç ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.logger.logMessage(
        botId, 
        message.userId, 
        message.text, 
        message.type
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–∞–ø—Ç–µ—Ä–∞
      adapter.updateStats('messagesReceived');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –±–æ—Ç NodeProcessor (–¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º)
      if (botConfig.useNodeProcessor) {
        await this.processMessageWithNodeProcessor(botId, message);
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await this.processMessageLegacy(botId, message);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ ${botId}:`, error);
      await this.logger.logError(botId, error, { 
        context: 'processMessage',
        userId: message.from?.id || message.userId,
        messageText: message.text?.substring(0, 100)
      });
    }
  }

  /**
   * –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * @param {Object} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
   * @param {Object} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   */
  async processMessageLegacy(botId, message) {
    const adapter = this.activeBots.get(botId);
    const botConfig = this.botConfigs.get(botId);
    
    if (!adapter || !botConfig) {
      console.error(`–ë–æ—Ç ${botId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    if (!botConfig.configuration || !botConfig.configuration.nodes) {
      console.log(`–ë–æ—Ç ${botId} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∑–ª–æ–≤`);
      return;
    }
    
    const triggers = botConfig.configuration.nodes.filter(node => node.type === 'trigger');
    
    for (const trigger of triggers) {
      if (await this.checkTrigger(trigger, message)) {
        await this.executeNode(botConfig, trigger, message);
      }
    }
  }
}

module.exports = BotRuntime;